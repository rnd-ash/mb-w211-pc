
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'EWM'
*/
    
pub const EWM_230_CAN_ID: u16 = 0x0230;

/// Gear selector lever position (NAG only)
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum EWM_230h_WHC {
	D = 5, // selector lever in position "D"
	N = 6, // Selector lever in "N" position
	R = 7, // selector lever in position "R"
	P = 8, // selector lever in position "P"
	PLUS = 9, // Selector lever in "+" position
	MINUS = 10, // Selector lever in "-" position
	N_ZW_D = 11, // selector lever in intermediate position "N-D"
	R_ZW_N = 12, // selector lever in intermediate position "R-N"
	P_ZW_R = 13, // selector lever in intermediate position "P-R"
	SNV = 15, // Selector lever position implausible
}

impl TryFrom<u8> for EWM_230h_WHC {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			5 => Ok(Self::D),
			6 => Ok(Self::N),
			7 => Ok(Self::R),
			8 => Ok(Self::P),
			9 => Ok(Self::PLUS),
			10 => Ok(Self::MINUS),
			11 => Ok(Self::N_ZW_D),
			12 => Ok(Self::R_ZW_N),
			13 => Ok(Self::P_ZW_R),
			15 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct EWM_230(pub u64);

impl EWM_230 {

	/// Gets CAN ID of EWM_230
	pub const fn get_canid() -> u16 { EWM_230_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Driving program

    pub fn set_W_S(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Driving program
    pub fn get_W_S(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Travel program button pressed

    pub fn set_FPT(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Travel program button pressed
    pub fn get_FPT(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Kick down

    pub fn set_KD(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Kick down
    pub fn get_KD(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Blocking magnet energized

    pub fn set_SPERR(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Blocking magnet energized
    pub fn get_SPERR(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Gear selector lever position (NAG only)

    pub fn set_WHC(&mut self, value: EWM_230h_WHC){ self.0 = (self.0 & 0xf0ffffffffffffff) | ((value as u64) & 0xf) << 56; }

    /// Gets Gear selector lever position (NAG only)
    pub fn get_WHC(&self) -> std::result::Result<EWM_230h_WHC, ()> { return EWM_230h_WHC::try_from((self.0 >> 56 & 0xf) as u8) }
        
}