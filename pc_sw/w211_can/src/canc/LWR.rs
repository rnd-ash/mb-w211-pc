
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'LWR'
*/
    
pub const LWR_530_CAN_ID: u16 = 0x0530;


#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct LWR_530(pub u64);

impl LWR_530 {

	/// Gets CAN ID of LWR_530
	pub const fn get_canid() -> u16 { LWR_530_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Display message 7: "Bending light currently not available"

    pub fn set_LWR_M7(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Display message 7: "Bending light currently not available"
    pub fn get_LWR_M7(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Display message 6: "Right cornering light"

    pub fn set_LWR_M6(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Display message 6: "Right cornering light"
    pub fn get_LWR_M6(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Display message 5: "Left cornering light"

    pub fn set_LWR_M5(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Display message 5: "Left cornering light"
    pub fn get_LWR_M5(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Display message 4: "Cornering light currently not available" (white/5x flashing at 1Hz)

    pub fn set_LWR_M4(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Display message 4: "Cornering light currently not available" (white/5x flashing at 1Hz)
    pub fn get_LWR_M4(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets Display message 3: "Cornering light currently not available" (white).

    pub fn set_LWR_M3(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets Display message 3: "Cornering light currently not available" (white).
    pub fn get_LWR_M3(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Display message 2: "Cornering light, backup light activated!" (White)

    pub fn set_LWR_M2(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Display message 2: "Cornering light, backup light activated!" (White)
    pub fn get_LWR_M2(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets Display message 1: "Cornering light defect! Drive to workshop"

    pub fn set_LWR_M1(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets Display message 1: "Cornering light defect! Drive to workshop"
    pub fn get_LWR_M1(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets Substitution of left low beam

    pub fn set_SUB_ABL_L(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Substitution of left low beam
    pub fn get_SUB_ABL_L(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Substitution of the low beam on the right

    pub fn set_SUB_ABL_R(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets Substitution of the low beam on the right
    pub fn get_SUB_ABL_R(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
}