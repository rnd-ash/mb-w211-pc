
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'KOMBI'
*/
    
pub const KOMBI_408_CAN_ID: u16 = 0x0408;
pub const KOMBI_412_CAN_ID: u16 = 0x0412;

/// Winter tire top speed with 4 bits
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_408h_WRC {
	UBG = 0, // unlimited
	BG210 = 1, // 210km/h
	BG190 = 2, // 190km/h
	BG160 = 3, // 160km/h
	BG240 = 4, // 240km/h
	BG230 = 5, // 230km/h
	BG220 = 6, // 220km/h
	BG200 = 7, // 200km/h
	BG180 = 128, // 180 km/h
	BG170 = 129, // 170km/h
	BG150 = 130, // 150km/h
	BG140 = 131, // 140km/h
	BG130 = 132, // 130km/h
	BG120 = 133, // 120km/h
	BG110 = 134, // 110km/h
	BG100 = 135, // 100km/h
}

impl TryFrom<u8> for KOMBI_408h_WRC {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::UBG),
			1 => Ok(Self::BG210),
			2 => Ok(Self::BG190),
			3 => Ok(Self::BG160),
			4 => Ok(Self::BG240),
			5 => Ok(Self::BG230),
			6 => Ok(Self::BG220),
			7 => Ok(Self::BG200),
			128 => Ok(Self::BG180),
			129 => Ok(Self::BG170),
			130 => Ok(Self::BG150),
			131 => Ok(Self::BG140),
			132 => Ok(Self::BG130),
			133 => Ok(Self::BG120),
			134 => Ok(Self::BG110),
			135 => Ok(Self::BG100),
			_ => Err(())
		}
	}
}
/// Set distance
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_412h_IST_ABST {
	SEHR_KLEIN = 0, // Very small
	KLEIN = 1, // Small
	MITTEL = 2, // Medium
	GROSS = 3, // Big
	SEHR_GROSS = 4, // Very big
	NICHT_DEFINIERT5 = 5, // Unknown
	NICHT_DEFINIERT6 = 6, // Unknown
	NICHT_DEFINIERT7 = 7, // Unknown
}

impl TryFrom<u8> for KOMBI_412h_IST_ABST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::SEHR_KLEIN),
			1 => Ok(Self::KLEIN),
			2 => Ok(Self::MITTEL),
			3 => Ok(Self::GROSS),
			4 => Ok(Self::SEHR_GROSS),
			5 => Ok(Self::NICHT_DEFINIERT5),
			6 => Ok(Self::NICHT_DEFINIERT6),
			7 => Ok(Self::NICHT_DEFINIERT7),
			_ => Err(())
		}
	}
}
/// Direction of wheel rotation to V_ANZ
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_412h_DRTGANZ {
	PASSIV = 0, // No detection of direction of rotation
	VOR = 1, // Direction of rotation forward
	RUECK = 2, // reverse direction of rotation
	SNV = 3, // Signal not available
}

impl TryFrom<u8> for KOMBI_412h_DRTGANZ {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::PASSIV),
			1 => Ok(Self::VOR),
			2 => Ok(Self::RUECK),
			3 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// Flat roll warning request
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_412h_PRW_ANF {
	IDLE = 0, // No change
	AUS = 1, // Turn off PRW
	EIN = 2, // Reactivate PRW
	SNV = 3, // Signal not available
}

impl TryFrom<u8> for KOMBI_412h_PRW_ANF {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::IDLE),
			1 => Ok(Self::AUS),
			2 => Ok(Self::EIN),
			3 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_408(pub u64);

impl KOMBI_408 {

	/// Gets CAN ID of KOMBI_408
	pub const fn get_canid() -> u16 { KOMBI_408_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets tank level. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_TANK_FS(&mut self, value: u8){ self.0 = (self.0 & 0x00ffffffffffffff) | ((value as u64) & 0xff) << 56; }

    /// Gets tank level. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_TANK_FS(&self) -> u8 { (self.0 >> 56 & 0xff) as u8 }
        
    /// Sets Driver's door open

    pub fn set_TF_AUF(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Driver's door open
    pub fn get_TF_AUF(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Cannot display speed limiter/cruise control

    pub fn set_V_DSPL_AUS(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets Cannot display speed limiter/cruise control
    pub fn get_V_DSPL_AUS(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets Tacho calibration

    pub fn set_TACHO_SYM(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets Tacho calibration
    pub fn get_TACHO_SYM(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets mph instead of km/h (variable speed limit)

    pub fn set_V_MPH(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets mph instead of km/h (variable speed limit)
    pub fn get_V_MPH(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets air conditioning available

    pub fn set_KLA_VH(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets air conditioning available
    pub fn get_KLA_VH(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets Preglow indicator lamp defective

    pub fn set_VGL_KL_DEF(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets Preglow indicator lamp defective
    pub fn get_VGL_KL_DEF(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets Tank level minimum

    pub fn set_TFSM(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets Tank level minimum
    pub fn get_TFSM(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets Terminal 61 decoupled

    pub fn set_KL_61E(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets Terminal 61 decoupled
    pub fn get_KL_61E(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets Outside air temperature raw value. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_T_AUSSEN(&mut self, value: u8){ self.0 = (self.0 & 0xffff00ffffffffff) | ((value as u64) & 0xff) << 40; }

    /// Gets Outside air temperature raw value. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_T_AUSSEN(&self) -> u8 { (self.0 >> 40 & 0xff) as u8 }
        
    /// Sets Terminal 58 dimmed. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_KL_58D(&mut self, value: u8){ self.0 = (self.0 & 0xffffff00ffffffff) | ((value as u64) & 0xff) << 32; }

    /// Gets Terminal 58 dimmed. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_KL_58D(&self) -> u8 { (self.0 >> 32 & 0xff) as u8 }
        
    /// Sets Engine shutdown time (sent from terminal 15). Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_MAZ(&mut self, value: u8){ self.0 = (self.0 & 0xffffffff00ffffff) | ((value as u64) & 0xff) << 24; }

    /// Gets Engine shutdown time (sent from terminal 15). Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_MAZ(&self) -> u8 { (self.0 >> 24 & 0xff) as u8 }
        
    /// Sets Mileage. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_KM16(&mut self, value: u16){ self.0 = (self.0 & 0xffffffffff0000ff) | ((value as u64) & 0xffff) << 8; }

    /// Gets Mileage. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_KM16(&self) -> u16 { (self.0 >> 8 & 0xffff) as u16 }
        
    /// Sets Winter tire speed limit bit 3

    pub fn set_WRC3(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffff7f) | ((value as u64) & 0x1) << 7; }

    /// Gets Winter tire speed limit bit 3
    pub fn get_WRC3(&self) -> bool { (self.0 >> 7 & 0x1) != 0 }
        
    /// Sets Speed ​​limiter/cruise control indicator active

    pub fn set_V_DSPL_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffbf) | ((value as u64) & 0x1) << 6; }

    /// Gets Speed ​​limiter/cruise control indicator active
    pub fn get_V_DSPL_AKT(&self) -> bool { (self.0 >> 6 & 0x1) != 0 }
        
    /// Sets Segment speedometer present

    pub fn set_SGT_VH(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffdf) | ((value as u64) & 0x1) << 5; }

    /// Gets Segment speedometer present
    pub fn get_SGT_VH(&self) -> bool { (self.0 >> 5 & 0x1) != 0 }
        
    /// Sets Auxiliary heater enable

    pub fn set_ZH_FREIG(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffef) | ((value as u64) & 0x1) << 4; }

    /// Gets Auxiliary heater enable
    pub fn get_ZH_FREIG(&self) -> bool { (self.0 >> 4 & 0x1) != 0 }
        
    /// Sets Switch on ESP roll test mode

    pub fn set_RT_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffff7) | ((value as u64) & 0x1) << 3; }

    /// Gets Switch on ESP roll test mode
    pub fn get_RT_EIN(&self) -> bool { (self.0 >> 3 & 0x1) != 0 }
        
    /// Sets Winter tire top speed with 4 bits

    pub fn set_WRC(&mut self, value: KOMBI_408h_WRC){ self.0 = (self.0 & 0xfffffffffffffff8) | ((value as u64) & 0x7) << 0; }

    /// Gets Winter tire top speed with 4 bits
    pub fn get_WRC(&self) -> std::result::Result<KOMBI_408h_WRC, ()> { return KOMBI_408h_WRC::try_from((self.0 >> 0 & 0x7) as u8) }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_412(pub u64);

impl KOMBI_412 {

	/// Gets CAN ID of KOMBI_412
	pub const fn get_canid() -> u16 { KOMBI_412_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Audible warning off

    pub fn set_AKU_WARN_AUS(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Audible warning off
    pub fn get_AKU_WARN_AUS(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Visual warning off

    pub fn set_OPT_WARN_AUS(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Visual warning off
    pub fn get_OPT_WARN_AUS(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets distance unit

    pub fn set_ABST_S(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets distance unit
    pub fn get_ABST_S(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Set distance

    pub fn set_IST_ABST(&mut self, value: KOMBI_412h_IST_ABST){ self.0 = (self.0 & 0xff8fffffffffffff) | ((value as u64) & 0x7) << 52; }

    /// Gets Set distance
    pub fn get_IST_ABST(&self) -> std::result::Result<KOMBI_412h_IST_ABST, ()> { return KOMBI_412h_IST_ABST::try_from((self.0 >> 52 & 0x7) as u8) }
        
    /// Sets Displayed speed. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_V_ANZ(&mut self, value: u16){ self.0 = (self.0 & 0xfff000ffffffffff) | ((value as u64) & 0xfff) << 40; }

    /// Gets Displayed speed. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_V_ANZ(&self) -> u16 { (self.0 >> 40 & 0xfff) as u16 }
        
    /// Sets Direction of wheel rotation to V_ANZ

    pub fn set_DRTGANZ(&mut self, value: KOMBI_412h_DRTGANZ){ self.0 = (self.0 & 0xffffff3fffffffff) | ((value as u64) & 0x3) << 38; }

    /// Gets Direction of wheel rotation to V_ANZ
    pub fn get_DRTGANZ(&self) -> std::result::Result<KOMBI_412h_DRTGANZ, ()> { return KOMBI_412h_DRTGANZ::try_from((self.0 >> 38 & 0x3) as u8) }
        
    /// Sets Wheel speed calculated from V_ANZ. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_DANZ(&mut self, value: u16){ self.0 = (self.0 & 0xffffffc000ffffff) | ((value as u64) & 0x3fff) << 24; }

    /// Gets Wheel speed calculated from V_ANZ. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_DANZ(&self) -> u16 { (self.0 >> 24 & 0x3fff) as u16 }
        
    /// Sets Operating mode changeover

    pub fn set_BTRBSART_UMSCH(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets Operating mode changeover
    pub fn get_BTRBSART_UMSCH(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets Parktronic warning tone is switched off

    pub fn set_PTS_TON_AUS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffbffff) | ((value as u64) & 0x1) << 18; }

    /// Gets Parktronic warning tone is switched off
    pub fn get_PTS_TON_AUS(&self) -> bool { (self.0 >> 18 & 0x1) != 0 }
        
    /// Sets Flat roll warning request

    pub fn set_PRW_ANF(&mut self, value: KOMBI_412h_PRW_ANF){ self.0 = (self.0 & 0xfffffffffffcffff) | ((value as u64) & 0x3) << 16; }

    /// Gets Flat roll warning request
    pub fn get_PRW_ANF(&self) -> std::result::Result<KOMBI_412h_PRW_ANF, ()> { return KOMBI_412h_PRW_ANF::try_from((self.0 >> 16 & 0x3) as u8) }
        
    /// Sets Engine stop time. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_MAZ_NEU(&mut self, value: u16){ self.0 = (self.0 & 0xfffffffffffff000) | ((value as u64) & 0xfff) << 0; }

    /// Gets Engine stop time. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_MAZ_NEU(&self) -> u16 { (self.0 >> 0 & 0xfff) as u16 }
        
}