
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'MRM'
*/
    
pub const LRW_236_CAN_ID: u16 = 0x0236;
pub const MRM_238_CAN_ID: u16 = 0x0238;

/// Steering wheel angle sensor identification
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum LRW_236h_LRWS_ID {
	INIT_PSBL = 0, // LRW sensor can be initialized
	INIT_SELF = 1, // LRW sensor initializes itself
	INIT_MUST = 2, // (LRW sensor needs to be initialized)
	SNV = 3, // Signal not available
}

impl TryFrom<u8> for LRW_236h_LRWS_ID {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::INIT_PSBL),
			1 => Ok(Self::INIT_SELF),
			2 => Ok(Self::INIT_MUST),
			3 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// Steering wheel angle sensor status
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum LRW_236h_LRWS_ST {
	OK = 0, // Steering wheel angle sensor OK
	INI = 1, // Steering wheel angle sensor not initialized
	ERR = 2, // Steering wheel angle sensor faulty
	ERR_INI = 3, // Steering wheel angle sensor faulty and not initialized
}

impl TryFrom<u8> for LRW_236h_LRWS_ST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::OK),
			1 => Ok(Self::INI),
			2 => Ok(Self::ERR),
			3 => Ok(Self::ERR_INI),
			_ => Err(())
		}
	}
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct LRW_236(pub u64);

impl LRW_236 {

	/// Gets CAN ID of LRW_236
	pub const fn get_canid() -> u16 { LRW_236_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets steering wheel angle. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_LRW(&mut self, value: u16){ self.0 = (self.0 & 0xc000ffffffffffff) | ((value as u64) & 0x3fff) << 48; }

    /// Gets steering wheel angle. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_LRW(&self) -> u16 { (self.0 >> 48 & 0x3fff) as u16 }
        
    /// Sets steering wheel angular velocity. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_VLRW(&mut self, value: u16){ self.0 = (self.0 & 0xffffc000ffffffff) | ((value as u64) & 0x3fff) << 32; }

    /// Gets steering wheel angular velocity. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_VLRW(&self) -> u16 { (self.0 >> 32 & 0x3fff) as u16 }
        
    /// Sets message counter. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_BZ236h(&mut self, value: u8){ self.0 = (self.0 & 0xffffffff0fffffff) | ((value as u64) & 0xf) << 28; }

    /// Gets message counter. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_BZ236h(&self) -> u8 { (self.0 >> 28 & 0xf) as u8 }
        
    /// Sets Steering wheel angle sensor identification

    pub fn set_LRWS_ID(&mut self, value: LRW_236h_LRWS_ID){ self.0 = (self.0 & 0xfffffffff3ffffff) | ((value as u64) & 0x3) << 26; }

    /// Gets Steering wheel angle sensor identification
    pub fn get_LRWS_ID(&self) -> Option<LRW_236h_LRWS_ID> {  LRW_236h_LRWS_ID::try_from((self.0 >> 26 & 0x3) as u8).ok() }
        
    /// Sets Steering wheel angle sensor status

    pub fn set_LRWS_ST(&mut self, value: LRW_236h_LRWS_ST){ self.0 = (self.0 & 0xfffffffffcffffff) | ((value as u64) & 0x3) << 24; }

    /// Gets Steering wheel angle sensor status
    pub fn get_LRWS_ST(&self) -> Option<LRW_236h_LRWS_ST> {  LRW_236h_LRWS_ST::try_from((self.0 >> 24 & 0x3) as u8).ok() }
        
    /// Sets CRC checksum byte 1 - 7 according to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_CRC236h(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffffffff00) | ((value as u64) & 0xff); }

    /// Gets CRC checksum byte 1 - 7 according to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_CRC236h(&self) -> u8 { (self.0 & 0xff) as u8 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct MRM_238(pub u64);

impl MRM_238 {

	/// Gets CAN ID of MRM_238
	pub const fn get_canid() -> u16 { MRM_238_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Cruise control lever implausible

    pub fn set_WH_UP(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Cruise control lever implausible
    pub fn get_WH_UP(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Operation variable speed limit

    pub fn set_VMAX_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Operation variable speed limit
    pub fn get_VMAX_AKT(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Cruise control lever: "Set and decelerate level 0"

    pub fn set_S_MINUS_B(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Cruise control lever: "Set and decelerate level 0"
    pub fn get_S_MINUS_B(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets Cruise control lever: "Set and accelerate level 0"

    pub fn set_S_PLUS_B(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets Cruise control lever: "Set and accelerate level 0"
    pub fn get_S_PLUS_B(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Cruise control selector: "Resume"

    pub fn set_WA(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Cruise control selector: "Resume"
    pub fn get_WA(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets Cruise control lever: "Switch off"

    pub fn set_AUS(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets Cruise control lever: "Switch off"
    pub fn get_AUS(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets Turn signal right

    pub fn set_BLI_RE(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Turn signal right
    pub fn get_BLI_RE(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Turn signal left

    pub fn set_BLI_LI(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets Turn signal left
    pub fn get_BLI_LI(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets Cruise control lever parity (even parity)

    pub fn set_WH_PA(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets Cruise control lever parity (even parity)
    pub fn get_WH_PA(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets message counter. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_BZ238h(&mut self, value: u8){ self.0 = (self.0 & 0xfff0ffffffffffff) | ((value as u64) & 0xf) << 48; }

    /// Gets message counter. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_BZ238h(&self) -> u8 { (self.0 >> 48 & 0xf) as u8 }
        
    /// Sets steering angle parity (even parity)

    pub fn set_LW_PA(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets steering angle parity (even parity)
    pub fn get_LW_PA(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets Steering Angle Sensor: Overflow

    pub fn set_LW_OV(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets Steering Angle Sensor: Overflow
    pub fn get_LW_OV(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets Steering angle sensor: code error

    pub fn set_LW_CF(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets Steering angle sensor: code error
    pub fn get_LW_CF(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets Steering angle sensor: not initialized

    pub fn set_LW_INI(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets Steering angle sensor: not initialized
    pub fn get_LW_INI(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets Steering angle sign

    pub fn set_LW_VZ(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets Steering angle sign
    pub fn get_LW_VZ(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets steering angle. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_LW(&mut self, value: u16){ self.0 = (self.0 & 0xfffff800ffffffff) | ((value as u64) & 0x7ff) << 32; }

    /// Gets steering angle. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_LW(&self) -> u16 { (self.0 >> 32 & 0x7ff) as u16 }
        
}