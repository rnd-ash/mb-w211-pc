
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'AGW'
*/
    
pub const AGW_A1_CAN_ID: u16 = 0x0034;
pub const AGW_A3_CAN_ID: u16 = 0x0138;
pub const GPS_A1_CAN_ID: u16 = 0x0338;
pub const GPS_A2_CAN_ID: u16 = 0x0339;
pub const GPS_A3_CAN_ID: u16 = 0x033A;
pub const IPS_A1_CAN_ID: u16 = 0x01BA;
pub const SD_RS_AGW_CAN_ID: u16 = 0x07D6;

/// Head unit numeric keypad
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum AGW_A3_ZIFFER_HU {
	N_BET = 0, // no key pressed
	T1 = 1, // key 1
	T2 = 2, // button 2
	T3 = 3, // button 3
	T4 = 4, // button 4
	T5 = 5, // key 5
	T6 = 6, // button 6
	T7 = 7, // key 7
	T8 = 8, // key 8
	T9 = 9, // key 9
	T10 = 10, // key 0
}

impl TryFrom<u8> for AGW_A3_ZIFFER_HU {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::N_BET),
			1 => Ok(Self::T1),
			2 => Ok(Self::T2),
			3 => Ok(Self::T3),
			4 => Ok(Self::T4),
			5 => Ok(Self::T5),
			6 => Ok(Self::T6),
			7 => Ok(Self::T7),
			8 => Ok(Self::T8),
			9 => Ok(Self::T9),
			10 => Ok(Self::T10),
			_ => Err(())
		}
	}
}
/// function keys
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum AGW_A3_FUNKTIONSTASTEN {
	N_BET = 0, // no key pressed
	F1 = 1, // function key 1
	F2 = 2, // function key 2
	F3 = 3, // function key 3
	F4 = 4, // function key 4
	F5 = 5, // function key 5
	F6 = 6, // function key 6
	F7 = 7, // function key 7
}

impl TryFrom<u8> for AGW_A3_FUNKTIONSTASTEN {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::N_BET),
			1 => Ok(Self::F1),
			2 => Ok(Self::F2),
			3 => Ok(Self::F3),
			4 => Ok(Self::F4),
			5 => Ok(Self::F5),
			6 => Ok(Self::F6),
			7 => Ok(Self::F7),
			_ => Err(())
		}
	}
}
/// Active application
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum AGW_A3_AKT_SYS {
	IDLE = 0, // no active application
	DATENFUNK = 1, // Data radio active
}

impl TryFrom<u8> for AGW_A3_AKT_SYS {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::IDLE),
			1 => Ok(Self::DATENFUNK),
			_ => Err(())
		}
	}
}
/// GPS fixed
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum GPS_A3_GPS_FIX {
	RES = 0, // Reserved
	NAV = 1, // not available
	NO_FIX = 2, // No fix
	FIX_2D = 3, // 2D fixed
	FIX_3D = 4, // 3D fixed
}

impl TryFrom<u8> for GPS_A3_GPS_FIX {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::RES),
			1 => Ok(Self::NAV),
			2 => Ok(Self::NO_FIX),
			3 => Ok(Self::FIX_2D),
			4 => Ok(Self::FIX_3D),
			_ => Err(())
		}
	}
}
/// IPS error
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum IPS_A1_IPS_ERROR {
	NO_FEHLER = 0, // no error
	FEHLER_1 = 1, // Error 1
	FEHLER_2 = 2, // Error 2
	FEHLER_3 = 3, // Error 3
	FEHLER_4 = 4, // Error 4
	FEHLER_5 = 5, // Error 5
	FEHLER_6 = 6, // Error 6
	SNV = 7, // Signal not available
}

impl TryFrom<u8> for IPS_A1_IPS_ERROR {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::NO_FEHLER),
			1 => Ok(Self::FEHLER_1),
			2 => Ok(Self::FEHLER_2),
			3 => Ok(Self::FEHLER_3),
			4 => Ok(Self::FEHLER_4),
			5 => Ok(Self::FEHLER_5),
			6 => Ok(Self::FEHLER_6),
			7 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// IPS display time
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum IPS_A1_IPS_TIME {
	IPSTIME1 = 0, // IPS display time = 2.0s
	IPSTIME2 = 1, // IPS display time = 2.5s
	IPSTIME3 = 2, // IPS display time = 3.0s
	IPSTIME4 = 3, // IPS display time = 3.5s
	IPSTIME5 = 4, // IPS display time = 4.0s
	IPSTIME6 = 5, // IPS display time = 4.5s
	IPSTIME7 = 6, // IPS display time = 5.0s
	IPSTIME8 = 7, // IPS display time = 5.5s
	IPSTIME9 = 8, // IPS display time = 6.0s
	IPSTIME10 = 9, // IPS display time = 6.5s
	IPSTIME11 = 10, // IPS display time = 7.0s
	IPSTIME12 = 11, // IPS display time = 7.5s
	IPSTIME13 = 12, // IPS display time = 8.0s
	IPSTIME14 = 13, // IPS display time = 8.5s
	IPSTIME15 = 14, // Unlimited viewing time
	SNV = 15, // Signal not available
}

impl TryFrom<u8> for IPS_A1_IPS_TIME {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::IPSTIME1),
			1 => Ok(Self::IPSTIME2),
			2 => Ok(Self::IPSTIME3),
			3 => Ok(Self::IPSTIME4),
			4 => Ok(Self::IPSTIME5),
			5 => Ok(Self::IPSTIME6),
			6 => Ok(Self::IPSTIME7),
			7 => Ok(Self::IPSTIME8),
			8 => Ok(Self::IPSTIME9),
			9 => Ok(Self::IPSTIME10),
			10 => Ok(Self::IPSTIME11),
			11 => Ok(Self::IPSTIME12),
			12 => Ok(Self::IPSTIME13),
			13 => Ok(Self::IPSTIME14),
			14 => Ok(Self::IPSTIME15),
			15 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// IPS icon display
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum IPS_A1_IPS_INDICATION {
	IPS_AKTIV = 0, // no icon requirement, IPS active
	ICON_1 = 1, // IPS icon 1
	ICON_2 = 2, // IPS icon 2
	ICON_3 = 3, // IPS icon 3
	ICON_4 = 4, // IPS icon 4
	ICON_5 = 5, // IPS icon 5
	ICON_6 = 6, // IPS icon 6
	ICON_7 = 7, // IPS icon 7
	ICON_8 = 8, // IPS icon 8
	ICON_9 = 9, // IPS Icon 9
	ICON_10 = 10, // IPS icon 10
	IPS_NOK = 11, // IPS not available
	IPS_OK = 12, // IPS available again
	IPS_AK = 13, // IPS Acknowledgment
	IPS_DEL = 14, // Delete IPS icon
	SNV = 15, // Signal not available
}

impl TryFrom<u8> for IPS_A1_IPS_INDICATION {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::IPS_AKTIV),
			1 => Ok(Self::ICON_1),
			2 => Ok(Self::ICON_2),
			3 => Ok(Self::ICON_3),
			4 => Ok(Self::ICON_4),
			5 => Ok(Self::ICON_5),
			6 => Ok(Self::ICON_6),
			7 => Ok(Self::ICON_7),
			8 => Ok(Self::ICON_8),
			9 => Ok(Self::ICON_9),
			10 => Ok(Self::ICON_10),
			11 => Ok(Self::IPS_NOK),
			12 => Ok(Self::IPS_OK),
			13 => Ok(Self::IPS_AK),
			14 => Ok(Self::IPS_DEL),
			15 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// IPS icon attributes
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum IPS_A1_IPS_ATTRIBUTE {
	DRING_0 = 0, // IPS Requirement: Normal
	DRING_1 = 1, // IPS requirement: priority 1
	DRING_2 = 2, // IPS Requirement: Urgency 2
	DRING_3 = 3, // IPS Requirement: Urgency 3
	SNV = 15, // Signal not available
}

impl TryFrom<u8> for IPS_A1_IPS_ATTRIBUTE {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::DRING_0),
			1 => Ok(Self::DRING_1),
			2 => Ok(Self::DRING_2),
			3 => Ok(Self::DRING_3),
			15 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct AGW_A1(pub u64);

impl AGW_A1 {

	/// Gets CAN ID of AGW_A1
	pub const fn get_canid() -> u16 { AGW_A1_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets HU cannot issue a release for opening

    pub fn set_WARN_SL_HU(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets HU cannot issue a release for opening
    pub fn get_WARN_SL_HU(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets CDC cannot authorize close

    pub fn set_WARN_SL_CDC(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets CDC cannot authorize close
    pub fn get_WARN_SL_CDC(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Open allowed

    pub fn set_AUF_OK_HU(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Open allowed
    pub fn get_AUF_OK_HU(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Close allowed

    pub fn set_ZU_OK_CDC(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Close allowed
    pub fn get_ZU_OK_CDC(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Switch panel locked for CDC

    pub fn set_EJECT_CDC(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Switch panel locked for CDC
    pub fn get_EJECT_CDC(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets Switch bar locked for HU

    pub fn set_EJECT_HU(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets Switch bar locked for HU
    pub fn get_EJECT_HU(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Voice control system active

    pub fn set_SBS_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Voice control system active
    pub fn get_SBS_AKT(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct AGW_A3(pub u64);

impl AGW_A3 {

	/// Gets CAN ID of AGW_A3
	pub const fn get_canid() -> u16 { AGW_A3_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Refusal to enter digits HU

    pub fn set_CANCEL_HU(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Refusal to enter digits HU
    pub fn get_CANCEL_HU(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Star key pressed

    pub fn set_STERN_HU(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Star key pressed
    pub fn get_STERN_HU(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Hash key pressed

    pub fn set_RAUTE_HU(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Hash key pressed
    pub fn get_RAUTE_HU(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Head unit numeric keypad

    pub fn set_ZIFFER_HU(&mut self, value: AGW_A3_ZIFFER_HU){ self.0 = (self.0 & 0xf0ffffffffffffff) | ((value as u64) & 0xf) << 56; }

    /// Gets Head unit numeric keypad
    pub fn get_ZIFFER_HU(&self) -> std::result::Result<AGW_A3_ZIFFER_HU, ()> { return AGW_A3_ZIFFER_HU::try_from((self.0 >> 56 & 0xf) as u8) }
        
    /// Sets function keys

    pub fn set_FUNKTIONSTASTEN(&mut self, value: AGW_A3_FUNKTIONSTASTEN){ self.0 = (self.0 & 0xffc7ffffffffffff) | ((value as u64) & 0x7) << 51; }

    /// Gets function keys
    pub fn get_FUNKTIONSTASTEN(&self) -> std::result::Result<AGW_A3_FUNKTIONSTASTEN, ()> { return AGW_A3_FUNKTIONSTASTEN::try_from((self.0 >> 51 & 0x7) as u8) }
        
    /// Sets Active application

    pub fn set_AKT_SYS(&mut self, value: AGW_A3_AKT_SYS){ self.0 = (self.0 & 0xfff8ffffffffffff) | ((value as u64) & 0x7) << 48; }

    /// Gets Active application
    pub fn get_AKT_SYS(&self) -> std::result::Result<AGW_A3_AKT_SYS, ()> { return AGW_A3_AKT_SYS::try_from((self.0 >> 48 & 0x7) as u8) }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct GPS_A1(pub u64);

impl GPS_A1 {

	/// Gets CAN ID of GPS_A1
	pub const fn get_canid() -> u16 { GPS_A1_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets GPS Latitude (+=North). Conversion formula (To raw from real): y=(x+648000000.0)/0.30 (Unit: ms)

    pub fn set_LATITUDE(&mut self, value: u32){ self.0 = (self.0 & 0x00000000ffffffff) | ((value as u64) & 0xffffffff) << 32; }

    /// Gets GPS Latitude (+=North). Conversion formula (To real from raw): y=(0.30x)-648000000.0 (Unit: ms)
    pub fn get_LATITUDE(&self) -> u32 { (self.0 >> 32 & 0xffffffff) as u32 }
        
    /// Sets GPS Longitude (+= East). Conversion formula (To raw from real): y=(x+648000000.0)/0.30 (Unit: ms)

    pub fn set_LONGITUDE(&mut self, value: u32){ self.0 = (self.0 & 0xffffffff00000000) | ((value as u64) & 0xffffffff) << 0; }

    /// Gets GPS Longitude (+= East). Conversion formula (To real from raw): y=(0.30x)-648000000.0 (Unit: ms)
    pub fn get_LONGITUDE(&self) -> u32 { (self.0 >> 0 & 0xffffffff) as u32 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct GPS_A2(pub u64);

impl GPS_A2 {

	/// Gets CAN ID of GPS_A2
	pub const fn get_canid() -> u16 { GPS_A2_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets UTC years. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: years)

    pub fn set_UTC_YEARS(&mut self, value: u16){ self.0 = (self.0 & 0x0000ffffffffffff) | ((value as u64) & 0xffff) << 48; }

    /// Gets UTC years. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: years)
    pub fn get_UTC_YEARS(&self) -> u16 { (self.0 >> 48 & 0xffff) as u16 }
        
    /// Sets UTC months. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: months)

    pub fn set_UTC_MONTHS(&mut self, value: u8){ self.0 = (self.0 & 0xffff00ffffffffff) | ((value as u64) & 0xff) << 40; }

    /// Gets UTC months. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: months)
    pub fn get_UTC_MONTHS(&self) -> u8 { (self.0 >> 40 & 0xff) as u8 }
        
    /// Sets UTC days. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: days)

    pub fn set_UTC_DAYS(&mut self, value: u8){ self.0 = (self.0 & 0xffffff00ffffffff) | ((value as u64) & 0xff) << 32; }

    /// Gets UTC days. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: days)
    pub fn get_UTC_DAYS(&self) -> u8 { (self.0 >> 32 & 0xff) as u8 }
        
    /// Sets UTC hours. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: h)

    pub fn set_UTC_HOURS(&mut self, value: u8){ self.0 = (self.0 & 0xffffffff00ffffff) | ((value as u64) & 0xff) << 24; }

    /// Gets UTC hours. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: h)
    pub fn get_UTC_HOURS(&self) -> u8 { (self.0 >> 24 & 0xff) as u8 }
        
    /// Sets UTC minutes. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: min)

    pub fn set_UTC_MINUTES(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffff00ffff) | ((value as u64) & 0xff) << 16; }

    /// Gets UTC minutes. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: min)
    pub fn get_UTC_MINUTES(&self) -> u8 { (self.0 >> 16 & 0xff) as u8 }
        
    /// Sets UTC seconds. Conversion formula (To raw from real): y=(x-0.0)/0.01 (Unit: s)

    pub fn set_UTC_SECONDS(&mut self, value: u16){ self.0 = (self.0 & 0xffffffffffff0000) | ((value as u64) & 0xffff) << 0; }

    /// Gets UTC seconds. Conversion formula (To real from raw): y=(0.01x)+0.0 (Unit: s)
    pub fn get_UTC_SECONDS(&self) -> u16 { (self.0 >> 0 & 0xffff) as u16 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct GPS_A3(pub u64);

impl GPS_A3 {

	/// Gets CAN ID of GPS_A3
	pub const fn get_canid() -> u16 { GPS_A3_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets GPS speed. Conversion formula (To raw from real): y=(x+32768.0)/1.00 (Unit: cm/s)

    pub fn set_GPS_SPEED(&mut self, value: u16){ self.0 = (self.0 & 0x0000ffffffffffff) | ((value as u64) & 0xffff) << 48; }

    /// Gets GPS speed. Conversion formula (To real from raw): y=(1.00x)-32768.0 (Unit: cm/s)
    pub fn get_GPS_SPEED(&self) -> u16 { (self.0 >> 48 & 0xffff) as u16 }
        
    /// Sets GPS Heading (0° = North). Conversion formula (To raw from real): y=(x-0.0)/1.41 (Unit: °)

    pub fn set_GPS_HEADING(&mut self, value: u8){ self.0 = (self.0 & 0xffff00ffffffffff) | ((value as u64) & 0xff) << 40; }

    /// Gets GPS Heading (0° = North). Conversion formula (To real from raw): y=(1.41x)+0.0 (Unit: °)
    pub fn get_GPS_HEADING(&self) -> u8 { (self.0 >> 40 & 0xff) as u8 }
        
    /// Sets GPS altitude. Conversion formula (To raw from real): y=(x+6400.0)/50.00 (Unit: m)

    pub fn set_GPS_HEIGHT(&mut self, value: u8){ self.0 = (self.0 & 0xffffff00ffffffff) | ((value as u64) & 0xff) << 32; }

    /// Gets GPS altitude. Conversion formula (To real from raw): y=(50.00x)-6400.0 (Unit: m)
    pub fn get_GPS_HEIGHT(&self) -> u8 { (self.0 >> 32 & 0xff) as u8 }
        
    /// Sets GPS fixed

    pub fn set_GPS_FIX(&mut self, value: GPS_A3_GPS_FIX){ self.0 = (self.0 & 0xfffffffff8ffffff) | ((value as u64) & 0x7) << 24; }

    /// Gets GPS fixed
    pub fn get_GPS_FIX(&self) -> std::result::Result<GPS_A3_GPS_FIX, ()> { return GPS_A3_GPS_FIX::try_from((self.0 >> 24 & 0x7) as u8) }
        
    /// Sets GPS position available

    pub fn set_POS_AVLB(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets GPS position available
    pub fn get_POS_AVLB(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets Differential GPS position data available

    pub fn set_DIFF_POS_AVLB(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffbfffff) | ((value as u64) & 0x1) << 22; }

    /// Gets Differential GPS position data available
    pub fn get_DIFF_POS_AVLB(&self) -> bool { (self.0 >> 22 & 0x1) != 0 }
        
    /// Sets Dead reckoning available

    pub fn set_DEAD_RCK(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffdfffff) | ((value as u64) & 0x1) << 21; }

    /// Gets Dead reckoning available
    pub fn get_DEAD_RCK(&self) -> bool { (self.0 >> 21 & 0x1) != 0 }
        
    /// Sets Inside digitized area (on map)

    pub fn set_IDG(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffefffff) | ((value as u64) & 0x1) << 20; }

    /// Gets Inside digitized area (on map)
    pub fn get_IDG(&self) -> bool { (self.0 >> 20 & 0x1) != 0 }
        
    /// Sets Fully digitized area

    pub fn set_FDG(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffff7ffff) | ((value as u64) & 0x1) << 19; }

    /// Gets Fully digitized area
    pub fn get_FDG(&self) -> bool { (self.0 >> 19 & 0x1) != 0 }
        
    /// Sets Matched to digital map

    pub fn set_MDM(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffbffff) | ((value as u64) & 0x1) << 18; }

    /// Gets Matched to digital map
    pub fn get_MDM(&self) -> bool { (self.0 >> 18 & 0x1) != 0 }
        
    /// Sets Calibrated

    pub fn set_CALI(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffdffff) | ((value as u64) & 0x1) << 17; }

    /// Gets Calibrated
    pub fn get_CALI(&self) -> bool { (self.0 >> 17 & 0x1) != 0 }
        
    /// Sets Vertical dilution of position. Conversion formula (To raw from real): y=(x-0.0)/0.10

    pub fn set_V_DOP(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffffff00ff) | ((value as u64) & 0xff) << 8; }

    /// Gets Vertical dilution of position. Conversion formula (To real from raw): y=(0.10x)+0.0
    pub fn get_V_DOP(&self) -> u8 { (self.0 >> 8 & 0xff) as u8 }
        
    /// Sets Horizontal dilution of position. Conversion formula (To raw from real): y=(x-0.0)/0.10

    pub fn set_H_DOP(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffffffff00) | ((value as u64) & 0xff) << 0; }

    /// Gets Horizontal dilution of position. Conversion formula (To real from raw): y=(0.10x)+0.0
    pub fn get_H_DOP(&self) -> u8 { (self.0 >> 0 & 0xff) as u8 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct IPS_A1(pub u64);

impl IPS_A1 {

	/// Gets CAN ID of IPS_A1
	pub const fn get_canid() -> u16 { IPS_A1_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets IPS Update Acknowledgment

    pub fn set_IPS_UPD_ACK(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets IPS Update Acknowledgment
    pub fn get_IPS_UPD_ACK(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets IPS error

    pub fn set_IPS_ERROR(&mut self, value: IPS_A1_IPS_ERROR){ self.0 = (self.0 & 0x8fffffffffffffff) | ((value as u64) & 0x7) << 60; }

    /// Gets IPS error
    pub fn get_IPS_ERROR(&self) -> std::result::Result<IPS_A1_IPS_ERROR, ()> { return IPS_A1_IPS_ERROR::try_from((self.0 >> 60 & 0x7) as u8) }
        
    /// Sets IPS Watchdog. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_IPS_WATCH(&mut self, value: u8){ self.0 = (self.0 & 0xf0ffffffffffffff) | ((value as u64) & 0xf) << 56; }

    /// Gets IPS Watchdog. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_IPS_WATCH(&self) -> u8 { (self.0 >> 56 & 0xf) as u8 }
        
    /// Sets IPS display time

    pub fn set_IPS_TIME(&mut self, value: IPS_A1_IPS_TIME){ self.0 = (self.0 & 0xff0fffffffffffff) | ((value as u64) & 0xf) << 52; }

    /// Gets IPS display time
    pub fn get_IPS_TIME(&self) -> std::result::Result<IPS_A1_IPS_TIME, ()> { return IPS_A1_IPS_TIME::try_from((self.0 >> 52 & 0xf) as u8) }
        
    /// Sets IPS icon display

    pub fn set_IPS_INDICATION(&mut self, value: IPS_A1_IPS_INDICATION){ self.0 = (self.0 & 0xfff0ffffffffffff) | ((value as u64) & 0xf) << 48; }

    /// Gets IPS icon display
    pub fn get_IPS_INDICATION(&self) -> std::result::Result<IPS_A1_IPS_INDICATION, ()> { return IPS_A1_IPS_INDICATION::try_from((self.0 >> 48 & 0xf) as u8) }
        
    /// Sets IPS icon attributes

    pub fn set_IPS_ATTRIBUTE(&mut self, value: IPS_A1_IPS_ATTRIBUTE){ self.0 = (self.0 & 0xfffff0ffffffffff) | ((value as u64) & 0xf) << 40; }

    /// Gets IPS icon attributes
    pub fn get_IPS_ATTRIBUTE(&self) -> std::result::Result<IPS_A1_IPS_ATTRIBUTE, ()> { return IPS_A1_IPS_ATTRIBUTE::try_from((self.0 >> 40 & 0xf) as u8) }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct SD_RS_AGW(pub u64);

impl SD_RS_AGW {

	/// Gets CAN ID of SD_RS_AGW
	pub const fn get_canid() -> u16 { SD_RS_AGW_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Identification for > 8 bytes

    pub fn set_AGW_KENN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Identification for > 8 bytes
    pub fn get_AGW_KENN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets error vector 07h

    pub fn set_AGW_FV07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets error vector 07h
    pub fn get_AGW_FV07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets error vector 06h

    pub fn set_AGW_FV06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets error vector 06h
    pub fn get_AGW_FV06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets error vector 05h

    pub fn set_AGW_FV05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets error vector 05h
    pub fn get_AGW_FV05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets error vector 04h

    pub fn set_AGW_FV04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets error vector 04h
    pub fn get_AGW_FV04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets error vector 03h

    pub fn set_AGW_FV03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets error vector 03h
    pub fn get_AGW_FV03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets error vector 02h

    pub fn set_AGW_FV02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets error vector 02h
    pub fn get_AGW_FV02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets error vector 01h

    pub fn set_AGW_FV01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets error vector 01h
    pub fn get_AGW_FV01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets error vector 0Fh

    pub fn set_AGW_FV0F(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets error vector 0Fh
    pub fn get_AGW_FV0F(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets error vector 0Eh

    pub fn set_AGW_FV0E(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets error vector 0Eh
    pub fn get_AGW_FV0E(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets error vector 0Dh

    pub fn set_AGW_FV0D(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets error vector 0Dh
    pub fn get_AGW_FV0D(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets error vector 0Ch

    pub fn set_AGW_FV0C(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets error vector 0Ch
    pub fn get_AGW_FV0C(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets error vector 0Bh

    pub fn set_AGW_FV0B(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets error vector 0Bh
    pub fn get_AGW_FV0B(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets error vector 0Ah

    pub fn set_AGW_FV0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets error vector 0Ah
    pub fn get_AGW_FV0A(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets error vector 09h

    pub fn set_AGW_FV09(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets error vector 09h
    pub fn get_AGW_FV09(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets error vector 08h

    pub fn set_AGW_FV08(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets error vector 08h
    pub fn get_AGW_FV08(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets error vector 17h

    pub fn set_AGW_FV17(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets error vector 17h
    pub fn get_AGW_FV17(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets error vector 16h

    pub fn set_AGW_FV16(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets error vector 16h
    pub fn get_AGW_FV16(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets error vector 15h

    pub fn set_AGW_FV15(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets error vector 15h
    pub fn get_AGW_FV15(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets error vector 14h

    pub fn set_AGW_FV14(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets error vector 14h
    pub fn get_AGW_FV14(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets error vector 13h

    pub fn set_AGW_FV13(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets error vector 13h
    pub fn get_AGW_FV13(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets error vector 12h

    pub fn set_AGW_FV12(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets error vector 12h
    pub fn get_AGW_FV12(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets error vector 11h

    pub fn set_AGW_FV11(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets error vector 11h
    pub fn get_AGW_FV11(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets error vector 10h

    pub fn set_AGW_FV10(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets error vector 10h
    pub fn get_AGW_FV10(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets error vector 1Fh

    pub fn set_AGW_FV1F(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets error vector 1Fh
    pub fn get_AGW_FV1F(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets error vector 1Eh

    pub fn set_AGW_FV1E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets error vector 1Eh
    pub fn get_AGW_FV1E(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets error vector 1Dh

    pub fn set_AGW_FV1D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets error vector 1Dh
    pub fn get_AGW_FV1D(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets Error vector 1Ch

    pub fn set_AGW_FV1C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets Error vector 1Ch
    pub fn get_AGW_FV1C(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets error vector 1Bh

    pub fn set_AGW_FV1B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets error vector 1Bh
    pub fn get_AGW_FV1B(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets Error vector 1Ah

    pub fn set_AGW_FV1A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets Error vector 1Ah
    pub fn get_AGW_FV1A(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets error vector 19h

    pub fn set_AGW_FV19(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets error vector 19h
    pub fn get_AGW_FV19(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets error vector 18h

    pub fn set_AGW_FV18(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets error vector 18h
    pub fn get_AGW_FV18(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
    /// Sets error vector 27h

    pub fn set_AGW_FV27(&mut self, value: bool){ self.0 = (self.0 & 0xffffffff7fffffff) | ((value as u64) & 0x1) << 31; }

    /// Gets error vector 27h
    pub fn get_AGW_FV27(&self) -> bool { (self.0 >> 31 & 0x1) != 0 }
        
    /// Sets error vector 26h

    pub fn set_AGW_FV26(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets error vector 26h
    pub fn get_AGW_FV26(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets error vector 25h

    pub fn set_AGW_FV25(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets error vector 25h
    pub fn get_AGW_FV25(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets error vector 24h

    pub fn set_AGW_FV24(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets error vector 24h
    pub fn get_AGW_FV24(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets error vector 23h

    pub fn set_AGW_FV23(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffff7ffffff) | ((value as u64) & 0x1) << 27; }

    /// Gets error vector 23h
    pub fn get_AGW_FV23(&self) -> bool { (self.0 >> 27 & 0x1) != 0 }
        
    /// Sets error vector 22h

    pub fn set_AGW_FV22(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffbffffff) | ((value as u64) & 0x1) << 26; }

    /// Gets error vector 22h
    pub fn get_AGW_FV22(&self) -> bool { (self.0 >> 26 & 0x1) != 0 }
        
    /// Sets error vector 21h

    pub fn set_AGW_FV21(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffdffffff) | ((value as u64) & 0x1) << 25; }

    /// Gets error vector 21h
    pub fn get_AGW_FV21(&self) -> bool { (self.0 >> 25 & 0x1) != 0 }
        
    /// Sets error vector 20h

    pub fn set_AGW_FV20(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffeffffff) | ((value as u64) & 0x1) << 24; }

    /// Gets error vector 20h
    pub fn get_AGW_FV20(&self) -> bool { (self.0 >> 24 & 0x1) != 0 }
        
    /// Sets error vector 2Fh

    pub fn set_AGW_FV2F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets error vector 2Fh
    pub fn get_AGW_FV2F(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets error vector 2Eh

    pub fn set_AGW_FV2E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffbfffff) | ((value as u64) & 0x1) << 22; }

    /// Gets error vector 2Eh
    pub fn get_AGW_FV2E(&self) -> bool { (self.0 >> 22 & 0x1) != 0 }
        
    /// Sets error vector 2Dh

    pub fn set_AGW_FV2D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffdfffff) | ((value as u64) & 0x1) << 21; }

    /// Gets error vector 2Dh
    pub fn get_AGW_FV2D(&self) -> bool { (self.0 >> 21 & 0x1) != 0 }
        
    /// Sets error vector 2Ch

    pub fn set_AGW_FV2C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffefffff) | ((value as u64) & 0x1) << 20; }

    /// Gets error vector 2Ch
    pub fn get_AGW_FV2C(&self) -> bool { (self.0 >> 20 & 0x1) != 0 }
        
    /// Sets error vector 2Bh

    pub fn set_AGW_FV2B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffff7ffff) | ((value as u64) & 0x1) << 19; }

    /// Gets error vector 2Bh
    pub fn get_AGW_FV2B(&self) -> bool { (self.0 >> 19 & 0x1) != 0 }
        
    /// Sets Error vector 2Ah

    pub fn set_AGW_FV2A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffbffff) | ((value as u64) & 0x1) << 18; }

    /// Gets Error vector 2Ah
    pub fn get_AGW_FV2A(&self) -> bool { (self.0 >> 18 & 0x1) != 0 }
        
    /// Sets error vector 29h

    pub fn set_AGW_FV29(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffdffff) | ((value as u64) & 0x1) << 17; }

    /// Gets error vector 29h
    pub fn get_AGW_FV29(&self) -> bool { (self.0 >> 17 & 0x1) != 0 }
        
    /// Sets error vector 28h

    pub fn set_AGW_FV28(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffeffff) | ((value as u64) & 0x1) << 16; }

    /// Gets error vector 28h
    pub fn get_AGW_FV28(&self) -> bool { (self.0 >> 16 & 0x1) != 0 }
        
    /// Sets error vector 37h

    pub fn set_AGW_FV37(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffff7fff) | ((value as u64) & 0x1) << 15; }

    /// Gets error vector 37h
    pub fn get_AGW_FV37(&self) -> bool { (self.0 >> 15 & 0x1) != 0 }
        
    /// Sets error vector 36h

    pub fn set_AGW_FV36(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffbfff) | ((value as u64) & 0x1) << 14; }

    /// Gets error vector 36h
    pub fn get_AGW_FV36(&self) -> bool { (self.0 >> 14 & 0x1) != 0 }
        
    /// Sets error vector 35h

    pub fn set_AGW_FV35(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffdfff) | ((value as u64) & 0x1) << 13; }

    /// Gets error vector 35h
    pub fn get_AGW_FV35(&self) -> bool { (self.0 >> 13 & 0x1) != 0 }
        
    /// Sets error vector 34h

    pub fn set_AGW_FV34(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffefff) | ((value as u64) & 0x1) << 12; }

    /// Gets error vector 34h
    pub fn get_AGW_FV34(&self) -> bool { (self.0 >> 12 & 0x1) != 0 }
        
    /// Sets error vector 33h

    pub fn set_AGW_FV33(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffff7ff) | ((value as u64) & 0x1) << 11; }

    /// Gets error vector 33h
    pub fn get_AGW_FV33(&self) -> bool { (self.0 >> 11 & 0x1) != 0 }
        
    /// Sets error vector 32h

    pub fn set_AGW_FV32(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffbff) | ((value as u64) & 0x1) << 10; }

    /// Gets error vector 32h
    pub fn get_AGW_FV32(&self) -> bool { (self.0 >> 10 & 0x1) != 0 }
        
    /// Sets error vector 31h

    pub fn set_AGW_FV31(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffdff) | ((value as u64) & 0x1) << 9; }

    /// Gets error vector 31h
    pub fn get_AGW_FV31(&self) -> bool { (self.0 >> 9 & 0x1) != 0 }
        
    /// Sets error vector 30h

    pub fn set_AGW_FV30(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffeff) | ((value as u64) & 0x1) << 8; }

    /// Gets error vector 30h
    pub fn get_AGW_FV30(&self) -> bool { (self.0 >> 8 & 0x1) != 0 }
        
    /// Sets state variable 01h

    pub fn set_AGW_PGV01(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffff7f) | ((value as u64) & 0x1) << 7; }

    /// Gets state variable 01h
    pub fn get_AGW_PGV01(&self) -> bool { (self.0 >> 7 & 0x1) != 0 }
        
    /// Sets error vector 3Eh

    pub fn set_AGW_FV3E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffbf) | ((value as u64) & 0x1) << 6; }

    /// Gets error vector 3Eh
    pub fn get_AGW_FV3E(&self) -> bool { (self.0 >> 6 & 0x1) != 0 }
        
    /// Sets error vector 3Dh

    pub fn set_AGW_FV3D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffdf) | ((value as u64) & 0x1) << 5; }

    /// Gets error vector 3Dh
    pub fn get_AGW_FV3D(&self) -> bool { (self.0 >> 5 & 0x1) != 0 }
        
    /// Sets error vector 3Ch

    pub fn set_AGW_FV3C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffef) | ((value as u64) & 0x1) << 4; }

    /// Gets error vector 3Ch
    pub fn get_AGW_FV3C(&self) -> bool { (self.0 >> 4 & 0x1) != 0 }
        
    /// Sets error vector 3Bh

    pub fn set_AGW_FV3B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffff7) | ((value as u64) & 0x1) << 3; }

    /// Gets error vector 3Bh
    pub fn get_AGW_FV3B(&self) -> bool { (self.0 >> 3 & 0x1) != 0 }
        
    /// Sets Error vector 3Ah

    pub fn set_AGW_FV3A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffb) | ((value as u64) & 0x1) << 2; }

    /// Gets Error vector 3Ah
    pub fn get_AGW_FV3A(&self) -> bool { (self.0 >> 2 & 0x1) != 0 }
        
    /// Sets error vector 39h

    pub fn set_AGW_FV39(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffd) | ((value as u64) & 0x1) << 1; }

    /// Gets error vector 39h
    pub fn get_AGW_FV39(&self) -> bool { (self.0 >> 1 & 0x1) != 0 }
        
    /// Sets error vector 38h

    pub fn set_AGW_FV38(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffe) | ((value as u64) & 0x1) << 0; }

    /// Gets error vector 38h
    pub fn get_AGW_FV38(&self) -> bool { (self.0 >> 0 & 0x1) != 0 }
        
}