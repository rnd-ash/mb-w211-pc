
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'RDK'
*/
    
pub const RDK_A1_CAN_ID: u16 = 0x0198;
pub const SD_RS_RDK_CAN_ID: u16 = 0x07D8;


#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct RDK_A1(pub u64);

impl RDK_A1 {

	/// Gets CAN ID of RDK_A1
	pub const fn get_canid() -> u16 { RDK_A1_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Services

    pub fn set_SERVICE(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Services
    pub fn get_SERVICE(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Tire pressure monitor not initialized

    pub fn set_RDK_INI(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Tire pressure monitor not initialized
    pub fn get_RDK_INI(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Rapid loss of pressure

    pub fn set_P_VERL_S(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Rapid loss of pressure
    pub fn get_P_VERL_S(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets minimum pressure

    pub fn set_P_MIN(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets minimum pressure
    pub fn get_P_MIN(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Slow pressure drop

    pub fn set_P_VERL_L(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Slow pressure drop
    pub fn get_P_VERL_L(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets load status/speed

    pub fn set_VBZ(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets load status/speed
    pub fn get_VBZ(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets jammer/overheating

    pub fn set_S_UE(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets jammer/overheating
    pub fn get_S_UE(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets Warning Color (Red [1] / Yellow [0])

    pub fn set_WARNFARBE(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets Warning Color (Red [1] / Yellow [0])
    pub fn get_WARNFARBE(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets RDK deactivated

    pub fn set_RDK_OFF(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets RDK deactivated
    pub fn get_RDK_OFF(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets spare wheel

    pub fn set_RR(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets spare wheel
    pub fn get_RR(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets Rear right tire

    pub fn set_RHR(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets Rear right tire
    pub fn get_RHR(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets Left rear tire

    pub fn set_RHL(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets Left rear tire
    pub fn get_RHL(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets front right tire

    pub fn set_RVR(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets front right tire
    pub fn get_RVR(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets front left tire

    pub fn set_RVL(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets front left tire
    pub fn get_RVL(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets Show tire positions

    pub fn set_MITPOS(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets Show tire positions
    pub fn get_MITPOS(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets Front left tire pressure. Conversion formula (To raw from real): y=(x-0.0)/0.03 (Unit: bar)

    pub fn set_P_RVL(&mut self, value: u8){ self.0 = (self.0 & 0xffff00ffffffffff) | ((value as u64) & 0xff) << 40; }

    /// Gets Front left tire pressure. Conversion formula (To real from raw): y=(0.03x)+0.0 (Unit: bar)
    pub fn get_P_RVL(&self) -> u8 { (self.0 >> 40 & 0xff) as u8 }
        
    /// Sets Front right tire pressure. Conversion formula (To raw from real): y=(x-0.0)/0.03 (Unit: bar)

    pub fn set_P_RVR(&mut self, value: u8){ self.0 = (self.0 & 0xffffff00ffffffff) | ((value as u64) & 0xff) << 32; }

    /// Gets Front right tire pressure. Conversion formula (To real from raw): y=(0.03x)+0.0 (Unit: bar)
    pub fn get_P_RVR(&self) -> u8 { (self.0 >> 32 & 0xff) as u8 }
        
    /// Sets Rear left tire pressure. Conversion formula (To raw from real): y=(x-0.0)/0.03 (Unit: bar)

    pub fn set_P_RHL(&mut self, value: u8){ self.0 = (self.0 & 0xffffffff00ffffff) | ((value as u64) & 0xff) << 24; }

    /// Gets Rear left tire pressure. Conversion formula (To real from raw): y=(0.03x)+0.0 (Unit: bar)
    pub fn get_P_RHL(&self) -> u8 { (self.0 >> 24 & 0xff) as u8 }
        
    /// Sets Rear right tire pressure. Conversion formula (To raw from real): y=(x-0.0)/0.03 (Unit: bar)

    pub fn set_P_RHR(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffff00ffff) | ((value as u64) & 0xff) << 16; }

    /// Gets Rear right tire pressure. Conversion formula (To real from raw): y=(0.03x)+0.0 (Unit: bar)
    pub fn get_P_RHR(&self) -> u8 { (self.0 >> 16 & 0xff) as u8 }
        
    /// Sets tire pressure spare wheel. Conversion formula (To raw from real): y=(x-0.0)/0.03 (Unit: bar)

    pub fn set_P_RR(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffffff00ff) | ((value as u64) & 0xff) << 8; }

    /// Gets tire pressure spare wheel. Conversion formula (To real from raw): y=(0.03x)+0.0 (Unit: bar)
    pub fn get_P_RR(&self) -> u8 { (self.0 >> 8 & 0xff) as u8 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct SD_RS_RDK(pub u64);

impl SD_RS_RDK {

	/// Gets CAN ID of SD_RS_RDK
	pub const fn get_canid() -> u16 { SD_RS_RDK_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Identification for > 8 bytes

    pub fn set_RDK_KENN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Identification for > 8 bytes
    pub fn get_RDK_KENN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets error vector 07h

    pub fn set_RDK_FV07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets error vector 07h
    pub fn get_RDK_FV07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets error vector 06h

    pub fn set_RDK_FV06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets error vector 06h
    pub fn get_RDK_FV06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets error vector 05h

    pub fn set_RDK_FV05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets error vector 05h
    pub fn get_RDK_FV05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets error vector 04h

    pub fn set_RDK_FV04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets error vector 04h
    pub fn get_RDK_FV04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets error vector 03h

    pub fn set_RDK_FV03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets error vector 03h
    pub fn get_RDK_FV03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets error vector 02h

    pub fn set_RDK_FV02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets error vector 02h
    pub fn get_RDK_FV02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets error vector 01h

    pub fn set_RDK_FV01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets error vector 01h
    pub fn get_RDK_FV01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets error vector 0Fh

    pub fn set_RDK_FV0F(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets error vector 0Fh
    pub fn get_RDK_FV0F(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets error vector 0Eh

    pub fn set_RDK_FV0E(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets error vector 0Eh
    pub fn get_RDK_FV0E(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets error vector 0Dh

    pub fn set_RDK_FV0D(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets error vector 0Dh
    pub fn get_RDK_FV0D(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets error vector 0Ch

    pub fn set_RDK_FV0C(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets error vector 0Ch
    pub fn get_RDK_FV0C(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets error vector 0Bh

    pub fn set_RDK_FV0B(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets error vector 0Bh
    pub fn get_RDK_FV0B(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets error vector 0Ah

    pub fn set_RDK_FV0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets error vector 0Ah
    pub fn get_RDK_FV0A(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets error vector 09h

    pub fn set_RDK_FV09(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets error vector 09h
    pub fn get_RDK_FV09(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets error vector 08h

    pub fn set_RDK_FV08(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets error vector 08h
    pub fn get_RDK_FV08(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets error vector 17h

    pub fn set_RDK_FV17(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets error vector 17h
    pub fn get_RDK_FV17(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets error vector 16h

    pub fn set_RDK_FV16(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets error vector 16h
    pub fn get_RDK_FV16(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets error vector 15h

    pub fn set_RDK_FV15(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets error vector 15h
    pub fn get_RDK_FV15(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets error vector 14h

    pub fn set_RDK_FV14(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets error vector 14h
    pub fn get_RDK_FV14(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets error vector 13h

    pub fn set_RDK_FV13(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets error vector 13h
    pub fn get_RDK_FV13(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets error vector 12h

    pub fn set_RDK_FV12(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets error vector 12h
    pub fn get_RDK_FV12(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets error vector 11h

    pub fn set_RDK_FV11(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets error vector 11h
    pub fn get_RDK_FV11(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets error vector 10h

    pub fn set_RDK_FV10(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets error vector 10h
    pub fn get_RDK_FV10(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets error vector 1Fh

    pub fn set_RDK_FV1F(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets error vector 1Fh
    pub fn get_RDK_FV1F(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets error vector 1Eh

    pub fn set_RDK_FV1E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets error vector 1Eh
    pub fn get_RDK_FV1E(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets error vector 1Dh

    pub fn set_RDK_FV1D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets error vector 1Dh
    pub fn get_RDK_FV1D(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets Error vector 1Ch

    pub fn set_RDK_FV1C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets Error vector 1Ch
    pub fn get_RDK_FV1C(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets error vector 1Bh

    pub fn set_RDK_FV1B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets error vector 1Bh
    pub fn get_RDK_FV1B(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets Error vector 1Ah

    pub fn set_RDK_FV1A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets Error vector 1Ah
    pub fn get_RDK_FV1A(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets error vector 19h

    pub fn set_RDK_FV19(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets error vector 19h
    pub fn get_RDK_FV19(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets error vector 18h

    pub fn set_RDK_FV18(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets error vector 18h
    pub fn get_RDK_FV18(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
    /// Sets error vector 27h

    pub fn set_RDK_FV27(&mut self, value: bool){ self.0 = (self.0 & 0xffffffff7fffffff) | ((value as u64) & 0x1) << 31; }

    /// Gets error vector 27h
    pub fn get_RDK_FV27(&self) -> bool { (self.0 >> 31 & 0x1) != 0 }
        
    /// Sets error vector 26h

    pub fn set_RDK_FV26(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets error vector 26h
    pub fn get_RDK_FV26(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets error vector 25h

    pub fn set_RDK_FV25(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets error vector 25h
    pub fn get_RDK_FV25(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets error vector 24h

    pub fn set_RDK_FV24(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets error vector 24h
    pub fn get_RDK_FV24(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets error vector 23h

    pub fn set_RDK_FV23(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffff7ffffff) | ((value as u64) & 0x1) << 27; }

    /// Gets error vector 23h
    pub fn get_RDK_FV23(&self) -> bool { (self.0 >> 27 & 0x1) != 0 }
        
    /// Sets error vector 22h

    pub fn set_RDK_FV22(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffbffffff) | ((value as u64) & 0x1) << 26; }

    /// Gets error vector 22h
    pub fn get_RDK_FV22(&self) -> bool { (self.0 >> 26 & 0x1) != 0 }
        
    /// Sets error vector 21h

    pub fn set_RDK_FV21(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffdffffff) | ((value as u64) & 0x1) << 25; }

    /// Gets error vector 21h
    pub fn get_RDK_FV21(&self) -> bool { (self.0 >> 25 & 0x1) != 0 }
        
    /// Sets error vector 20h

    pub fn set_RDK_FV20(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffeffffff) | ((value as u64) & 0x1) << 24; }

    /// Gets error vector 20h
    pub fn get_RDK_FV20(&self) -> bool { (self.0 >> 24 & 0x1) != 0 }
        
    /// Sets error vector 2Fh

    pub fn set_RDK_FV2F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets error vector 2Fh
    pub fn get_RDK_FV2F(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets error vector 2Eh

    pub fn set_RDK_FV2E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffbfffff) | ((value as u64) & 0x1) << 22; }

    /// Gets error vector 2Eh
    pub fn get_RDK_FV2E(&self) -> bool { (self.0 >> 22 & 0x1) != 0 }
        
    /// Sets error vector 2Dh

    pub fn set_RDK_FV2D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffdfffff) | ((value as u64) & 0x1) << 21; }

    /// Gets error vector 2Dh
    pub fn get_RDK_FV2D(&self) -> bool { (self.0 >> 21 & 0x1) != 0 }
        
    /// Sets error vector 2Ch

    pub fn set_RDK_FV2C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffefffff) | ((value as u64) & 0x1) << 20; }

    /// Gets error vector 2Ch
    pub fn get_RDK_FV2C(&self) -> bool { (self.0 >> 20 & 0x1) != 0 }
        
    /// Sets error vector 2Bh

    pub fn set_RDK_FV2B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffff7ffff) | ((value as u64) & 0x1) << 19; }

    /// Gets error vector 2Bh
    pub fn get_RDK_FV2B(&self) -> bool { (self.0 >> 19 & 0x1) != 0 }
        
    /// Sets Error vector 2Ah

    pub fn set_RDK_FV2A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffbffff) | ((value as u64) & 0x1) << 18; }

    /// Gets Error vector 2Ah
    pub fn get_RDK_FV2A(&self) -> bool { (self.0 >> 18 & 0x1) != 0 }
        
    /// Sets error vector 29h

    pub fn set_RDK_FV29(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffdffff) | ((value as u64) & 0x1) << 17; }

    /// Gets error vector 29h
    pub fn get_RDK_FV29(&self) -> bool { (self.0 >> 17 & 0x1) != 0 }
        
    /// Sets error vector 28h

    pub fn set_RDK_FV28(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffeffff) | ((value as u64) & 0x1) << 16; }

    /// Gets error vector 28h
    pub fn get_RDK_FV28(&self) -> bool { (self.0 >> 16 & 0x1) != 0 }
        
    /// Sets error vector 37h

    pub fn set_RDK_FV37(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffff7fff) | ((value as u64) & 0x1) << 15; }

    /// Gets error vector 37h
    pub fn get_RDK_FV37(&self) -> bool { (self.0 >> 15 & 0x1) != 0 }
        
    /// Sets error vector 36h

    pub fn set_RDK_FV36(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffbfff) | ((value as u64) & 0x1) << 14; }

    /// Gets error vector 36h
    pub fn get_RDK_FV36(&self) -> bool { (self.0 >> 14 & 0x1) != 0 }
        
    /// Sets error vector 35h

    pub fn set_RDK_FV35(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffdfff) | ((value as u64) & 0x1) << 13; }

    /// Gets error vector 35h
    pub fn get_RDK_FV35(&self) -> bool { (self.0 >> 13 & 0x1) != 0 }
        
    /// Sets error vector 34h

    pub fn set_RDK_FV34(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffefff) | ((value as u64) & 0x1) << 12; }

    /// Gets error vector 34h
    pub fn get_RDK_FV34(&self) -> bool { (self.0 >> 12 & 0x1) != 0 }
        
    /// Sets error vector 33h

    pub fn set_RDK_FV33(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffff7ff) | ((value as u64) & 0x1) << 11; }

    /// Gets error vector 33h
    pub fn get_RDK_FV33(&self) -> bool { (self.0 >> 11 & 0x1) != 0 }
        
    /// Sets error vector 32h

    pub fn set_RDK_FV32(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffbff) | ((value as u64) & 0x1) << 10; }

    /// Gets error vector 32h
    pub fn get_RDK_FV32(&self) -> bool { (self.0 >> 10 & 0x1) != 0 }
        
    /// Sets error vector 31h

    pub fn set_RDK_FV31(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffdff) | ((value as u64) & 0x1) << 9; }

    /// Gets error vector 31h
    pub fn get_RDK_FV31(&self) -> bool { (self.0 >> 9 & 0x1) != 0 }
        
    /// Sets error vector 30h

    pub fn set_RDK_FV30(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffeff) | ((value as u64) & 0x1) << 8; }

    /// Gets error vector 30h
    pub fn get_RDK_FV30(&self) -> bool { (self.0 >> 8 & 0x1) != 0 }
        
    /// Sets state variable 01h

    pub fn set_RDK_PGV01(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffff7f) | ((value as u64) & 0x1) << 7; }

    /// Gets state variable 01h
    pub fn get_RDK_PGV01(&self) -> bool { (self.0 >> 7 & 0x1) != 0 }
        
    /// Sets error vector 3Eh

    pub fn set_RDK_FV3E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffbf) | ((value as u64) & 0x1) << 6; }

    /// Gets error vector 3Eh
    pub fn get_RDK_FV3E(&self) -> bool { (self.0 >> 6 & 0x1) != 0 }
        
    /// Sets error vector 3Dh

    pub fn set_RDK_FV3D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffdf) | ((value as u64) & 0x1) << 5; }

    /// Gets error vector 3Dh
    pub fn get_RDK_FV3D(&self) -> bool { (self.0 >> 5 & 0x1) != 0 }
        
    /// Sets error vector 3Ch

    pub fn set_RDK_FV3C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffef) | ((value as u64) & 0x1) << 4; }

    /// Gets error vector 3Ch
    pub fn get_RDK_FV3C(&self) -> bool { (self.0 >> 4 & 0x1) != 0 }
        
    /// Sets error vector 3Bh

    pub fn set_RDK_FV3B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffff7) | ((value as u64) & 0x1) << 3; }

    /// Gets error vector 3Bh
    pub fn get_RDK_FV3B(&self) -> bool { (self.0 >> 3 & 0x1) != 0 }
        
    /// Sets Error vector 3Ah

    pub fn set_RDK_FV3A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffb) | ((value as u64) & 0x1) << 2; }

    /// Gets Error vector 3Ah
    pub fn get_RDK_FV3A(&self) -> bool { (self.0 >> 2 & 0x1) != 0 }
        
    /// Sets error vector 39h

    pub fn set_RDK_FV39(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffd) | ((value as u64) & 0x1) << 1; }

    /// Gets error vector 39h
    pub fn get_RDK_FV39(&self) -> bool { (self.0 >> 1 & 0x1) != 0 }
        
    /// Sets error vector 38h

    pub fn set_RDK_FV38(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffe) | ((value as u64) & 0x1) << 0; }

    /// Gets error vector 38h
    pub fn get_RDK_FV38(&self) -> bool { (self.0 >> 0 & 0x1) != 0 }
        
}