
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'MRM'
*/
    
pub const MRM_A1_CAN_ID: u16 = 0x0006;
pub const MRM_A2_CAN_ID: u16 = 0x01A8;
pub const MRM_A3_CAN_ID: u16 = 0x0296;
pub const SD_RS_MRM_CAN_ID: u16 = 0x07D5;


pub struct MRM_A1(u64);

impl MRM_A1 {

	/// Gets CAN ID of MRM_A1
	pub fn get_canid() -> u16 { MRM_A1_CAN_ID }
    /// Sets Turn on the horn

    pub fn set_SGH_EIN_LR(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Turn on the horn
    pub fn get_SGH_EIN_LR(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Switch on headlight flasher

    pub fn set_LHP_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Switch on headlight flasher
    pub fn get_LHP_EIN(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Turn on high beam (requirement)

    pub fn set_FL_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Turn on high beam (requirement)
    pub fn get_FL_EIN(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Turn signal right (requirement)

    pub fn set_BLI_RE(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Turn signal right (requirement)
    pub fn get_BLI_RE(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Turn signal left (requirement)

    pub fn set_BLI_LI(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Turn signal left (requirement)
    pub fn get_BLI_LI(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets LSS in position III (level 2, requirement)

    pub fn set_SCH_WI_2(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets LSS in position III (level 2, requirement)
    pub fn get_SCH_WI_2(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets LSS in position II (level 1, requirement)

    pub fn set_SCH_WI_1(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets LSS in position II (level 1, requirement)
    pub fn get_SCH_WI_1(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets LSS in position I (rain sensor operation)

    pub fn set_SCH_WI_INT(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets LSS in position I (rain sensor operation)
    pub fn get_SCH_WI_INT(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets Wash pressed

    pub fn set_WASCHEN(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets Wash pressed
    pub fn get_WASCHEN(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets touch wipe activated (not W211)

    pub fn set_TIPP_WISCH(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets touch wipe activated (not W211)
    pub fn get_TIPP_WISCH(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets Switch on voice control

    pub fn set_SBS_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets Switch on voice control
    pub fn get_SBS_EIN(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets Switch off voice control

    pub fn set_SBS_AUS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets Switch off voice control
    pub fn get_SBS_AUS(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets Steering angle parity bit (even parity)

    pub fn set_LW_PA_B(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets Steering angle parity bit (even parity)
    pub fn get_LW_PA_B(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets Steering Angle Sensor: Overflow

    pub fn set_LW_OV_B(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets Steering Angle Sensor: Overflow
    pub fn get_LW_OV_B(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets Steering angle sensor: code error

    pub fn set_LW_CF_B(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets Steering angle sensor: code error
    pub fn get_LW_CF_B(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets Steering angle sensor: not initialized

    pub fn set_LW_INI_B(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets Steering angle sensor: not initialized
    pub fn get_LW_INI_B(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets Steering angle sign (right [0], left [1])

    pub fn set_LW_VZ_B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets Steering angle sign (right [0], left [1])
    pub fn get_LW_VZ_B(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets steering angle. Conversion formula (To raw from real): y=(x-0.0)/0.50 (Unit: °)

    pub fn set_LW_B(&mut self, value: u16){ self.0 = (self.0 & 0xfffffff800ffffff) | ((value as u64) & 0x7ff) << 24; }

    /// Gets steering angle. Conversion formula (To real from raw): y=(0.50x)+0.0 (Unit: °)
    pub fn get_LW_B(&self) -> u16 { (self.0 >> 24 & 0x7ff) as u16 }
        
}
pub struct MRM_A2(u64);

impl MRM_A2 {

	/// Gets CAN ID of MRM_A2
	pub fn get_canid() -> u16 { MRM_A2_CAN_ID }
    /// Sets Bottom right button down

    pub fn set_WIPPE_4_2(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Bottom right button down
    pub fn get_WIPPE_4_2(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Bottom right button up

    pub fn set_WIPPE_4_1(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Bottom right button up
    pub fn get_WIPPE_4_1(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Key right top down

    pub fn set_WIPPE_3_2(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Key right top down
    pub fn get_WIPPE_3_2(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Top right button up

    pub fn set_WIPPE_3_1(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Top right button up
    pub fn get_WIPPE_3_1(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Bottom left button down

    pub fn set_WIPPE_2_2(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Bottom left button down
    pub fn get_WIPPE_2_2(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets Bottom left button up

    pub fn set_WIPPE_2_1(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets Bottom left button up
    pub fn get_WIPPE_2_1(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Top left key down

    pub fn set_WIPPE_1_2(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Top left key down
    pub fn get_WIPPE_1_2(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets Top left button up

    pub fn set_WIPPE_1_1(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets Top left button up
    pub fn get_WIPPE_1_1(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_WIPPE_8_2(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets reserves
    pub fn get_WIPPE_8_2(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_WIPPE_8_1(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets reserves
    pub fn get_WIPPE_8_1(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_WIPPE_7_2(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets reserves
    pub fn get_WIPPE_7_2(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_WIPPE_7_1(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets reserves
    pub fn get_WIPPE_7_1(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_WIPPE_6_2(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets reserves
    pub fn get_WIPPE_6_2(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_WIPPE_6_1(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets reserves
    pub fn get_WIPPE_6_1(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_WIPPE_5_2(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets reserves
    pub fn get_WIPPE_5_2(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_WIPPE_5_1(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets reserves
    pub fn get_WIPPE_5_1(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
}
pub struct MRM_A3(u64);

impl MRM_A3 {

	/// Gets CAN ID of MRM_A3
	pub fn get_canid() -> u16 { MRM_A3_CAN_ID }
    /// Sets Steering column backwards (towards the driver)

    pub fn set_LS_ZUR_MRM(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Steering column backwards (towards the driver)
    pub fn get_LS_ZUR_MRM(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Steering column forward

    pub fn set_LS_VOR_MRM(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Steering column forward
    pub fn get_LS_VOR_MRM(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Steering column down

    pub fn set_LS_AB_MRM(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Steering column down
    pub fn get_LS_AB_MRM(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Steering column up

    pub fn set_LS_AUF_MRM(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Steering column up
    pub fn get_LS_AUF_MRM(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Steering column adjustment lever turned down

    pub fn set_LSVH_UN(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Steering column adjustment lever turned down
    pub fn get_LSVH_UN(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets Steering column adjustment lever turned up

    pub fn set_LSVH_OB(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets Steering column adjustment lever turned up
    pub fn get_LSVH_OB(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Error code $9073

    pub fn set_DTC8_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets Error code $9073
    pub fn get_DTC8_ELK(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets Error code $9072

    pub fn set_DTC7_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets Error code $9072
    pub fn get_DTC7_ELK(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets Error code $9071

    pub fn set_DTC6_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets Error code $9071
    pub fn get_DTC6_ELK(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets Error code $9070

    pub fn set_DTC5_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets Error code $9070
    pub fn get_DTC5_ELK(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets Error code $9063

    pub fn set_DTC4_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets Error code $9063
    pub fn get_DTC4_ELK(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets Error code $9062

    pub fn set_DTC3_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets Error code $9062
    pub fn get_DTC3_ELK(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets Error code $9061

    pub fn set_DTC2_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets Error code $9061
    pub fn get_DTC2_ELK(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets Error code $9060

    pub fn set_DTC1_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets Error code $9060
    pub fn get_DTC1_ELK(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets ELH defective

    pub fn set_ELH_DEF(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets ELH defective
    pub fn get_ELH_DEF(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets Error code $9076

    pub fn set_DTC11_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets Error code $9076
    pub fn get_DTC11_ELK(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets Error code $9075

    pub fn set_DTC10_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets Error code $9075
    pub fn get_DTC10_ELK(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets Error code $9074

    pub fn set_DTC9_ELK(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets Error code $9074
    pub fn get_DTC9_ELK(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
}
pub struct SD_RS_MRM(u64);

impl SD_RS_MRM {

	/// Gets CAN ID of SD_RS_MRM
	pub fn get_canid() -> u16 { SD_RS_MRM_CAN_ID }
    /// Sets Identification for > 8 bytes

    pub fn set_MRM_KENN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Identification for > 8 bytes
    pub fn get_MRM_KENN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets error vector 07h

    pub fn set_MRM_FV07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets error vector 07h
    pub fn get_MRM_FV07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets error vector 06h

    pub fn set_MRM_FV06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets error vector 06h
    pub fn get_MRM_FV06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets error vector 05h

    pub fn set_MRM_FV05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets error vector 05h
    pub fn get_MRM_FV05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets error vector 04h

    pub fn set_MRM_FV04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets error vector 04h
    pub fn get_MRM_FV04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets error vector 03h

    pub fn set_MRM_FV03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets error vector 03h
    pub fn get_MRM_FV03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets error vector 02h

    pub fn set_MRM_FV02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets error vector 02h
    pub fn get_MRM_FV02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets error vector 01h

    pub fn set_MRM_FV01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets error vector 01h
    pub fn get_MRM_FV01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets error vector 0Fh

    pub fn set_MRM_FV0F(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets error vector 0Fh
    pub fn get_MRM_FV0F(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets error vector 0Eh

    pub fn set_MRM_FV0E(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets error vector 0Eh
    pub fn get_MRM_FV0E(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets error vector 0Dh

    pub fn set_MRM_FV0D(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets error vector 0Dh
    pub fn get_MRM_FV0D(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets error vector 0Ch

    pub fn set_MRM_FV0C(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets error vector 0Ch
    pub fn get_MRM_FV0C(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets error vector 0Bh

    pub fn set_MRM_FV0B(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets error vector 0Bh
    pub fn get_MRM_FV0B(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets error vector 0Ah

    pub fn set_MRM_FV0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets error vector 0Ah
    pub fn get_MRM_FV0A(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets error vector 09h

    pub fn set_MRM_FV09(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets error vector 09h
    pub fn get_MRM_FV09(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets error vector 08h

    pub fn set_MRM_FV08(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets error vector 08h
    pub fn get_MRM_FV08(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets error vector 17h

    pub fn set_MRM_FV17(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets error vector 17h
    pub fn get_MRM_FV17(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets error vector 16h

    pub fn set_MRM_FV16(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets error vector 16h
    pub fn get_MRM_FV16(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets error vector 15h

    pub fn set_MRM_FV15(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets error vector 15h
    pub fn get_MRM_FV15(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets error vector 14h

    pub fn set_MRM_FV14(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets error vector 14h
    pub fn get_MRM_FV14(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets error vector 13h

    pub fn set_MRM_FV13(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets error vector 13h
    pub fn get_MRM_FV13(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets error vector 12h

    pub fn set_MRM_FV12(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets error vector 12h
    pub fn get_MRM_FV12(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets error vector 11h

    pub fn set_MRM_FV11(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets error vector 11h
    pub fn get_MRM_FV11(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets error vector 10h

    pub fn set_MRM_FV10(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets error vector 10h
    pub fn get_MRM_FV10(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets error vector 1Fh

    pub fn set_MRM_FV1F(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets error vector 1Fh
    pub fn get_MRM_FV1F(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets error vector 1Eh

    pub fn set_MRM_FV1E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets error vector 1Eh
    pub fn get_MRM_FV1E(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets error vector 1Dh

    pub fn set_MRM_FV1D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets error vector 1Dh
    pub fn get_MRM_FV1D(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets Error vector 1Ch

    pub fn set_MRM_FV1C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets Error vector 1Ch
    pub fn get_MRM_FV1C(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets error vector 1Bh

    pub fn set_MRM_FV1B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets error vector 1Bh
    pub fn get_MRM_FV1B(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets Error vector 1Ah

    pub fn set_MRM_FV1A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets Error vector 1Ah
    pub fn get_MRM_FV1A(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets error vector 19h

    pub fn set_MRM_FV19(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets error vector 19h
    pub fn get_MRM_FV19(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets error vector 18h

    pub fn set_MRM_FV18(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets error vector 18h
    pub fn get_MRM_FV18(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
    /// Sets error vector 27h

    pub fn set_MRM_FV27(&mut self, value: bool){ self.0 = (self.0 & 0xffffffff7fffffff) | ((value as u64) & 0x1) << 31; }

    /// Gets error vector 27h
    pub fn get_MRM_FV27(&self) -> bool { (self.0 >> 31 & 0x1) != 0 }
        
    /// Sets error vector 26h

    pub fn set_MRM_FV26(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets error vector 26h
    pub fn get_MRM_FV26(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets error vector 25h

    pub fn set_MRM_FV25(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets error vector 25h
    pub fn get_MRM_FV25(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets error vector 24h

    pub fn set_MRM_FV24(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets error vector 24h
    pub fn get_MRM_FV24(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets error vector 23h

    pub fn set_MRM_FV23(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffff7ffffff) | ((value as u64) & 0x1) << 27; }

    /// Gets error vector 23h
    pub fn get_MRM_FV23(&self) -> bool { (self.0 >> 27 & 0x1) != 0 }
        
    /// Sets error vector 22h

    pub fn set_MRM_FV22(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffbffffff) | ((value as u64) & 0x1) << 26; }

    /// Gets error vector 22h
    pub fn get_MRM_FV22(&self) -> bool { (self.0 >> 26 & 0x1) != 0 }
        
    /// Sets error vector 21h

    pub fn set_MRM_FV21(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffdffffff) | ((value as u64) & 0x1) << 25; }

    /// Gets error vector 21h
    pub fn get_MRM_FV21(&self) -> bool { (self.0 >> 25 & 0x1) != 0 }
        
    /// Sets error vector 20h

    pub fn set_MRM_FV20(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffeffffff) | ((value as u64) & 0x1) << 24; }

    /// Gets error vector 20h
    pub fn get_MRM_FV20(&self) -> bool { (self.0 >> 24 & 0x1) != 0 }
        
    /// Sets error vector 2Fh

    pub fn set_MRM_FV2F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets error vector 2Fh
    pub fn get_MRM_FV2F(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets error vector 2Eh

    pub fn set_MRM_FV2E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffbfffff) | ((value as u64) & 0x1) << 22; }

    /// Gets error vector 2Eh
    pub fn get_MRM_FV2E(&self) -> bool { (self.0 >> 22 & 0x1) != 0 }
        
    /// Sets error vector 2Dh

    pub fn set_MRM_FV2D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffdfffff) | ((value as u64) & 0x1) << 21; }

    /// Gets error vector 2Dh
    pub fn get_MRM_FV2D(&self) -> bool { (self.0 >> 21 & 0x1) != 0 }
        
    /// Sets error vector 2Ch

    pub fn set_MRM_FV2C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffefffff) | ((value as u64) & 0x1) << 20; }

    /// Gets error vector 2Ch
    pub fn get_MRM_FV2C(&self) -> bool { (self.0 >> 20 & 0x1) != 0 }
        
    /// Sets error vector 2Bh

    pub fn set_MRM_FV2B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffff7ffff) | ((value as u64) & 0x1) << 19; }

    /// Gets error vector 2Bh
    pub fn get_MRM_FV2B(&self) -> bool { (self.0 >> 19 & 0x1) != 0 }
        
    /// Sets Error vector 2Ah

    pub fn set_MRM_FV2A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffbffff) | ((value as u64) & 0x1) << 18; }

    /// Gets Error vector 2Ah
    pub fn get_MRM_FV2A(&self) -> bool { (self.0 >> 18 & 0x1) != 0 }
        
    /// Sets error vector 29h

    pub fn set_MRM_FV29(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffdffff) | ((value as u64) & 0x1) << 17; }

    /// Gets error vector 29h
    pub fn get_MRM_FV29(&self) -> bool { (self.0 >> 17 & 0x1) != 0 }
        
    /// Sets error vector 28h

    pub fn set_MRM_FV28(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffeffff) | ((value as u64) & 0x1) << 16; }

    /// Gets error vector 28h
    pub fn get_MRM_FV28(&self) -> bool { (self.0 >> 16 & 0x1) != 0 }
        
    /// Sets state variable 08h

    pub fn set_MRM_PGV08(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffff7fff) | ((value as u64) & 0x1) << 15; }

    /// Gets state variable 08h
    pub fn get_MRM_PGV08(&self) -> bool { (self.0 >> 15 & 0x1) != 0 }
        
    /// Sets state variable 07h

    pub fn set_MRM_PGV07(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffbfff) | ((value as u64) & 0x1) << 14; }

    /// Gets state variable 07h
    pub fn get_MRM_PGV07(&self) -> bool { (self.0 >> 14 & 0x1) != 0 }
        
    /// Sets state variable 06h

    pub fn set_MRM_PGV06(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffdfff) | ((value as u64) & 0x1) << 13; }

    /// Gets state variable 06h
    pub fn get_MRM_PGV06(&self) -> bool { (self.0 >> 13 & 0x1) != 0 }
        
    /// Sets state variable 05h

    pub fn set_MRM_PGV05(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffefff) | ((value as u64) & 0x1) << 12; }

    /// Gets state variable 05h
    pub fn get_MRM_PGV05(&self) -> bool { (self.0 >> 12 & 0x1) != 0 }
        
    /// Sets state variable 04h

    pub fn set_MRM_PGV04(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffff7ff) | ((value as u64) & 0x1) << 11; }

    /// Gets state variable 04h
    pub fn get_MRM_PGV04(&self) -> bool { (self.0 >> 11 & 0x1) != 0 }
        
    /// Sets state variable 03h

    pub fn set_MRM_PGV03(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffbff) | ((value as u64) & 0x1) << 10; }

    /// Gets state variable 03h
    pub fn get_MRM_PGV03(&self) -> bool { (self.0 >> 10 & 0x1) != 0 }
        
    /// Sets state variable 02h

    pub fn set_MRM_PGV02(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffdff) | ((value as u64) & 0x1) << 9; }

    /// Gets state variable 02h
    pub fn get_MRM_PGV02(&self) -> bool { (self.0 >> 9 & 0x1) != 0 }
        
    /// Sets state variable 01h

    pub fn set_MRM_PGV01(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffeff) | ((value as u64) & 0x1) << 8; }

    /// Gets state variable 01h
    pub fn get_MRM_PGV01(&self) -> bool { (self.0 >> 8 & 0x1) != 0 }
        
}