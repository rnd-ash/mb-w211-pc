
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'KLA'
*/
    
pub const KLA_A1_CAN_ID: u16 = 0x0030;
pub const KLA_A2_CAN_ID: u16 = 0x0250;
pub const KLA_A5_CAN_ID: u16 = 0x00F1;
pub const SD_RS_KLA_CAN_ID: u16 = 0x07D1;

/// Ventilation flap position up
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KLA_A1_LKO_VORN {
	MITTE = 0, // middle position
	AUF = 1, // position up
	ZU = 2, // Opinion on
	SNV = 3, // Signal invalid
}

impl TryFrom<u8> for KLA_A1_LKO_VORN {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::MITTE),
			1 => Ok(Self::AUF),
			2 => Ok(Self::ZU),
			3 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// Center ventilation flap position
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KLA_A1_LKM_VORN {
	MITTE = 0, // middle position
	AUF = 1, // position up
	ZU = 2, // Opinion on
	SNV = 3, // Signal invalid
}

impl TryFrom<u8> for KLA_A1_LKM_VORN {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::MITTE),
			1 => Ok(Self::AUF),
			2 => Ok(Self::ZU),
			3 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// Lower ventilation flap position
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KLA_A1_LKU_VORN {
	MITTE = 0, // middle position
	AUF = 1, // position up
	ZU = 2, // Opinion on
	SNV = 3, // Signal invalid
}

impl TryFrom<u8> for KLA_A1_LKU_VORN {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::MITTE),
			1 => Ok(Self::AUF),
			2 => Ok(Self::ZU),
			3 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KLA_A1(pub u64);

impl KLA_A1 {

	/// Gets CAN ID of KLA_A1
	pub const fn get_canid() -> u16 { KLA_A1_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Switch on the heated rear window

    pub fn set_HHS_EIN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Switch on the heated rear window
    pub fn get_HHS_EIN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets EC mode active

    pub fn set_EC_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets EC mode active
    pub fn get_EC_AKT(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Turn on indoor sensor fan

    pub fn set_IFG_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Turn on indoor sensor fan
    pub fn get_IFG_EIN(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Switch on auxiliary water pump

    pub fn set_ZWP_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Switch on auxiliary water pump
    pub fn get_ZWP_EIN(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Activation of auxiliary heater permitted

    pub fn set_ZH_EIN_OK(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Activation of auxiliary heater permitted
    pub fn get_ZH_EIN_OK(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets No-load speed increase to increase cooling capacity

    pub fn set_LL_DZA(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets No-load speed increase to increase cooling capacity
    pub fn get_LL_DZA(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Heat auxiliary heater

    pub fn set_HEIZEN(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Heat auxiliary heater
    pub fn get_HEIZEN(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets Ventilate the auxiliary heating

    pub fn set_LUEFTEN(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets Ventilate the auxiliary heating
    pub fn get_LUEFTEN(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets Motor fan set speed. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %)

    pub fn set_NLFTS(&mut self, value: u8){ self.0 = (self.0 & 0xff00ffffffffffff) | ((value as u64) & 0xff) << 48; }

    /// Gets Motor fan set speed. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %)
    pub fn get_NLFTS(&self) -> u8 { (self.0 >> 48 & 0xff) as u8 }
        
    /// Sets Torque absorption refrigeration compressor. Conversion formula (To raw from real): y=(x-0.0)/3.00 (Unit: Nm)

    pub fn set_M_KOMP(&mut self, value: u8){ self.0 = (self.0 & 0xffff00ffffffffff) | ((value as u64) & 0xff) << 40; }

    /// Gets Torque absorption refrigeration compressor. Conversion formula (To real from raw): y=(3.00x)+0.0 (Unit: Nm)
    pub fn get_M_KOMP(&self) -> u8 { (self.0 >> 40 & 0xff) as u8 }
        
    /// Sets Refrigeration compressor control signal. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %)

    pub fn set_KOMP_STELL(&mut self, value: u8){ self.0 = (self.0 & 0xffffff00ffffffff) | ((value as u64) & 0xff) << 32; }

    /// Gets Refrigeration compressor control signal. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %)
    pub fn get_KOMP_STELL(&self) -> u8 { (self.0 >> 32 & 0xff) as u8 }
        
    /// Sets Defrost mode active

    pub fn set_DEFROST_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets Defrost mode active
    pub fn get_DEFROST_AKT(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets Residual heat mode active

    pub fn set_REST_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets Residual heat mode active
    pub fn get_REST_AKT(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets Close the radiator shutter

    pub fn set_KJAL_ZU(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets Close the radiator shutter
    pub fn get_KJAL_ZU(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets Close the heat exchanger shut-off valve

    pub fn set_ABVENT_W_ZU(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffff7ffffff) | ((value as u64) & 0x1) << 27; }

    /// Gets Close the heat exchanger shut-off valve
    pub fn get_ABVENT_W_ZU(&self) -> bool { (self.0 >> 27 & 0x1) != 0 }
        
    /// Sets Demand for additional heat output. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Stufen)

    pub fn set_ZH_ANF(&mut self, value: u8){ self.0 = (self.0 & 0xfffffffff8ffffff) | ((value as u64) & 0x7) << 24; }

    /// Gets Demand for additional heat output. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Stufen)
    pub fn get_ZH_ANF(&self) -> u8 { (self.0 >> 24 & 0x7) as u8 }
        
    /// Sets fan power. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %)

    pub fn set_GEB_LSTG(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffff00ffff) | ((value as u64) & 0xff) << 16; }

    /// Gets fan power. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %)
    pub fn get_GEB_LSTG(&self) -> u8 { (self.0 >> 16 & 0xff) as u8 }
        
    /// Sets Recirculation active

    pub fn set_UL_AKT_KLA(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffff7fff) | ((value as u64) & 0x1) << 15; }

    /// Gets Recirculation active
    pub fn get_UL_AKT_KLA(&self) -> bool { (self.0 >> 15 & 0x1) != 0 }
        
    /// Sets Ventilation flap position up

    pub fn set_LKO_VORN(&mut self, value: KLA_A1_LKO_VORN){ self.0 = (self.0 & 0xffffffffffffcfff) | ((value as u64) & 0x3) << 12; }

    /// Gets Ventilation flap position up
    pub fn get_LKO_VORN(&self) -> std::result::Result<KLA_A1_LKO_VORN, ()> { return KLA_A1_LKO_VORN::try_from((self.0 >> 12 & 0x3) as u8) }
        
    /// Sets Center ventilation flap position

    pub fn set_LKM_VORN(&mut self, value: KLA_A1_LKM_VORN){ self.0 = (self.0 & 0xfffffffffffff3ff) | ((value as u64) & 0x3) << 10; }

    /// Gets Center ventilation flap position
    pub fn get_LKM_VORN(&self) -> std::result::Result<KLA_A1_LKM_VORN, ()> { return KLA_A1_LKM_VORN::try_from((self.0 >> 10 & 0x3) as u8) }
        
    /// Sets Lower ventilation flap position

    pub fn set_LKU_VORN(&mut self, value: KLA_A1_LKU_VORN){ self.0 = (self.0 & 0xfffffffffffffcff) | ((value as u64) & 0x3) << 8; }

    /// Gets Lower ventilation flap position
    pub fn get_LKU_VORN(&self) -> std::result::Result<KLA_A1_LKU_VORN, ()> { return KLA_A1_LKU_VORN::try_from((self.0 >> 8 & 0x3) as u8) }
        
    /// Sets internal temperature. Conversion formula (To raw from real): y=(x-0.0)/0.25 (Unit: °C)

    pub fn set_T_INNEN_KLA(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffffffff00) | ((value as u64) & 0xff) << 0; }

    /// Gets internal temperature. Conversion formula (To real from raw): y=(0.25x)+0.0 (Unit: °C)
    pub fn get_T_INNEN_KLA(&self) -> u8 { (self.0 >> 0 & 0xff) as u8 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KLA_A2(pub u64);

impl KLA_A2 {

	/// Gets CAN ID of KLA_A2
	pub const fn get_canid() -> u16 { KLA_A2_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Open/close rear right window

    pub fn set_FHR_KLA(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Open/close rear right window
    pub fn get_FHR_KLA(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Open/close rear left window

    pub fn set_FHL_KLA(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Open/close rear left window
    pub fn get_FHL_KLA(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Open/close front right window

    pub fn set_FVR_KLA(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Open/close front right window
    pub fn get_FVR_KLA(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Open/close front left window

    pub fn set_FVL_KLA(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Open/close front left window
    pub fn get_FVL_KLA(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Open/close SHD/top

    pub fn set_SHD_KLA(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Open/close SHD/top
    pub fn get_SHD_KLA(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets direction comfort operation: open [0], close [1]

    pub fn set_KB_RI_KLA(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets direction comfort operation: open [0], close [1]
    pub fn get_KB_RI_KLA(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Comfort control Automatic operation [1] Manual [0]

    pub fn set_KB_MOD_KLA(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Comfort control Automatic operation [1] Manual [0]
    pub fn get_KB_MOD_KLA(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KLA_A5(pub u64);

impl KLA_A5 {

	/// Gets CAN ID of KLA_A5
	pub const fn get_canid() -> u16 { KLA_A5_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Heating power requirement. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %)

    pub fn set_HZL_ANF(&mut self, value: u8){ self.0 = (self.0 & 0x00ffffffffffffff) | ((value as u64) & 0xff) << 56; }

    /// Gets Heating power requirement. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %)
    pub fn get_HZL_ANF(&self) -> u8 { (self.0 >> 56 & 0xff) as u8 }
        
    /// Sets Outside air temperature for thermal management. Conversion formula (To raw from real): y=(x+40.0)/0.50 (Unit: °C)

    pub fn set_T_AUSSEN_WM(&mut self, value: u8){ self.0 = (self.0 & 0xff00ffffffffffff) | ((value as u64) & 0xff) << 48; }

    /// Gets Outside air temperature for thermal management. Conversion formula (To real from raw): y=(0.50x)-40.0 (Unit: °C)
    pub fn get_T_AUSSEN_WM(&self) -> u8 { (self.0 >> 48 & 0xff) as u8 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct SD_RS_KLA(pub u64);

impl SD_RS_KLA {

	/// Gets CAN ID of SD_RS_KLA
	pub const fn get_canid() -> u16 { SD_RS_KLA_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Identification for > 8 bytes

    pub fn set_KLA_KENN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Identification for > 8 bytes
    pub fn get_KLA_KENN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets state variable 07h

    pub fn set_KLA_PGV07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets state variable 07h
    pub fn get_KLA_PGV07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets state variable 06h

    pub fn set_KLA_PGV06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets state variable 06h
    pub fn get_KLA_PGV06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets state variable 05h

    pub fn set_KLA_PGV05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets state variable 05h
    pub fn get_KLA_PGV05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets state variable 04h

    pub fn set_KLA_PGV04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets state variable 04h
    pub fn get_KLA_PGV04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets state variable 03h

    pub fn set_KLA_PGV03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets state variable 03h
    pub fn get_KLA_PGV03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets state variable 02h

    pub fn set_KLA_PGV02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets state variable 02h
    pub fn get_KLA_PGV02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets state variable 01h

    pub fn set_KLA_PGV01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets state variable 01h
    pub fn get_KLA_PGV01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets Error message 01h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_KLA_FM01(&mut self, value: u16){ self.0 = (self.0 & 0xff0000ffffffffff) | ((value as u64) & 0xffff) << 40; }

    /// Gets Error message 01h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_KLA_FM01(&self) -> u16 { (self.0 >> 40 & 0xffff) as u16 }
        
    /// Sets Error message 02h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_KLA_FM02(&mut self, value: u16){ self.0 = (self.0 & 0xffffff0000ffffff) | ((value as u64) & 0xffff) << 24; }

    /// Gets Error message 02h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_KLA_FM02(&self) -> u16 { (self.0 >> 24 & 0xffff) as u16 }
        
    /// Sets Error message 03h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_KLA_FM03(&mut self, value: u16){ self.0 = (self.0 & 0xffffffffff0000ff) | ((value as u64) & 0xffff) << 8; }

    /// Gets Error message 03h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_KLA_FM03(&self) -> u16 { (self.0 >> 8 & 0xffff) as u16 }
        
    /// Sets state variable 0Fh

    pub fn set_KLA_PGV0F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffff7f) | ((value as u64) & 0x1) << 7; }

    /// Gets state variable 0Fh
    pub fn get_KLA_PGV0F(&self) -> bool { (self.0 >> 7 & 0x1) != 0 }
        
    /// Sets state variable 0Eh

    pub fn set_KLA_PGV0E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffbf) | ((value as u64) & 0x1) << 6; }

    /// Gets state variable 0Eh
    pub fn get_KLA_PGV0E(&self) -> bool { (self.0 >> 6 & 0x1) != 0 }
        
    /// Sets State variable 0Dh

    pub fn set_KLA_PGV0D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffdf) | ((value as u64) & 0x1) << 5; }

    /// Gets State variable 0Dh
    pub fn get_KLA_PGV0D(&self) -> bool { (self.0 >> 5 & 0x1) != 0 }
        
    /// Sets state variable 0Ch

    pub fn set_KLA_PGV0C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffef) | ((value as u64) & 0x1) << 4; }

    /// Gets state variable 0Ch
    pub fn get_KLA_PGV0C(&self) -> bool { (self.0 >> 4 & 0x1) != 0 }
        
    /// Sets state variable 0Bh

    pub fn set_KLA_PGV0B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffff7) | ((value as u64) & 0x1) << 3; }

    /// Gets state variable 0Bh
    pub fn get_KLA_PGV0B(&self) -> bool { (self.0 >> 3 & 0x1) != 0 }
        
    /// Sets State variable 0Ah

    pub fn set_KLA_PGV0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffb) | ((value as u64) & 0x1) << 2; }

    /// Gets State variable 0Ah
    pub fn get_KLA_PGV0A(&self) -> bool { (self.0 >> 2 & 0x1) != 0 }
        
    /// Sets state variable 09h

    pub fn set_KLA_PGV09(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffd) | ((value as u64) & 0x1) << 1; }

    /// Gets state variable 09h
    pub fn get_KLA_PGV09(&self) -> bool { (self.0 >> 1 & 0x1) != 0 }
        
    /// Sets state variable 08h

    pub fn set_KLA_PGV08(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffe) | ((value as u64) & 0x1) << 0; }

    /// Gets state variable 08h
    pub fn get_KLA_PGV08(&self) -> bool { (self.0 >> 0 & 0x1) != 0 }
        
}