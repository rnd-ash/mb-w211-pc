
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'PC'
*/
    
pub const PC_CTRL_PANEL_CAN_ID: u16 = 0x002D;


#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct PC_CTRL_PANEL(pub u64);

impl PC_CTRL_PANEL {

	/// Gets CAN ID of PC_CTRL_PANEL
	pub const fn get_canid() -> u16 { PC_CTRL_PANEL_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Passenger cooler button pressed

    pub fn set_PASS_COOLER_PRESSED(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Passenger cooler button pressed
    pub fn get_PASS_COOLER_PRESSED(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Passenger heater button pressed

    pub fn set_PASS_HEATER_PRESSED(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Passenger heater button pressed
    pub fn get_PASS_HEATER_PRESSED(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Driver cooler button pressed

    pub fn set_DRIVER_COOLER_PRESSED(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Driver cooler button pressed
    pub fn get_DRIVER_COOLER_PRESSED(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Driver heater button pressed

    pub fn set_DRIVER_HEATER_PRESSED(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Driver heater button pressed
    pub fn get_DRIVER_HEATER_PRESSED(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Lock button pressed

    pub fn set_LOCK(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Lock button pressed
    pub fn get_LOCK(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets Unlock button pressed

    pub fn set_UNLOCK(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets Unlock button pressed
    pub fn get_UNLOCK(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Blind button pressed

    pub fn set_BLIND(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Blind button pressed
    pub fn get_BLIND(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets Headreset button pressed

    pub fn set_HEADREST(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets Headreset button pressed
    pub fn get_HEADREST(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets ESP OFF button pressed

    pub fn set_ESPOFF(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets ESP OFF button pressed
    pub fn get_ESPOFF(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
}