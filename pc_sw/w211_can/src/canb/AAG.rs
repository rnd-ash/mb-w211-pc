
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'AAG'
*/
    
pub const AAG_A1_CAN_ID: u16 = 0x0130;
pub const SD_RS_AAG_CAN_ID: u16 = 0x07D0;


pub struct AAG_A1(u64);

impl AAG_A1 {

	/// Gets CAN ID of AAG_A1
	pub fn get_canid() -> u16 { AAG_A1_CAN_ID }
    /// Sets Trailer operation detected

    pub fn set_ANH_ERK(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Trailer operation detected
    pub fn get_ANH_ERK(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Trailer hitch not engaged

    pub fn set_AHK_NOK(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Trailer hitch not engaged
    pub fn get_AHK_NOK(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Trailer terminal 54 error

    pub fn set_ANHKL_54_DEF(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Trailer terminal 54 error
    pub fn get_ANHKL_54_DEF(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets EDW trailer monitoring alarm triggered

    pub fn set_EDW_ANH_ALM(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets EDW trailer monitoring alarm triggered
    pub fn get_EDW_ANH_ALM(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Left trailer tail light defective

    pub fn set_ANHSL_DEF_L(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Left trailer tail light defective
    pub fn get_ANHSL_DEF_L(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Left trailer turn signal defective

    pub fn set_ANHBLI_DEF_L(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets Left trailer turn signal defective
    pub fn get_ANHBLI_DEF_L(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets Defective trailer brake light

    pub fn set_ANHBL_DEF(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets Defective trailer brake light
    pub fn get_ANHBL_DEF(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets Right trailer tail light defective

    pub fn set_ANHSL_DEF_R(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets Right trailer tail light defective
    pub fn get_ANHSL_DEF_R(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets Right trailer turn signal defective

    pub fn set_ANHBLI_DEF_R(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets Right trailer turn signal defective
    pub fn get_ANHBLI_DEF_R(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
}
pub struct SD_RS_AAG(u64);

impl SD_RS_AAG {

	/// Gets CAN ID of SD_RS_AAG
	pub fn get_canid() -> u16 { SD_RS_AAG_CAN_ID }
    /// Sets Identification for > 8 bytes

    pub fn set_AAG_KENN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Identification for > 8 bytes
    pub fn get_AAG_KENN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets error vector 07h

    pub fn set_AAG_FV07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets error vector 07h
    pub fn get_AAG_FV07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets error vector 06h

    pub fn set_AAG_FV06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets error vector 06h
    pub fn get_AAG_FV06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets error vector 05h

    pub fn set_AAG_FV05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets error vector 05h
    pub fn get_AAG_FV05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets error vector 04h

    pub fn set_AAG_FV04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets error vector 04h
    pub fn get_AAG_FV04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets error vector 03h

    pub fn set_AAG_FV03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets error vector 03h
    pub fn get_AAG_FV03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets error vector 02h

    pub fn set_AAG_FV02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets error vector 02h
    pub fn get_AAG_FV02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets error vector 01h

    pub fn set_AAG_FV01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets error vector 01h
    pub fn get_AAG_FV01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets error vector 0Fh

    pub fn set_AAG_FV0F(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets error vector 0Fh
    pub fn get_AAG_FV0F(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets error vector 0Eh

    pub fn set_AAG_FV0E(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets error vector 0Eh
    pub fn get_AAG_FV0E(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets error vector 0Dh

    pub fn set_AAG_FV0D(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets error vector 0Dh
    pub fn get_AAG_FV0D(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets error vector 0Ch

    pub fn set_AAG_FV0C(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets error vector 0Ch
    pub fn get_AAG_FV0C(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets error vector 0Bh

    pub fn set_AAG_FV0B(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets error vector 0Bh
    pub fn get_AAG_FV0B(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets error vector 0Ah

    pub fn set_AAG_FV0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets error vector 0Ah
    pub fn get_AAG_FV0A(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets error vector 09h

    pub fn set_AAG_FV09(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets error vector 09h
    pub fn get_AAG_FV09(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets error vector 08h

    pub fn set_AAG_FV08(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets error vector 08h
    pub fn get_AAG_FV08(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets error vector 17h

    pub fn set_AAG_FV17(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets error vector 17h
    pub fn get_AAG_FV17(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets error vector 16h

    pub fn set_AAG_FV16(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets error vector 16h
    pub fn get_AAG_FV16(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets error vector 15h

    pub fn set_AAG_FV15(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets error vector 15h
    pub fn get_AAG_FV15(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets error vector 14h

    pub fn set_AAG_FV14(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets error vector 14h
    pub fn get_AAG_FV14(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets error vector 13h

    pub fn set_AAG_FV13(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets error vector 13h
    pub fn get_AAG_FV13(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets error vector 12h

    pub fn set_AAG_FV12(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets error vector 12h
    pub fn get_AAG_FV12(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets error vector 11h

    pub fn set_AAG_FV11(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets error vector 11h
    pub fn get_AAG_FV11(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets error vector 10h

    pub fn set_AAG_FV10(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets error vector 10h
    pub fn get_AAG_FV10(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets process variable 08h

    pub fn set_AAG_PG08(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets process variable 08h
    pub fn get_AAG_PG08(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets process variable 07h

    pub fn set_AAG_PG07(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets process variable 07h
    pub fn get_AAG_PG07(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets process variable 06h

    pub fn set_AAG_PG06(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets process variable 06h
    pub fn get_AAG_PG06(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets process variable 05h

    pub fn set_AAG_PG05(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets process variable 05h
    pub fn get_AAG_PG05(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets process variable 04h

    pub fn set_AAG_PG04(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets process variable 04h
    pub fn get_AAG_PG04(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets process variable 03h

    pub fn set_AAG_PG03(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets process variable 03h
    pub fn get_AAG_PG03(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets process variable 02h

    pub fn set_AAG_PG02(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets process variable 02h
    pub fn get_AAG_PG02(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets process variable 01h

    pub fn set_AAG_PG01(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets process variable 01h
    pub fn get_AAG_PG01(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
}