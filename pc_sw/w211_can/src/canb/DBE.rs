
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'DBE'
*/
    
pub const DBE_A1_CAN_ID: u16 = 0x0014;
pub const DBE_A2_CAN_ID: u16 = 0x0270;
pub const DBE_A4_CAN_ID: u16 = 0x0174;
pub const SD_RS_DBE_CAN_ID: u16 = 0x07C7;

/// sunroof status
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum DBE_A1_SHD_ST {
	SHD_ST_ZU = 0, // SHD too
	SHD_ST_AUF = 1, // Sunroof is fully open
	HUB_ST_AUF = 2, // Elevating roof is open
	SHD_ST_ST = 3, // Sliding/lifting roof is running
	SHD_ST_AW = 4, // SHD in anti-Wummer position
	SHD_ST_ZW = 5, // Sunroof in intermediate position
	HUB_ST_ZW = 6, // Elevating roof in intermediate position
	SNV = 7, // SHD denormalized
}

impl TryFrom<u8> for DBE_A1_SHD_ST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::SHD_ST_ZU),
			1 => Ok(Self::SHD_ST_AUF),
			2 => Ok(Self::HUB_ST_AUF),
			3 => Ok(Self::SHD_ST_ST),
			4 => Ok(Self::SHD_ST_AW),
			5 => Ok(Self::SHD_ST_ZW),
			6 => Ok(Self::HUB_ST_ZW),
			7 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}

pub struct DBE_A1(u64);

impl DBE_A1 {

	/// Gets CAN ID of DBE_A1
	pub fn get_canid() -> u16 { DBE_A1_CAN_ID }
    /// Sets Turn on the front left exit light

    pub fn set_AL_VL(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Turn on the front left exit light
    pub fn get_AL_VL(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Turn on the front right exit light

    pub fn set_AL_VR(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Turn on the front right exit light
    pub fn get_AL_VR(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Turn on the rear left exit light

    pub fn set_AL_HL(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Turn on the rear left exit light
    pub fn get_AL_HL(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Switch on the rear right exit lamp

    pub fn set_AL_HR(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Switch on the rear right exit lamp
    pub fn get_AL_HR(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Turn on the front left warning light

    pub fn set_WL_VL(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Turn on the front left warning light
    pub fn get_WL_VL(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets Turn on the front right warning light

    pub fn set_WL_VR(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets Turn on the front right warning light
    pub fn get_WL_VR(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Switch on the rear left warning lamp

    pub fn set_WL_HL(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Switch on the rear left warning lamp
    pub fn get_WL_HL(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets Turn on the rear right warning light

    pub fn set_WL_HR(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets Turn on the rear right warning light
    pub fn get_WL_HR(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets internal temperature. Conversion formula (To raw from real): y=(x-0.0)/0.25 (Unit: °C)

    pub fn set_T_INNEN(&mut self, value: u8){ self.0 = (self.0 & 0xff00ffffffffffff) | ((value as u64) & 0xff) << 48; }

    /// Gets internal temperature. Conversion formula (To real from raw): y=(0.25x)+0.0 (Unit: °C)
    pub fn get_T_INNEN(&self) -> u8 { (self.0 >> 48 & 0xff) as u8 }
        
    /// Sets Turn on low beam (request from light sensor)

    pub fn set_AFL_ABL_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets Turn on low beam (request from light sensor)
    pub fn get_AFL_ABL_EIN(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets Light sensor value: Day [0]; night [1]

    pub fn set_NACHT(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets Light sensor value: Day [0]; night [1]
    pub fn get_NACHT(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets Light sensor defective

    pub fn set_LISR_DEF(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets Light sensor defective
    pub fn get_LISR_DEF(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets Light Sensor: Tunnel

    pub fn set_TUNNEL(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets Light Sensor: Tunnel
    pub fn get_TUNNEL(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets Turn on the charge light

    pub fn set_LADE_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets Turn on the charge light
    pub fn get_LADE_EIN(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets sunroof status

    pub fn set_SHD_ST(&mut self, value: DBE_A1_SHD_ST){ self.0 = (self.0 & 0xfffffff8ffffffff) | ((value as u64) & 0x7) << 32; }

    /// Gets sunroof status
    pub fn get_SHD_ST(&self) -> std::result::Result<DBE_A1_SHD_ST, ()> { return DBE_A1_SHD_ST::try_from((self.0 >> 32 & 0x7) as u8) }
        
    /// Sets Interior protection triggered

    pub fn set_IRS_ALM(&mut self, value: bool){ self.0 = (self.0 & 0xffffffff7fffffff) | ((value as u64) & 0x1) << 31; }

    /// Gets Interior protection triggered
    pub fn get_IRS_ALM(&self) -> bool { (self.0 >> 31 & 0x1) != 0 }
        
    /// Sets interior protection glass break triggered

    pub fn set_IRS_GB(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets interior protection glass break triggered
    pub fn get_IRS_GB(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets Deselect EDW towing protection

    pub fn set_EDW_AS_ABW(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets Deselect EDW towing protection
    pub fn get_EDW_AS_ABW(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets Deselect EDW interior protection

    pub fn set_EDW_IRS_ABW(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets Deselect EDW interior protection
    pub fn get_EDW_IRS_ABW(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets Switch on the right entry lighting

    pub fn set_EINSTIEG_R_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffff7ffffff) | ((value as u64) & 0x1) << 27; }

    /// Gets Switch on the right entry lighting
    pub fn get_EINSTIEG_R_EIN(&self) -> bool { (self.0 >> 27 & 0x1) != 0 }
        
    /// Sets Switch on the left entry lighting

    pub fn set_EINSTIEG_L_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffbffffff) | ((value as u64) & 0x1) << 26; }

    /// Gets Switch on the left entry lighting
    pub fn get_EINSTIEG_L_EIN(&self) -> bool { (self.0 >> 26 & 0x1) != 0 }
        
    /// Sets Indoor sensor fan runs

    pub fn set_IFG_LFT(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffeffffff) | ((value as u64) & 0x1) << 24; }

    /// Gets Indoor sensor fan runs
    pub fn get_IFG_LFT(&self) -> bool { (self.0 >> 24 & 0x1) != 0 }
        
    /// Sets Front left footwell lighting on

    pub fn set_FRBL_VL(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffff7ff) | ((value as u64) & 0x1) << 11; }

    /// Gets Front left footwell lighting on
    pub fn get_FRBL_VL(&self) -> bool { (self.0 >> 11 & 0x1) != 0 }
        
    /// Sets Front right footwell lighting on

    pub fn set_FRBL_VR(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffbff) | ((value as u64) & 0x1) << 10; }

    /// Gets Front right footwell lighting on
    pub fn get_FRBL_VR(&self) -> bool { (self.0 >> 10 & 0x1) != 0 }
        
    /// Sets Rear left footwell lighting on

    pub fn set_FRBL_HL(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffdff) | ((value as u64) & 0x1) << 9; }

    /// Gets Rear left footwell lighting on
    pub fn get_FRBL_HL(&self) -> bool { (self.0 >> 9 & 0x1) != 0 }
        
    /// Sets Rear right footwell lighting on

    pub fn set_FRBL_HR(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffeff) | ((value as u64) & 0x1) << 8; }

    /// Gets Rear right footwell lighting on
    pub fn get_FRBL_HR(&self) -> bool { (self.0 >> 8 & 0x1) != 0 }
        
    /// Sets Footwell lighting brightness. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %)

    pub fn set_FRBL_HELL(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffffffff00) | ((value as u64) & 0xff) << 0; }

    /// Gets Footwell lighting brightness. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %)
    pub fn get_FRBL_HELL(&self) -> u8 { (self.0 >> 0 & 0xff) as u8 }
        
}
pub struct DBE_A2(u64);

impl DBE_A2 {

	/// Gets CAN ID of DBE_A2
	pub fn get_canid() -> u16 { DBE_A2_CAN_ID }
    /// Sets Byte identifier rain sensor

    pub fn set_KENN_RS(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Byte identifier rain sensor
    pub fn get_KENN_RS(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Rain sensor defective

    pub fn set_RS_DEF(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Rain sensor defective
    pub fn get_RS_DEF(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Surge detection

    pub fn set_SCHWALL(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Surge detection
    pub fn get_SCHWALL(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets wiper stages. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Stufen)

    pub fn set_WISCHER_ST(&mut self, value: u8){ self.0 = (self.0 & 0xf0ffffffffffffff) | ((value as u64) & 0xf) << 56; }

    /// Gets wiper stages. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Stufen)
    pub fn get_WISCHER_ST(&self) -> u8 { (self.0 >> 56 & 0xf) as u8 }
        
    /// Sets Readings from RLS not available

    pub fn set_RLS_UNPLAUS(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets Readings from RLS not available
    pub fn get_RLS_UNPLAUS(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets Timeout for SAM_V_A3 message

    pub fn set_SAM_V_A3_TO(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets Timeout for SAM_V_A3 message
    pub fn get_SAM_V_A3_TO(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets Communication error to rain/light sensor

    pub fn set_KOM_RLS_FEHL(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets Communication error to rain/light sensor
    pub fn get_KOM_RLS_FEHL(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets Diagnosis rain/light sensor on

    pub fn set_DIAG_RLS_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets Diagnosis rain/light sensor on
    pub fn get_DIAG_RLS_EIN(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
}
pub struct DBE_A4(u64);

impl DBE_A4 {

	/// Gets CAN ID of DBE_A4
	pub fn get_canid() -> u16 { DBE_A4_CAN_ID }
    /// Sets Sunroof closed when it rains

    pub fn set_SHD_ZU_RS(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Sunroof closed when it rains
    pub fn get_SHD_ZU_RS(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Interior mirror actuated

    pub fn set_ISP_BET(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Interior mirror actuated
    pub fn get_ISP_BET(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
}
pub struct SD_RS_DBE(u64);

impl SD_RS_DBE {

	/// Gets CAN ID of SD_RS_DBE
	pub fn get_canid() -> u16 { SD_RS_DBE_CAN_ID }
    /// Sets Identification for > 8 bytes

    pub fn set_DBE_KENN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Identification for > 8 bytes
    pub fn get_DBE_KENN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets state variable 07h

    pub fn set_DBE_PGV07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets state variable 07h
    pub fn get_DBE_PGV07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets state variable 06h

    pub fn set_DBE_PGV06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets state variable 06h
    pub fn get_DBE_PGV06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets state variable 05h

    pub fn set_DBE_PGV05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets state variable 05h
    pub fn get_DBE_PGV05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets state variable 04h

    pub fn set_DBE_PGV04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets state variable 04h
    pub fn get_DBE_PGV04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets state variable 03h

    pub fn set_DBE_PGV03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets state variable 03h
    pub fn get_DBE_PGV03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets state variable 02h

    pub fn set_DBE_PGV02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets state variable 02h
    pub fn get_DBE_PGV02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets state variable 01h

    pub fn set_DBE_PGV01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets state variable 01h
    pub fn get_DBE_PGV01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets Error message 01h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_DBE_FM01(&mut self, value: u16){ self.0 = (self.0 & 0xff0000ffffffffff) | ((value as u64) & 0xffff) << 40; }

    /// Gets Error message 01h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_DBE_FM01(&self) -> u16 { (self.0 >> 40 & 0xffff) as u16 }
        
    /// Sets Error message 02h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_DBE_FM02(&mut self, value: u16){ self.0 = (self.0 & 0xffffff0000ffffff) | ((value as u64) & 0xffff) << 24; }

    /// Gets Error message 02h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_DBE_FM02(&self) -> u16 { (self.0 >> 24 & 0xffff) as u16 }
        
    /// Sets Error message 03h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_DBE_FM03(&mut self, value: u16){ self.0 = (self.0 & 0xffffffffff0000ff) | ((value as u64) & 0xffff) << 8; }

    /// Gets Error message 03h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_DBE_FM03(&self) -> u16 { (self.0 >> 8 & 0xffff) as u16 }
        
    /// Sets state variable 0Fh

    pub fn set_DBE_PGV0F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffff7f) | ((value as u64) & 0x1) << 7; }

    /// Gets state variable 0Fh
    pub fn get_DBE_PGV0F(&self) -> bool { (self.0 >> 7 & 0x1) != 0 }
        
    /// Sets state variable 0Eh

    pub fn set_DBE_PGV0E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffbf) | ((value as u64) & 0x1) << 6; }

    /// Gets state variable 0Eh
    pub fn get_DBE_PGV0E(&self) -> bool { (self.0 >> 6 & 0x1) != 0 }
        
    /// Sets State variable 0Dh

    pub fn set_DBE_PGV0D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffdf) | ((value as u64) & 0x1) << 5; }

    /// Gets State variable 0Dh
    pub fn get_DBE_PGV0D(&self) -> bool { (self.0 >> 5 & 0x1) != 0 }
        
    /// Sets state variable 0Ch

    pub fn set_DBE_PGV0C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffef) | ((value as u64) & 0x1) << 4; }

    /// Gets state variable 0Ch
    pub fn get_DBE_PGV0C(&self) -> bool { (self.0 >> 4 & 0x1) != 0 }
        
    /// Sets state variable 0Bh

    pub fn set_DBE_PGV0B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffff7) | ((value as u64) & 0x1) << 3; }

    /// Gets state variable 0Bh
    pub fn get_DBE_PGV0B(&self) -> bool { (self.0 >> 3 & 0x1) != 0 }
        
    /// Sets State variable 0Ah

    pub fn set_DBE_PGV0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffb) | ((value as u64) & 0x1) << 2; }

    /// Gets State variable 0Ah
    pub fn get_DBE_PGV0A(&self) -> bool { (self.0 >> 2 & 0x1) != 0 }
        
    /// Sets state variable 09h

    pub fn set_DBE_PGV09(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffd) | ((value as u64) & 0x1) << 1; }

    /// Gets state variable 09h
    pub fn get_DBE_PGV09(&self) -> bool { (self.0 >> 1 & 0x1) != 0 }
        
    /// Sets state variable 08h

    pub fn set_DBE_PGV08(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffe) | ((value as u64) & 0x1) << 0; }

    /// Gets state variable 08h
    pub fn get_DBE_PGV08(&self) -> bool { (self.0 >> 0 & 0x1) != 0 }
        
}