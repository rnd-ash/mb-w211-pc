
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'SAM_V'
*/
    
pub const SAM_V_A1_CAN_ID: u16 = 0x000A;
pub const SAM_V_A2_CAN_ID: u16 = 0x0017;
pub const SAM_V_A3_CAN_ID: u16 = 0x0070;
pub const SD_RS_SAM_V_CAN_ID: u16 = 0x07C2;


#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct SAM_V_A1(pub u64);

impl SAM_V_A1 {

	/// Gets CAN ID of SAM_V_A1
	pub const fn get_canid() -> u16 { SAM_V_A1_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Terminal 61

    pub fn set_KL_61_EIN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Terminal 61
    pub fn get_KL_61_EIN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Headlight activation active

    pub fn set_SWA_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets Headlight activation active
    pub fn get_SWA_AKT(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets Kl15R on

    pub fn set_KL_15R_KG_V(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Kl15R on
    pub fn get_KL_15R_KG_V(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Kl15/87 FW on

    pub fn set_KL_15_KG_V(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Kl15/87 FW on
    pub fn get_KL_15_KG_V(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets Horn is on

    pub fn set_SGH_ST_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets Horn is on
    pub fn get_SGH_ST_EIN(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets High beam is switched on

    pub fn set_FL_ST_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets High beam is switched on
    pub fn get_FL_ST_EIN(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Fog lights are on

    pub fn set_NSW_ST_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Fog lights are on
    pub fn get_NSW_ST_EIN(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets Outside light activated by light sensor

    pub fn set_AFL_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets Outside light activated by light sensor
    pub fn get_AFL_AKT(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets Turn on rear fog light

    pub fn set_NSL_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Turn on rear fog light
    pub fn get_NSL_EIN(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Turn on fog lights

    pub fn set_NSW_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets Turn on fog lights
    pub fn get_NSW_EIN(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets Turn on low beam

    pub fn set_ABL_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets Turn on low beam
    pub fn get_ABL_EIN(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets Turn on parking lights

    pub fn set_STL_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets Turn on parking lights
    pub fn get_STL_EIN(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets Outside light dimmed with threshold 2

    pub fn set_DIMM2(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets Outside light dimmed with threshold 2
    pub fn get_DIMM2(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets Turn on the right parking light

    pub fn set_PL_RE_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets Turn on the right parking light
    pub fn get_PL_RE_EIN(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets Turn on left parking light

    pub fn set_PL_LI_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets Turn on left parking light
    pub fn get_PL_LI_EIN(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets Turn on high beam

    pub fn set_FL_EIN_SAM_V(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets Turn on high beam
    pub fn get_FL_EIN_SAM_V(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets daytime running lights on

    pub fn set_TFL_EIN_ECE(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets daytime running lights on
    pub fn get_TFL_EIN_ECE(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets Refrigeration compressor is running

    pub fn set_KOMP_LFT(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets Refrigeration compressor is running
    pub fn get_KOMP_LFT(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets Handbrake applied (indicator lamp)

    pub fn set_HAS_KL(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets Handbrake applied (indicator lamp)
    pub fn get_HAS_KL(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets Air conditioning compressor switched on

    pub fn set_KOMP_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets Air conditioning compressor switched on
    pub fn get_KOMP_EIN(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets Refrigeration compressor control current output defective

    pub fn set_KOMP_DEF(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets Refrigeration compressor control current output defective
    pub fn get_KOMP_DEF(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets Terminal 15 activated via diagnostics

    pub fn set_DIAG_15_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets Terminal 15 activated via diagnostics
    pub fn get_DIAG_15_EIN(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets Terminal 15R activated via diagnostics

    pub fn set_DIAG_15R_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets Terminal 15R activated via diagnostics
    pub fn get_DIAG_15R_EIN(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets Brake pad wear warning light

    pub fn set_BBV_KL(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets Brake pad wear warning light
    pub fn get_BBV_KL(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets Brake fluid level warning light

    pub fn set_BFL_KL(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets Brake fluid level warning light
    pub fn get_BFL_KL(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets washer fluid level too low indicator light

    pub fn set_WWS_KL(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets washer fluid level too low indicator light
    pub fn get_WWS_KL(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets Cooling water level too low Control lamp

    pub fn set_KWS_KL(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets Cooling water level too low Control lamp
    pub fn get_KWS_KL(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets SBC added value: run-on active

    pub fn set_MW_AKT_SAM_V(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets SBC added value: run-on active
    pub fn get_MW_AKT_SAM_V(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets SAM/x: v-signal from EHB-ASG, x = B (230), V (211), F ( 240)

    pub fn set_VSTAT_A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets SAM/x: v-signal from EHB-ASG, x = B (230), V (211), F ( 240)
    pub fn get_VSTAT_A(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets SAM/V passive

    pub fn set_SAM_V_PAS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets SAM/V passive
    pub fn get_SAM_V_PAS(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets SAM/x: brake light switch output EHB-ASG, x = B (230), V (211), F (240)

    pub fn set_BLS_A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets SAM/x: brake light switch output EHB-ASG, x = B (230), V (211), F (240)
    pub fn get_BLS_A(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets SAM/x: EHB-ASG in fallback level, x = B (230), V (211,164,251), F (240)

    pub fn set_INF_RFE_SAM(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets SAM/x: EHB-ASG in fallback level, x = B (230), V (211,164,251), F (240)
    pub fn get_INF_RFE_SAM(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
    /// Sets Driver side fog lights defective

    pub fn set_NSW_DEF_F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffff7fffffff) | ((value as u64) & 0x1) << 31; }

    /// Gets Driver side fog lights defective
    pub fn get_NSW_DEF_F(&self) -> bool { (self.0 >> 31 & 0x1) != 0 }
        
    /// Sets High beam on driver's side defective

    pub fn set_FL_DEF_F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets High beam on driver's side defective
    pub fn get_FL_DEF_F(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets driver's side low beam defective

    pub fn set_ABL_DEF_F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets driver's side low beam defective
    pub fn get_ABL_DEF_F(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets Front parking light on driver's side defective

    pub fn set_PL_DEF_VF(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets Front parking light on driver's side defective
    pub fn get_PL_DEF_VF(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets Front turn signal driver's side defective

    pub fn set_BLI_DEF_VF(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffff7ffffff) | ((value as u64) & 0x1) << 27; }

    /// Gets Front turn signal driver's side defective
    pub fn get_BLI_DEF_VF(&self) -> bool { (self.0 >> 27 & 0x1) != 0 }
        
    /// Sets Front driver's side marker defective

    pub fn set_SM_DEF_VF(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffbffffff) | ((value as u64) & 0x1) << 26; }

    /// Gets Front driver's side marker defective
    pub fn get_SM_DEF_VF(&self) -> bool { (self.0 >> 26 & 0x1) != 0 }
        
    /// Sets Front passenger side side marker defective

    pub fn set_SM_DEF_VBF(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffdffffff) | ((value as u64) & 0x1) << 25; }

    /// Gets Front passenger side side marker defective
    pub fn get_SM_DEF_VBF(&self) -> bool { (self.0 >> 25 & 0x1) != 0 }
        
    /// Sets Instrument lights off

    pub fn set_INSTR_AUS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffeffffff) | ((value as u64) & 0x1) << 24; }

    /// Gets Instrument lights off
    pub fn get_INSTR_AUS(&self) -> bool { (self.0 >> 24 & 0x1) != 0 }
        
    /// Sets Replacement turn signals on the front driver's side are active

    pub fn set_BLI_ERS_VF(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets Replacement turn signals on the front driver's side are active
    pub fn get_BLI_ERS_VF(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets Replacement front parking light on driver's side active

    pub fn set_PL_ERS_VF(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffbfffff) | ((value as u64) & 0x1) << 22; }

    /// Gets Replacement front parking light on driver's side active
    pub fn get_PL_ERS_VF(&self) -> bool { (self.0 >> 22 & 0x1) != 0 }
        
    /// Sets Start Xenon4 diagnostic procedure driver's side

    pub fn set_DIAG_X4_F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffdfffff) | ((value as u64) & 0x1) << 21; }

    /// Gets Start Xenon4 diagnostic procedure driver's side
    pub fn get_DIAG_X4_F(&self) -> bool { (self.0 >> 21 & 0x1) != 0 }
        
    /// Sets front brake pad wear 50%

    pub fn set_BBV_V_50(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffff7fff) | ((value as u64) & 0x1) << 15; }

    /// Gets front brake pad wear 50%
    pub fn get_BBV_V_50(&self) -> bool { (self.0 >> 15 & 0x1) != 0 }
        
    /// Sets front brake pad wear 100%

    pub fn set_BBV_V_100(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffbfff) | ((value as u64) & 0x1) << 14; }

    /// Gets front brake pad wear 100%
    pub fn get_BBV_V_100(&self) -> bool { (self.0 >> 14 & 0x1) != 0 }
        
    /// Sets Rear brake pad wear 50%

    pub fn set_BBV_H_50(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffdfff) | ((value as u64) & 0x1) << 13; }

    /// Gets Rear brake pad wear 50%
    pub fn get_BBV_H_50(&self) -> bool { (self.0 >> 13 & 0x1) != 0 }
        
    /// Sets rear brake pad wear 100%

    pub fn set_BBV_H_100(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffefff) | ((value as u64) & 0x1) << 12; }

    /// Gets rear brake pad wear 100%
    pub fn get_BBV_H_100(&self) -> bool { (self.0 >> 12 & 0x1) != 0 }
        
    /// Sets EMS auxiliary power supply. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_EHB_BEH(&mut self, value: u8){ self.0 = (self.0 & 0xfffffffffffff3ff) | ((value as u64) & 0x3) << 10; }

    /// Gets EMS auxiliary power supply. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_EHB_BEH(&self) -> u8 { (self.0 >> 10 & 0x3) as u8 }
        
    /// Sets readback signal Kl15R

    pub fn set_KL15R_ST_RL(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffdff) | ((value as u64) & 0x1) << 9; }

    /// Gets readback signal Kl15R
    pub fn get_KL15R_ST_RL(&self) -> bool { (self.0 >> 9 & 0x1) != 0 }
        
    /// Sets readback signal Kl15

    pub fn set_KL15_ST_RL(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffeff) | ((value as u64) & 0x1) << 8; }

    /// Gets readback signal Kl15
    pub fn get_KL15_ST_RL(&self) -> bool { (self.0 >> 8 & 0x1) != 0 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct SAM_V_A2(pub u64);

impl SAM_V_A2 {

	/// Gets CAN ID of SAM_V_A2
	pub const fn get_canid() -> u16 { SAM_V_A2_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets outside air temperature. Conversion formula (To raw from real): y=(x+40.0)/0.50 (Unit: °C)

    pub fn set_T_AUSSEN_B(&mut self, value: u8){ self.0 = (self.0 & 0x00ffffffffffffff) | ((value as u64) & 0xff) << 56; }

    /// Gets outside air temperature. Conversion formula (To real from raw): y=(0.50x)-40.0 (Unit: °C)
    pub fn get_T_AUSSEN_B(&self) -> u8 { (self.0 >> 56 & 0xff) as u8 }
        
    /// Sets Pressure refrigerant R134a. Conversion formula (To raw from real): y=(x-0.0)/0.10 (Unit: bar)

    pub fn set_P_KAELTE(&mut self, value: u16){ self.0 = (self.0 & 0xff0000ffffffffff) | ((value as u64) & 0xffff) << 40; }

    /// Gets Pressure refrigerant R134a. Conversion formula (To real from raw): y=(0.10x)+0.0 (Unit: bar)
    pub fn get_P_KAELTE(&self) -> u16 { (self.0 >> 40 & 0xffff) as u16 }
        
    /// Sets Refrigerant R134a temperature. Conversion formula (To raw from real): y=(x+10.0)/0.10 (Unit: °C)

    pub fn set_T_KAELTE(&mut self, value: u16){ self.0 = (self.0 & 0xffffff0000ffffff) | ((value as u64) & 0xffff) << 24; }

    /// Gets Refrigerant R134a temperature. Conversion formula (To real from raw): y=(0.10x)-10.0 (Unit: °C)
    pub fn get_T_KAELTE(&self) -> u16 { (self.0 >> 24 & 0xffff) as u16 }
        
    /// Sets Compressor main control valve flow. Conversion formula (To raw from real): y=(x-0.0)/10.00 (Unit: mA)

    pub fn set_I_KOMP(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffff00ffff) | ((value as u64) & 0xff) << 16; }

    /// Gets Compressor main control valve flow. Conversion formula (To real from raw): y=(10.00x)+0.0 (Unit: mA)
    pub fn get_I_KOMP(&self) -> u8 { (self.0 >> 16 & 0xff) as u8 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct SAM_V_A3(pub u64);

impl SAM_V_A3 {

	/// Gets CAN ID of SAM_V_A3
	pub const fn get_canid() -> u16 { SAM_V_A3_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Diagnosis rain sensor

    pub fn set_DIAG_RS(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets Diagnosis rain sensor
    pub fn get_DIAG_RS(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets Steering column switch in stage 1

    pub fn set_SCH_WI_1_RS(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets Steering column switch in stage 1
    pub fn get_SCH_WI_1_RS(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets SAM_V initialization

    pub fn set_SAM_V_INIT(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets SAM_V initialization
    pub fn get_SAM_V_INIT(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets Wash pressed

    pub fn set_KL_86_RS(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets Wash pressed
    pub fn get_KL_86_RS(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets Wiper out of park position

    pub fn set_KL_31B_RS(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets Wiper out of park position
    pub fn get_KL_31B_RS(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets rain sensor on/off (interval position)

    pub fn set_RS_INT(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets rain sensor on/off (interval position)
    pub fn get_RS_INT(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct SD_RS_SAM_V(pub u64);

impl SD_RS_SAM_V {

	/// Gets CAN ID of SD_RS_SAM_V
	pub const fn get_canid() -> u16 { SD_RS_SAM_V_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Identification for > 8 bytes

    pub fn set_SAM_V_KENN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Identification for > 8 bytes
    pub fn get_SAM_V_KENN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets state variable 07h

    pub fn set_SAM_V_PGV07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets state variable 07h
    pub fn get_SAM_V_PGV07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets state variable 06h

    pub fn set_SAM_V_PGV06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets state variable 06h
    pub fn get_SAM_V_PGV06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets state variable 05h

    pub fn set_SAM_V_PGV05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets state variable 05h
    pub fn get_SAM_V_PGV05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets state variable 04h

    pub fn set_SAM_V_PGV04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets state variable 04h
    pub fn get_SAM_V_PGV04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets state variable 03h

    pub fn set_SAM_V_PGV03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets state variable 03h
    pub fn get_SAM_V_PGV03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets state variable 02h

    pub fn set_SAM_V_PGV02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets state variable 02h
    pub fn get_SAM_V_PGV02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets state variable 01h

    pub fn set_SAM_V_PGV01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets state variable 01h
    pub fn get_SAM_V_PGV01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets Error message 01h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_SAM_V_FM01(&mut self, value: u16){ self.0 = (self.0 & 0xff0000ffffffffff) | ((value as u64) & 0xffff) << 40; }

    /// Gets Error message 01h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_SAM_V_FM01(&self) -> u16 { (self.0 >> 40 & 0xffff) as u16 }
        
    /// Sets Error message 02h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_SAM_V_FM02(&mut self, value: u16){ self.0 = (self.0 & 0xffffff0000ffffff) | ((value as u64) & 0xffff) << 24; }

    /// Gets Error message 02h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_SAM_V_FM02(&self) -> u16 { (self.0 >> 24 & 0xffff) as u16 }
        
    /// Sets Error message 03h. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_SAM_V_FM03(&mut self, value: u16){ self.0 = (self.0 & 0xffffffffff0000ff) | ((value as u64) & 0xffff) << 8; }

    /// Gets Error message 03h. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_SAM_V_FM03(&self) -> u16 { (self.0 >> 8 & 0xffff) as u16 }
        
    /// Sets state variable 0Fh

    pub fn set_SAM_V_PGV0F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffff7f) | ((value as u64) & 0x1) << 7; }

    /// Gets state variable 0Fh
    pub fn get_SAM_V_PGV0F(&self) -> bool { (self.0 >> 7 & 0x1) != 0 }
        
    /// Sets state variable 0Eh

    pub fn set_SAM_V_PGV0E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffbf) | ((value as u64) & 0x1) << 6; }

    /// Gets state variable 0Eh
    pub fn get_SAM_V_PGV0E(&self) -> bool { (self.0 >> 6 & 0x1) != 0 }
        
    /// Sets State variable 0Dh

    pub fn set_SAM_V_PGV0D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffdf) | ((value as u64) & 0x1) << 5; }

    /// Gets State variable 0Dh
    pub fn get_SAM_V_PGV0D(&self) -> bool { (self.0 >> 5 & 0x1) != 0 }
        
    /// Sets state variable 0Ch

    pub fn set_SAM_V_PGV0C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffef) | ((value as u64) & 0x1) << 4; }

    /// Gets state variable 0Ch
    pub fn get_SAM_V_PGV0C(&self) -> bool { (self.0 >> 4 & 0x1) != 0 }
        
    /// Sets state variable 0Bh

    pub fn set_SAM_V_PGV0B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffff7) | ((value as u64) & 0x1) << 3; }

    /// Gets state variable 0Bh
    pub fn get_SAM_V_PGV0B(&self) -> bool { (self.0 >> 3 & 0x1) != 0 }
        
    /// Sets State variable 0Ah

    pub fn set_SAM_V_PGV0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffb) | ((value as u64) & 0x1) << 2; }

    /// Gets State variable 0Ah
    pub fn get_SAM_V_PGV0A(&self) -> bool { (self.0 >> 2 & 0x1) != 0 }
        
    /// Sets state variable 09h

    pub fn set_SAM_V_PGV09(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffd) | ((value as u64) & 0x1) << 1; }

    /// Gets state variable 09h
    pub fn get_SAM_V_PGV09(&self) -> bool { (self.0 >> 1 & 0x1) != 0 }
        
    /// Sets state variable 08h

    pub fn set_SAM_V_PGV08(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffe) | ((value as u64) & 0x1) << 0; }

    /// Gets state variable 08h
    pub fn get_SAM_V_PGV08(&self) -> bool { (self.0 >> 0 & 0x1) != 0 }
        
}