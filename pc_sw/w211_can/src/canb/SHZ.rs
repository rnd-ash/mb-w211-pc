
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'SHZ'
*/
    
pub const SHZ_A1_CAN_ID: u16 = 0x0210;
pub const SD_RS_SHZ_CAN_ID: u16 = 0x07DB;

/// Front left seat heating status
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum SHZ_A1_SH_VL_ST {
	SHZ_ST_AUS = 0, // Seat heating is switched off
	SHZ_STEP1 = 1, // Seat heating level 1 is switched on
	SHZ_STEP2 = 2, // Stage 2 seat heating is switched on
	SHZ_STEP3 = 3, // Stage 3 seat heating is switched on
}

impl TryFrom<u8> for SHZ_A1_SH_VL_ST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::SHZ_ST_AUS),
			1 => Ok(Self::SHZ_STEP1),
			2 => Ok(Self::SHZ_STEP2),
			3 => Ok(Self::SHZ_STEP3),
			_ => Err(())
		}
	}
}
/// Status of seat ventilation, front left
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum SHZ_A1_SBLFT_VL_ST {
	SBL_ST_AUS = 0, // Seat ventilation is switched off
	SBL_STEP1 = 1, // Stage 1 seat ventilation is switched on
	SBL_STEP2 = 2, // Stage 2 seat ventilation is switched on
	SBL_STEP3 = 3, // Stage 3 seat ventilation is switched on
}

impl TryFrom<u8> for SHZ_A1_SBLFT_VL_ST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::SBL_ST_AUS),
			1 => Ok(Self::SBL_STEP1),
			2 => Ok(Self::SBL_STEP2),
			3 => Ok(Self::SBL_STEP3),
			_ => Err(())
		}
	}
}
/// Status of seat heating, front right
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum SHZ_A1_SH_VR_ST {
	SHZ_ST_AUS = 0, // Seat heating is switched off
	SHZ_STEP1 = 1, // Seat heating level 1 is switched on
	SHZ_STEP2 = 2, // Stage 2 seat heating is switched on
	SHZ_STEP3 = 3, // Stage 3 seat heating is switched on
}

impl TryFrom<u8> for SHZ_A1_SH_VR_ST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::SHZ_ST_AUS),
			1 => Ok(Self::SHZ_STEP1),
			2 => Ok(Self::SHZ_STEP2),
			3 => Ok(Self::SHZ_STEP3),
			_ => Err(())
		}
	}
}
/// Status of seat ventilation, front right
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum SHZ_A1_SBLFT_VR_ST {
	SBL_ST_AUS = 0, // Seat ventilation is switched off
	SBL_STEP1 = 1, // Stage 1 seat ventilation is switched on
	SBL_STEP2 = 2, // Stage 2 seat ventilation is switched on
	SBL_STEP3 = 3, // Stage 3 seat ventilation is switched on
}

impl TryFrom<u8> for SHZ_A1_SBLFT_VR_ST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::SBL_ST_AUS),
			1 => Ok(Self::SBL_STEP1),
			2 => Ok(Self::SBL_STEP2),
			3 => Ok(Self::SBL_STEP3),
			_ => Err(())
		}
	}
}
/// Rear left seat heating status
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum SHZ_A1_SH_HL_ST {
	SHZ_ST_AUS = 0, // Seat heating is switched off
	SHZ_STEP1 = 1, // Seat heating level 1 is switched on
	SHZ_STEP2 = 2, // Stage 2 seat heating is switched on
	SHZ_STEP3 = 3, // Stage 3 seat heating is switched on
}

impl TryFrom<u8> for SHZ_A1_SH_HL_ST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::SHZ_ST_AUS),
			1 => Ok(Self::SHZ_STEP1),
			2 => Ok(Self::SHZ_STEP2),
			3 => Ok(Self::SHZ_STEP3),
			_ => Err(())
		}
	}
}
/// Rear right seat heating status
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum SHZ_A1_SH_HR_ST {
	SHZ_ST_AUS = 0, // Seat heating is switched off
	SHZ_STEP1 = 1, // Seat heating level 1 is switched on
	SHZ_STEP2 = 2, // Stage 2 seat heating is switched on
	SHZ_STEP3 = 3, // Stage 3 seat heating is switched on
}

impl TryFrom<u8> for SHZ_A1_SH_HR_ST {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::SHZ_ST_AUS),
			1 => Ok(Self::SHZ_STEP1),
			2 => Ok(Self::SHZ_STEP2),
			3 => Ok(Self::SHZ_STEP3),
			_ => Err(())
		}
	}
}

pub struct SHZ_A1(u64);

impl SHZ_A1 {

	/// Gets CAN ID of SHZ_A1
	pub fn get_canid() -> u16 { SHZ_A1_CAN_ID }
    /// Sets Heated/ventilated seats switched off due to undervoltage

    pub fn set_SHB_VL_USPG(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Heated/ventilated seats switched off due to undervoltage
    pub fn get_SHB_VL_USPG(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Front left seat heating status

    pub fn set_SH_VL_ST(&mut self, value: SHZ_A1_SH_VL_ST){ self.0 = (self.0 & 0xe7ffffffffffffff) | ((value as u64) & 0x3) << 59; }

    /// Gets Front left seat heating status
    pub fn get_SH_VL_ST(&self) -> std::result::Result<SHZ_A1_SH_VL_ST, ()> { return SHZ_A1_SH_VL_ST::try_from((self.0 >> 59 & 0x3) as u8) }
        
    /// Sets Status of seat ventilation, front left

    pub fn set_SBLFT_VL_ST(&mut self, value: SHZ_A1_SBLFT_VL_ST){ self.0 = (self.0 & 0xfcffffffffffffff) | ((value as u64) & 0x3) << 56; }

    /// Gets Status of seat ventilation, front left
    pub fn get_SBLFT_VL_ST(&self) -> std::result::Result<SHZ_A1_SBLFT_VL_ST, ()> { return SHZ_A1_SBLFT_VL_ST::try_from((self.0 >> 56 & 0x3) as u8) }
        
    /// Sets Heated/ventilated seats switched off due to undervoltage

    pub fn set_SHB_VR_USPG(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Heated/ventilated seats switched off due to undervoltage
    pub fn get_SHB_VR_USPG(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Status of seat heating, front right

    pub fn set_SH_VR_ST(&mut self, value: SHZ_A1_SH_VR_ST){ self.0 = (self.0 & 0xffe7ffffffffffff) | ((value as u64) & 0x3) << 51; }

    /// Gets Status of seat heating, front right
    pub fn get_SH_VR_ST(&self) -> std::result::Result<SHZ_A1_SH_VR_ST, ()> { return SHZ_A1_SH_VR_ST::try_from((self.0 >> 51 & 0x3) as u8) }
        
    /// Sets Status of seat ventilation, front right

    pub fn set_SBLFT_VR_ST(&mut self, value: SHZ_A1_SBLFT_VR_ST){ self.0 = (self.0 & 0xfffcffffffffffff) | ((value as u64) & 0x3) << 48; }

    /// Gets Status of seat ventilation, front right
    pub fn get_SBLFT_VR_ST(&self) -> std::result::Result<SHZ_A1_SBLFT_VR_ST, ()> { return SHZ_A1_SBLFT_VR_ST::try_from((self.0 >> 48 & 0x3) as u8) }
        
    /// Sets seat heater switched off due to undervoltage

    pub fn set_SH_HL_USPG(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets seat heater switched off due to undervoltage
    pub fn get_SH_HL_USPG(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets Rear left seat heating status

    pub fn set_SH_HL_ST(&mut self, value: SHZ_A1_SH_HL_ST){ self.0 = (self.0 & 0xffffe7ffffffffff) | ((value as u64) & 0x3) << 43; }

    /// Gets Rear left seat heating status
    pub fn get_SH_HL_ST(&self) -> std::result::Result<SHZ_A1_SH_HL_ST, ()> { return SHZ_A1_SH_HL_ST::try_from((self.0 >> 43 & 0x3) as u8) }
        
    /// Sets seat heater switched off due to undervoltage

    pub fn set_SH_HR_USPG(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets seat heater switched off due to undervoltage
    pub fn get_SH_HR_USPG(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets Rear right seat heating status

    pub fn set_SH_HR_ST(&mut self, value: SHZ_A1_SH_HR_ST){ self.0 = (self.0 & 0xffffffe7ffffffff) | ((value as u64) & 0x3) << 35; }

    /// Gets Rear right seat heating status
    pub fn get_SH_HR_ST(&self) -> std::result::Result<SHZ_A1_SH_HR_ST, ()> { return SHZ_A1_SH_HR_ST::try_from((self.0 >> 35 & 0x3) as u8) }
        
}
pub struct SD_RS_SHZ(u64);

impl SD_RS_SHZ {

	/// Gets CAN ID of SD_RS_SHZ
	pub fn get_canid() -> u16 { SD_RS_SHZ_CAN_ID }
    /// Sets Reserved for vector format designation BR 211

    pub fn set_SHZ_RES(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Reserved for vector format designation BR 211
    pub fn get_SHZ_RES(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets process variable 07h

    pub fn set_SHZ_PG07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets process variable 07h
    pub fn get_SHZ_PG07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets process variable 06h

    pub fn set_SHZ_PG06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets process variable 06h
    pub fn get_SHZ_PG06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets process variable 05h

    pub fn set_SHZ_PG05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets process variable 05h
    pub fn get_SHZ_PG05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets process variable 04h

    pub fn set_SHZ_PG04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets process variable 04h
    pub fn get_SHZ_PG04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets process variable 03h

    pub fn set_SHZ_PG03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets process variable 03h
    pub fn get_SHZ_PG03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets process variable 02h

    pub fn set_SHZ_PG02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets process variable 02h
    pub fn get_SHZ_PG02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets process variable 01h

    pub fn set_SHZ_PG01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets process variable 01h
    pub fn get_SHZ_PG01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets Process variable 0Fh

    pub fn set_SHZ_PG0F(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Process variable 0Fh
    pub fn get_SHZ_PG0F(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets process variable 0Eh

    pub fn set_SHZ_PG0E(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets process variable 0Eh
    pub fn get_SHZ_PG0E(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets process variable 0Dh

    pub fn set_SHZ_PG0D(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets process variable 0Dh
    pub fn get_SHZ_PG0D(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets process variable 0Ch

    pub fn set_SHZ_PG0C(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets process variable 0Ch
    pub fn get_SHZ_PG0C(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets process variable 0Bh

    pub fn set_SHZ_PG0B(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets process variable 0Bh
    pub fn get_SHZ_PG0B(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets process variable 0Ah

    pub fn set_SHZ_PG0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets process variable 0Ah
    pub fn get_SHZ_PG0A(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets process variable 09h

    pub fn set_SHZ_PG09(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets process variable 09h
    pub fn get_SHZ_PG09(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets process variable 08h

    pub fn set_SHZ_PG08(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets process variable 08h
    pub fn get_SHZ_PG08(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets process variable 17h

    pub fn set_SHZ_PG17(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets process variable 17h
    pub fn get_SHZ_PG17(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets process variable 16h

    pub fn set_SHZ_PG16(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets process variable 16h
    pub fn get_SHZ_PG16(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets process variable 15h

    pub fn set_SHZ_PG15(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets process variable 15h
    pub fn get_SHZ_PG15(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets process variable 14h

    pub fn set_SHZ_PG14(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets process variable 14h
    pub fn get_SHZ_PG14(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets process variable 13h

    pub fn set_SHZ_PG13(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets process variable 13h
    pub fn get_SHZ_PG13(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets process variable 12h

    pub fn set_SHZ_PG12(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets process variable 12h
    pub fn get_SHZ_PG12(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets process variable 11h

    pub fn set_SHZ_PG11(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets process variable 11h
    pub fn get_SHZ_PG11(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets process variable 10h

    pub fn set_SHZ_PG10(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets process variable 10h
    pub fn get_SHZ_PG10(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets process variable 1Fh

    pub fn set_SHZ_PG1F(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets process variable 1Fh
    pub fn get_SHZ_PG1F(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets process variable 1Eh

    pub fn set_SHZ_PG1E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets process variable 1Eh
    pub fn get_SHZ_PG1E(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets process variable 1Dh

    pub fn set_SHZ_PG1D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets process variable 1Dh
    pub fn get_SHZ_PG1D(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets process size 1Ch

    pub fn set_SHZ_PG1C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets process size 1Ch
    pub fn get_SHZ_PG1C(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets process variable 1Bh

    pub fn set_SHZ_PG1B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets process variable 1Bh
    pub fn get_SHZ_PG1B(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets process variable 1Ah

    pub fn set_SHZ_PG1A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets process variable 1Ah
    pub fn get_SHZ_PG1A(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets process variable 19h

    pub fn set_SHZ_PG19(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets process variable 19h
    pub fn get_SHZ_PG19(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets process size 18h

    pub fn set_SHZ_PG18(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets process size 18h
    pub fn get_SHZ_PG18(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
    /// Sets process variable 27h

    pub fn set_SHZ_PG27(&mut self, value: bool){ self.0 = (self.0 & 0xffffffff7fffffff) | ((value as u64) & 0x1) << 31; }

    /// Gets process variable 27h
    pub fn get_SHZ_PG27(&self) -> bool { (self.0 >> 31 & 0x1) != 0 }
        
    /// Sets process variable 26h

    pub fn set_SHZ_PG26(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets process variable 26h
    pub fn get_SHZ_PG26(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets process variable 25h

    pub fn set_SHZ_PG25(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets process variable 25h
    pub fn get_SHZ_PG25(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets process variable 24h

    pub fn set_SHZ_PG24(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets process variable 24h
    pub fn get_SHZ_PG24(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets process variable 23h

    pub fn set_SHZ_PG23(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffff7ffffff) | ((value as u64) & 0x1) << 27; }

    /// Gets process variable 23h
    pub fn get_SHZ_PG23(&self) -> bool { (self.0 >> 27 & 0x1) != 0 }
        
    /// Sets process variable 22h

    pub fn set_SHZ_PG22(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffbffffff) | ((value as u64) & 0x1) << 26; }

    /// Gets process variable 22h
    pub fn get_SHZ_PG22(&self) -> bool { (self.0 >> 26 & 0x1) != 0 }
        
    /// Sets process variable 21h

    pub fn set_SHZ_PG21(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffdffffff) | ((value as u64) & 0x1) << 25; }

    /// Gets process variable 21h
    pub fn get_SHZ_PG21(&self) -> bool { (self.0 >> 25 & 0x1) != 0 }
        
    /// Sets process variable 20h

    pub fn set_SHZ_PG20(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffeffffff) | ((value as u64) & 0x1) << 24; }

    /// Gets process variable 20h
    pub fn get_SHZ_PG20(&self) -> bool { (self.0 >> 24 & 0x1) != 0 }
        
    /// Sets process variable 2Fh

    pub fn set_SHZ_PG2F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets process variable 2Fh
    pub fn get_SHZ_PG2F(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets process variable 2Eh

    pub fn set_SHZ_PG2E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffbfffff) | ((value as u64) & 0x1) << 22; }

    /// Gets process variable 2Eh
    pub fn get_SHZ_PG2E(&self) -> bool { (self.0 >> 22 & 0x1) != 0 }
        
    /// Sets process variable 2Dh

    pub fn set_SHZ_PG2D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffdfffff) | ((value as u64) & 0x1) << 21; }

    /// Gets process variable 2Dh
    pub fn get_SHZ_PG2D(&self) -> bool { (self.0 >> 21 & 0x1) != 0 }
        
    /// Sets process size 2Ch

    pub fn set_SHZ_PG2C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffefffff) | ((value as u64) & 0x1) << 20; }

    /// Gets process size 2Ch
    pub fn get_SHZ_PG2C(&self) -> bool { (self.0 >> 20 & 0x1) != 0 }
        
    /// Sets Process variable 2Bh

    pub fn set_SHZ_PG2B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffff7ffff) | ((value as u64) & 0x1) << 19; }

    /// Gets Process variable 2Bh
    pub fn get_SHZ_PG2B(&self) -> bool { (self.0 >> 19 & 0x1) != 0 }
        
    /// Sets process variable 2Ah

    pub fn set_SHZ_PG2A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffbffff) | ((value as u64) & 0x1) << 18; }

    /// Gets process variable 2Ah
    pub fn get_SHZ_PG2A(&self) -> bool { (self.0 >> 18 & 0x1) != 0 }
        
    /// Sets process variable 29h

    pub fn set_SHZ_PG29(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffdffff) | ((value as u64) & 0x1) << 17; }

    /// Gets process variable 29h
    pub fn get_SHZ_PG29(&self) -> bool { (self.0 >> 17 & 0x1) != 0 }
        
    /// Sets Process variable 28h

    pub fn set_SHZ_PG28(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffeffff) | ((value as u64) & 0x1) << 16; }

    /// Gets Process variable 28h
    pub fn get_SHZ_PG28(&self) -> bool { (self.0 >> 16 & 0x1) != 0 }
        
    /// Sets process variable 37h

    pub fn set_SHZ_PG37(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffff7fff) | ((value as u64) & 0x1) << 15; }

    /// Gets process variable 37h
    pub fn get_SHZ_PG37(&self) -> bool { (self.0 >> 15 & 0x1) != 0 }
        
    /// Sets process variable 36h

    pub fn set_SHZ_PG36(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffbfff) | ((value as u64) & 0x1) << 14; }

    /// Gets process variable 36h
    pub fn get_SHZ_PG36(&self) -> bool { (self.0 >> 14 & 0x1) != 0 }
        
    /// Sets process variable 35h

    pub fn set_SHZ_PG35(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffdfff) | ((value as u64) & 0x1) << 13; }

    /// Gets process variable 35h
    pub fn get_SHZ_PG35(&self) -> bool { (self.0 >> 13 & 0x1) != 0 }
        
    /// Sets process variable 34h

    pub fn set_SHZ_PG34(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffefff) | ((value as u64) & 0x1) << 12; }

    /// Gets process variable 34h
    pub fn get_SHZ_PG34(&self) -> bool { (self.0 >> 12 & 0x1) != 0 }
        
    /// Sets process variable 33h

    pub fn set_SHZ_PG33(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffff7ff) | ((value as u64) & 0x1) << 11; }

    /// Gets process variable 33h
    pub fn get_SHZ_PG33(&self) -> bool { (self.0 >> 11 & 0x1) != 0 }
        
    /// Sets process variable 32h

    pub fn set_SHZ_PG32(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffbff) | ((value as u64) & 0x1) << 10; }

    /// Gets process variable 32h
    pub fn get_SHZ_PG32(&self) -> bool { (self.0 >> 10 & 0x1) != 0 }
        
    /// Sets process variable 31h

    pub fn set_SHZ_PG31(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffdff) | ((value as u64) & 0x1) << 9; }

    /// Gets process variable 31h
    pub fn get_SHZ_PG31(&self) -> bool { (self.0 >> 9 & 0x1) != 0 }
        
    /// Sets process variable 30h

    pub fn set_SHZ_PG30(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffeff) | ((value as u64) & 0x1) << 8; }

    /// Gets process variable 30h
    pub fn get_SHZ_PG30(&self) -> bool { (self.0 >> 8 & 0x1) != 0 }
        
    /// Sets process variable 3Fh

    pub fn set_SHZ_PG3F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffff7f) | ((value as u64) & 0x1) << 7; }

    /// Gets process variable 3Fh
    pub fn get_SHZ_PG3F(&self) -> bool { (self.0 >> 7 & 0x1) != 0 }
        
    /// Sets process variable 3Eh

    pub fn set_SHZ_PG3E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffbf) | ((value as u64) & 0x1) << 6; }

    /// Gets process variable 3Eh
    pub fn get_SHZ_PG3E(&self) -> bool { (self.0 >> 6 & 0x1) != 0 }
        
    /// Sets process variable 3Dh

    pub fn set_SHZ_PG3D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffdf) | ((value as u64) & 0x1) << 5; }

    /// Gets process variable 3Dh
    pub fn get_SHZ_PG3D(&self) -> bool { (self.0 >> 5 & 0x1) != 0 }
        
    /// Sets process size 3Ch

    pub fn set_SHZ_PG3C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffef) | ((value as u64) & 0x1) << 4; }

    /// Gets process size 3Ch
    pub fn get_SHZ_PG3C(&self) -> bool { (self.0 >> 4 & 0x1) != 0 }
        
    /// Sets process variable 3Bh

    pub fn set_SHZ_PG3B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffff7) | ((value as u64) & 0x1) << 3; }

    /// Gets process variable 3Bh
    pub fn get_SHZ_PG3B(&self) -> bool { (self.0 >> 3 & 0x1) != 0 }
        
    /// Sets process variable 3Ah

    pub fn set_SHZ_PG3A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffb) | ((value as u64) & 0x1) << 2; }

    /// Gets process variable 3Ah
    pub fn get_SHZ_PG3A(&self) -> bool { (self.0 >> 2 & 0x1) != 0 }
        
    /// Sets process variable 39h

    pub fn set_SHZ_PG39(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffd) | ((value as u64) & 0x1) << 1; }

    /// Gets process variable 39h
    pub fn get_SHZ_PG39(&self) -> bool { (self.0 >> 1 & 0x1) != 0 }
        
    /// Sets Process variable 38h

    pub fn set_SHZ_PG38(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffe) | ((value as u64) & 0x1) << 0; }

    /// Gets Process variable 38h
    pub fn get_SHZ_PG38(&self) -> bool { (self.0 >> 0 & 0x1) != 0 }
        
}