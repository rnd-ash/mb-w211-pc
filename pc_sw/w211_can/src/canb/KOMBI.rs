
#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'KOMBI'
*/
    
pub const KOMBI_A1_CAN_ID: u16 = 0x000C;
pub const KOMBI_A2_CAN_ID: u16 = 0x0038;
pub const KOMBI_A5_CAN_ID: u16 = 0x01CA;
pub const KOMBI_A6_CAN_ID: u16 = 0x009E;
pub const KOMBI_A7_CAN_ID: u16 = 0x0194;
pub const KOMBI_A8_CAN_ID: u16 = 0x032A;
pub const KOMBI_A9_CAN_ID: u16 = 0x01CB;
pub const SD_RS_KOMBI_CAN_ID: u16 = 0x07D4;

/// language
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_A1_SPRACHE {
	DEUTSCH = 0, // German
	ENGLISCH = 1, // English
	FRANZOESISCH = 2, // French
	ITALIENISCH = 3, // Italian
	SPANISCH = 4, // Spanish
	JAPANISCH = 5, // Japanese
	SNV = 15, // Signal not available
}

impl TryFrom<u8> for KOMBI_A1_SPRACHE {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::DEUTSCH),
			1 => Ok(Self::ENGLISCH),
			2 => Ok(Self::FRANZOESISCH),
			3 => Ok(Self::ITALIENISCH),
			4 => Ok(Self::SPANISCH),
			5 => Ok(Self::JAPANISCH),
			15 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// Ambient light level
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_A1_AMB_LI {
	AUS = 0, // off
	DIMMSTUFE_1 = 1, // dimming level 1
	DIMMSTUFE_2 = 2, // dimming level 2
	DIMMSTUFE_3 = 3, // dimming level 3
	DIMMSTUFE_4 = 4, // dimming level 4
	DIMMSTUFE_5 = 5, // Dimming level 5
}

impl TryFrom<u8> for KOMBI_A1_AMB_LI {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::AUS),
			1 => Ok(Self::DIMMSTUFE_1),
			2 => Ok(Self::DIMMSTUFE_2),
			3 => Ok(Self::DIMMSTUFE_3),
			4 => Ok(Self::DIMMSTUFE_4),
			5 => Ok(Self::DIMMSTUFE_5),
			_ => Err(())
		}
	}
}
/// status combination
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_A5_KI_STAT {
	RESERVIERT0 = 0, // Unknown
	RESERVIERT1 = 1, // Unknown
	NEUTRAL = 2, // Unknown
	AUDIO = 3, // Audio
	NAVI = 4, // Navigation
	TEL = 5, // phone
	NEU_SER = 6, // New services
	SPR_FNK_DLG_CLO = 19, // Speech radio AI Dlg closed
	DAT_FNK_DLG_CLO = 20, // Data radio AI Dlg closed
	SPR_FNK_DLG_OPN = 21, // Voice radio AI Dlg opened
	DAT_FNK_DLG_OPN = 22, // Data radio AI Dlg opened
	SNV = 255, // Signal not available
}

impl TryFrom<u8> for KOMBI_A5_KI_STAT {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::RESERVIERT0),
			1 => Ok(Self::RESERVIERT1),
			2 => Ok(Self::NEUTRAL),
			3 => Ok(Self::AUDIO),
			4 => Ok(Self::NAVI),
			5 => Ok(Self::TEL),
			6 => Ok(Self::NEU_SER),
			19 => Ok(Self::SPR_FNK_DLG_CLO),
			20 => Ok(Self::DAT_FNK_DLG_CLO),
			21 => Ok(Self::SPR_FNK_DLG_OPN),
			22 => Ok(Self::DAT_FNK_DLG_OPN),
			255 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// status combination
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_A8_KI_STAT_MSS {
	RESERVIERT0 = 0, // Unknown
	RESERVIERT1 = 1, // Unknown
	NEUTRAL = 2, // Unknown
	AUDIO = 3, // Audio
	NAVI = 4, // Navigation
	TEL = 5, // phone
	NEU_SER = 6, // New services
	SPR_FNK_DLG_CLO = 19, // Speech radio AI Dlg closed
	DAT_FNK_DLG_CLO = 20, // Data radio AI Dlg closed
	SPR_FNK_DLG_OPN = 21, // Voice radio AI Dlg opened
	DAT_FNK_DLG_OPN = 22, // Data radio AI Dlg opened
	SNV = 255, // Signal not available
}

impl TryFrom<u8> for KOMBI_A8_KI_STAT_MSS {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::RESERVIERT0),
			1 => Ok(Self::RESERVIERT1),
			2 => Ok(Self::NEUTRAL),
			3 => Ok(Self::AUDIO),
			4 => Ok(Self::NAVI),
			5 => Ok(Self::TEL),
			6 => Ok(Self::NEU_SER),
			19 => Ok(Self::SPR_FNK_DLG_CLO),
			20 => Ok(Self::DAT_FNK_DLG_CLO),
			21 => Ok(Self::SPR_FNK_DLG_OPN),
			22 => Ok(Self::DAT_FNK_DLG_OPN),
			255 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// Icon confirmation
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_A9_KOMBI_IPS_INDICATION {
	NO_ICON = 0, // No icon received
	ICON = 1, // Icon received
	ICON_DSP = 2, // Start icon output
	ICON_DEL = 3, // Icon in display deleted
	ICON_WEG = 4, // Icon request rejected
	ICON_IGN = 5, // Icon request was ignored
	SNV = 7, // Signal not available
}

impl TryFrom<u8> for KOMBI_A9_KOMBI_IPS_INDICATION {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::NO_ICON),
			1 => Ok(Self::ICON),
			2 => Ok(Self::ICON_DSP),
			3 => Ok(Self::ICON_DEL),
			4 => Ok(Self::ICON_WEG),
			5 => Ok(Self::ICON_IGN),
			7 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}
/// IPS configuration
#[derive(Debug, Copy, Clone, PartialEq, Eq, Ord, PartialOrd)]
#[repr(C)]
pub enum KOMBI_A9_KOMBI_IPS_CONF {
	IPS_AUS = 0, // IPS off
	IPS_KOMFORT = 1, // IPS comfort
	IPS_DEFAULT = 2, // IPS default=DEFAULT
	IPS_SPORT = 3, // IPS Sport
	IPS_FEHLER = 4, // IPS menu not configured
	SNV = 15, // Signal not available
}

impl TryFrom<u8> for KOMBI_A9_KOMBI_IPS_CONF {
	type Error = ();
	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value {
			0 => Ok(Self::IPS_AUS),
			1 => Ok(Self::IPS_KOMFORT),
			2 => Ok(Self::IPS_DEFAULT),
			3 => Ok(Self::IPS_SPORT),
			4 => Ok(Self::IPS_FEHLER),
			15 => Ok(Self::SNV),
			_ => Err(())
		}
	}
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_A1(pub u64);

impl KOMBI_A1 {

	/// Gets CAN ID of KOMBI_A1
	pub const fn get_canid() -> u16 { KOMBI_A1_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Brightness of instrument lighting. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %)

    pub fn set_KL_58D_B(&mut self, value: u8){ self.0 = (self.0 & 0x00ffffffffffffff) | ((value as u64) & 0xff) << 56; }

    /// Gets Brightness of instrument lighting. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %)
    pub fn get_KL_58D_B(&self) -> u8 { (self.0 >> 56 & 0xff) as u8 }
        
    /// Sets vehicle speed. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: km/h)

    pub fn set_V_SIGNAL(&mut self, value: u8){ self.0 = (self.0 & 0xff00ffffffffffff) | ((value as u64) & 0xff) << 48; }

    /// Gets vehicle speed. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: km/h)
    pub fn get_V_SIGNAL(&self) -> u8 { (self.0 >> 48 & 0xff) as u8 }
        
    /// Sets Turn on roof sign (Taxi) on [1], off [0]

    pub fn set_DZ_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets Turn on roof sign (Taxi) on [1], off [0]
    pub fn get_DZ_EIN(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets Tank level minimum

    pub fn set_TFSM_B(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets Tank level minimum
    pub fn get_TFSM_B(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets Automatic door lock: on [1], off [0]

    pub fn set_AUTO_TUER(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets Automatic door lock: on [1], off [0]
    pub fn get_AUTO_TUER(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets Temperature unit "째C" [1], "째F" [0]

    pub fn set_T_C(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets Temperature unit "째C" [1], "째F" [0]
    pub fn get_T_C(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets daytime running lights on

    pub fn set_TFL_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets daytime running lights on
    pub fn get_TFL_EIN(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets Switch on trailer monitoring

    pub fn set_ANH_UEBW(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets Switch on trailer monitoring
    pub fn get_ANH_UEBW(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets Key dependent storage : on [1], off [0]

    pub fn set_SCHLUE_ABH_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets Key dependent storage : on [1], off [0]
    pub fn get_SCHLUE_ABH_EIN(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets Mirror in park position: blocked [1], allowed [0]

    pub fn set_SP_PARK_SPERR(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets Mirror in park position: blocked [1], allowed [0]
    pub fn get_SP_PARK_SPERR(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets Store lengthwise seat position for I/O assistance

    pub fn set_ESH_POS_SP(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets Store lengthwise seat position for I/O assistance
    pub fn get_ESH_POS_SP(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets Mirror folding in vehicle locking locked [1], allowed [0]

    pub fn set_SP_ANKL_SPERR(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets Mirror folding in vehicle locking locked [1], allowed [0]
    pub fn get_SP_ANKL_SPERR(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets FDS characteristics passenger dominant [1], subtle [0]

    pub fn set_FDS_B_CHAR(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets FDS characteristics passenger dominant [1], subtle [0]
    pub fn get_FDS_B_CHAR(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets FDS characteristics driver dominant [1], subtle [0]

    pub fn set_FDS_F_CHAR(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets FDS characteristics driver dominant [1], subtle [0]
    pub fn get_FDS_F_CHAR(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets Seat travel with I/O assistance set to standard

    pub fn set_ESH_POS_STD(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets Seat travel with I/O assistance set to standard
    pub fn get_ESH_POS_STD(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets Seat adjustment with I/O assistance on [1], off [0]

    pub fn set_ESH_SITZ_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets Seat adjustment with I/O assistance on [1], off [0]
    pub fn get_ESH_SITZ_EIN(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets Steering column adjustment with I/O help on [1], off [0]

    pub fn set_ESH_LENK_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets Steering column adjustment with I/O help on [1], off [0]
    pub fn get_ESH_LENK_EIN(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets boarding assistance/automatic positioning on [1], off [0]

    pub fn set_ESH_AUTO_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets boarding assistance/automatic positioning on [1], off [0]
    pub fn get_ESH_AUTO_EIN(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
    /// Sets memory scan [1], station scan [0]

    pub fn set_SLF(&mut self, value: bool){ self.0 = (self.0 & 0xffffffff7fffffff) | ((value as u64) & 0x1) << 31; }

    /// Gets memory scan [1], station scan [0]
    pub fn get_SLF(&self) -> bool { (self.0 >> 31 & 0x1) != 0 }
        
    /// Sets trip calculator "km" [1], "miles" [0]

    pub fn set_RR_KM(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets trip calculator "km" [1], "miles" [0]
    pub fn get_RR_KM(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets Switch on main beam allowed

    pub fn set_FL_OK(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets Switch on main beam allowed
    pub fn get_FL_OK(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets Ambient lighting on

    pub fn set_UFB_EIN(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets Ambient lighting on
    pub fn get_UFB_EIN(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets language

    pub fn set_SPRACHE(&mut self, value: KOMBI_A1_SPRACHE){ self.0 = (self.0 & 0xfffffffff0ffffff) | ((value as u64) & 0xf) << 24; }

    /// Gets language
    pub fn get_SPRACHE(&self) -> std::result::Result<KOMBI_A1_SPRACHE, ()> { return KOMBI_A1_SPRACHE::try_from((self.0 >> 24 & 0xf) as u8) }
        
    /// Sets Switch on auxiliary heating/ventilation

    pub fn set_STHL_EIN_KOMBI(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets Switch on auxiliary heating/ventilation
    pub fn get_STHL_EIN_KOMBI(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets preset time activated (LED on)

    pub fn set_VWZ_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffbfffff) | ((value as u64) & 0x1) << 22; }

    /// Gets preset time activated (LED on)
    pub fn get_VWZ_AKT(&self) -> bool { (self.0 >> 22 & 0x1) != 0 }
        
    /// Sets Preset time deactivated via MFL (LED off)

    pub fn set_VWZ_AUS_MFL(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffdfffff) | ((value as u64) & 0x1) << 21; }

    /// Gets Preset time deactivated via MFL (LED off)
    pub fn get_VWZ_AUS_MFL(&self) -> bool { (self.0 >> 21 & 0x1) != 0 }
        
    /// Sets Ambient light level

    pub fn set_AMB_LI(&mut self, value: KOMBI_A1_AMB_LI){ self.0 = (self.0 & 0xffffffffffe1ffff) | ((value as u64) & 0xf) << 17; }

    /// Gets Ambient light level
    pub fn get_AMB_LI(&self) -> std::result::Result<KOMBI_A1_AMB_LI, ()> { return KOMBI_A1_AMB_LI::try_from((self.0 >> 17 & 0xf) as u8) }
        
    /// Sets Activate RDK

    pub fn set_RDK_AKT(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffeffff) | ((value as u64) & 0x1) << 16; }

    /// Gets Activate RDK
    pub fn get_RDK_AKT(&self) -> bool { (self.0 >> 16 & 0x1) != 0 }
        
    /// Sets Interior lighting afterglow time. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: s)

    pub fn set_INLI_NLZ(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffffff00ff) | ((value as u64) & 0xff) << 8; }

    /// Gets Interior lighting afterglow time. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: s)
    pub fn get_INLI_NLZ(&self) -> u8 { (self.0 >> 8 & 0xff) as u8 }
        
    /// Sets Parking or fog light afterglow time (SWA). Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: s)

    pub fn set_ABL_NLZ(&mut self, value: u8){ self.0 = (self.0 & 0xffffffffffffff00) | ((value as u64) & 0xff) << 0; }

    /// Gets Parking or fog light afterglow time (SWA). Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: s)
    pub fn get_ABL_NLZ(&self) -> u8 { (self.0 >> 0 & 0xff) as u8 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_A2(pub u64);

impl KOMBI_A2 {

	/// Gets CAN ID of KOMBI_A2
	pub const fn get_canid() -> u16 { KOMBI_A2_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Daily circulation counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Tage)

    pub fn set_TAGE_ZAHL(&mut self, value: u16){ self.0 = (self.0 & 0x0000ffffffffffff) | ((value as u64) & 0xffff) << 48; }

    /// Gets Daily circulation counter. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Tage)
    pub fn get_TAGE_ZAHL(&self) -> u16 { (self.0 >> 48 & 0xffff) as u16 }
        
    /// Sets Day. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Tage)

    pub fn set_TAG(&mut self, value: u8){ self.0 = (self.0 & 0xffff00ffffffffff) | ((value as u64) & 0xff) << 40; }

    /// Gets Day. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Tage)
    pub fn get_TAG(&self) -> u8 { (self.0 >> 40 & 0xff) as u8 }
        
    /// Sets month. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Monate)

    pub fn set_MONAT(&mut self, value: u8){ self.0 = (self.0 & 0xffffff00ffffffff) | ((value as u64) & 0xff) << 32; }

    /// Gets month. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Monate)
    pub fn get_MONAT(&self) -> u8 { (self.0 >> 32 & 0xff) as u8 }
        
    /// Sets year. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Jahre)

    pub fn set_JAHR(&mut self, value: u8){ self.0 = (self.0 & 0xffffffff00ffffff) | ((value as u64) & 0xff) << 24; }

    /// Gets year. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Jahre)
    pub fn get_JAHR(&self) -> u8 { (self.0 >> 24 & 0xff) as u8 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_A5(pub u64);

impl KOMBI_A5 {

	/// Gets CAN ID of KOMBI_A5
	pub const fn get_canid() -> u16 { KOMBI_A5_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets status combination

    pub fn set_KI_STAT(&mut self, value: KOMBI_A5_KI_STAT){ self.0 = (self.0 & 0x00ffffffffffffff) | ((value as u64) & 0xff) << 56; }

    /// Gets status combination
    pub fn get_KI_STAT(&self) -> std::result::Result<KOMBI_A5_KI_STAT, ()> { return KOMBI_A5_KI_STAT::try_from((self.0 >> 56 & 0xff) as u8) }
        
    /// Sets Telephone End

    pub fn set_BUTTON_4_2(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Telephone End
    pub fn get_BUTTON_4_2(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Phone send

    pub fn set_BUTTON_4_1(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets Phone send
    pub fn get_BUTTON_4_1(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets key "-"

    pub fn set_BUTTON_3_2(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets key "-"
    pub fn get_BUTTON_3_2(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets "+" button

    pub fn set_BUTTON_3_1(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets "+" button
    pub fn get_BUTTON_3_1(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_2_2(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets reserves
    pub fn get_BUTTON_2_2(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_2_1(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets reserves
    pub fn get_BUTTON_2_1(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets Previous screen

    pub fn set_BUTTON_1_2(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets Previous screen
    pub fn get_BUTTON_1_2(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets Next screen

    pub fn set_BUTTON_1_1(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets Next screen
    pub fn get_BUTTON_1_1(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_8_2(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets reserves
    pub fn get_BUTTON_8_2(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_8_1(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets reserves
    pub fn get_BUTTON_8_1(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_7_2(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets reserves
    pub fn get_BUTTON_7_2(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_7_1(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets reserves
    pub fn get_BUTTON_7_1(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_6_2(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets reserves
    pub fn get_BUTTON_6_2(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_6_1(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets reserves
    pub fn get_BUTTON_6_1(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_5_2(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets reserves
    pub fn get_BUTTON_5_2(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_5_1(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets reserves
    pub fn get_BUTTON_5_1(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_4_2(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets reserves
    pub fn get_PTT_4_2(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_4_1(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets reserves
    pub fn get_PTT_4_1(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_3_2(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets reserves
    pub fn get_PTT_3_2(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_3_1(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets reserves
    pub fn get_PTT_3_1(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_2_2(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets reserves
    pub fn get_PTT_2_2(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_2_1(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets reserves
    pub fn get_PTT_2_1(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets Deactivate Linguatronic

    pub fn set_PTT_1_2(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets Deactivate Linguatronic
    pub fn get_PTT_1_2(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets Activate Linguatronic

    pub fn set_PTT_1_1(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets Activate Linguatronic
    pub fn get_PTT_1_1(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_A6(pub u64);

impl KOMBI_A6 {

	/// Gets CAN ID of KOMBI_A6
	pub const fn get_canid() -> u16 { KOMBI_A6_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets KOMBI key ID. Conversion formula (To raw from real): y=(x-0.0)/1.00

    pub fn set_SCHLUE_ID_KI(&mut self, value: u32){ self.0 = (self.0 & 0x00000000ffffffff) | ((value as u64) & 0xffffffff) << 32; }

    /// Gets KOMBI key ID. Conversion formula (To real from raw): y=(1.00x)+0.0
    pub fn get_SCHLUE_ID_KI(&self) -> u32 { (self.0 >> 32 & 0xffffffff) as u32 }
        
    /// Sets transmitted mileage from the KOMBI. Conversion formula (To raw from real): y=(x-0.0)/0.10 (Unit: km)

    pub fn set_KM_KI(&mut self, value: u32){ self.0 = (self.0 & 0xffffffff000000ff) | ((value as u64) & 0xffffff) << 8; }

    /// Gets transmitted mileage from the KOMBI. Conversion formula (To real from raw): y=(0.10x)+0.0 (Unit: km)
    pub fn get_KM_KI(&self) -> u32 { (self.0 >> 8 & 0xffffff) as u32 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_A7(pub u64);

impl KOMBI_A7 {

	/// Gets CAN ID of KOMBI_A7
	pub const fn get_canid() -> u16 { KOMBI_A7_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Display dimming. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %)

    pub fn set_DISP_DIMM(&mut self, value: u8){ self.0 = (self.0 & 0x00ffffffffffffff) | ((value as u64) & 0xff) << 56; }

    /// Gets Display dimming. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %)
    pub fn get_DISP_DIMM(&self) -> u8 { (self.0 >> 56 & 0xff) as u8 }
        
    /// Sets trunk lid limitation on

    pub fn set_HD_BEGRENZ(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets trunk lid limitation on
    pub fn get_HD_BEGRENZ(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets Kombi is capable of added value

    pub fn set_KOMBI_MW_OK(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets Kombi is capable of added value
    pub fn get_KOMBI_MW_OK(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_A8(pub u64);

impl KOMBI_A8 {

	/// Gets CAN ID of KOMBI_A8
	pub const fn get_canid() -> u16 { KOMBI_A8_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets status combination

    pub fn set_KI_STAT_MSS(&mut self, value: KOMBI_A8_KI_STAT_MSS){ self.0 = (self.0 & 0x00ffffffffffffff) | ((value as u64) & 0xff) << 56; }

    /// Gets status combination
    pub fn get_KI_STAT_MSS(&self) -> std::result::Result<KOMBI_A8_KI_STAT_MSS, ()> { return KOMBI_A8_KI_STAT_MSS::try_from((self.0 >> 56 & 0xff) as u8) }
        
    /// Sets Telephone End

    pub fn set_BUTTON_4_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets Telephone End
    pub fn get_BUTTON_4_2_MSS(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets Phone send

    pub fn set_BUTTON_4_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets Phone send
    pub fn get_BUTTON_4_1_MSS(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets key "-"

    pub fn set_BUTTON_3_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets key "-"
    pub fn get_BUTTON_3_2_MSS(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets "+" button

    pub fn set_BUTTON_3_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets "+" button
    pub fn get_BUTTON_3_1_MSS(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_2_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets reserves
    pub fn get_BUTTON_2_2_MSS(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_2_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets reserves
    pub fn get_BUTTON_2_1_MSS(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets Previous screen

    pub fn set_BUTTON_1_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets Previous screen
    pub fn get_BUTTON_1_2_MSS(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets Next screen

    pub fn set_BUTTON_1_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets Next screen
    pub fn get_BUTTON_1_1_MSS(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_8_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets reserves
    pub fn get_BUTTON_8_2_MSS(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_8_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets reserves
    pub fn get_BUTTON_8_1_MSS(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_7_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets reserves
    pub fn get_BUTTON_7_2_MSS(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_7_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets reserves
    pub fn get_BUTTON_7_1_MSS(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_6_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets reserves
    pub fn get_BUTTON_6_2_MSS(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_6_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets reserves
    pub fn get_BUTTON_6_1_MSS(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_5_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets reserves
    pub fn get_BUTTON_5_2_MSS(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_BUTTON_5_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets reserves
    pub fn get_BUTTON_5_1_MSS(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_4_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets reserves
    pub fn get_PTT_4_2_MSS(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_4_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets reserves
    pub fn get_PTT_4_1_MSS(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_3_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets reserves
    pub fn get_PTT_3_2_MSS(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_3_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets reserves
    pub fn get_PTT_3_1_MSS(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_2_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets reserves
    pub fn get_PTT_2_2_MSS(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets reserves

    pub fn set_PTT_2_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets reserves
    pub fn get_PTT_2_1_MSS(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets Deactivate Linguatronic

    pub fn set_PTT_1_2_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets Deactivate Linguatronic
    pub fn get_PTT_1_2_MSS(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets Activate Linguatronic

    pub fn set_PTT_1_1_MSS(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets Activate Linguatronic
    pub fn get_PTT_1_1_MSS(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct KOMBI_A9(pub u64);

impl KOMBI_A9 {

	/// Gets CAN ID of KOMBI_A9
	pub const fn get_canid() -> u16 { KOMBI_A9_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets IPS update request

    pub fn set_KOMBI_IPS_UPD(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets IPS update request
    pub fn get_KOMBI_IPS_UPD(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets Icon confirmation

    pub fn set_KOMBI_IPS_INDICATION(&mut self, value: KOMBI_A9_KOMBI_IPS_INDICATION){ self.0 = (self.0 & 0x8fffffffffffffff) | ((value as u64) & 0x7) << 60; }

    /// Gets Icon confirmation
    pub fn get_KOMBI_IPS_INDICATION(&self) -> std::result::Result<KOMBI_A9_KOMBI_IPS_INDICATION, ()> { return KOMBI_A9_KOMBI_IPS_INDICATION::try_from((self.0 >> 60 & 0x7) as u8) }
        
    /// Sets IPS configuration

    pub fn set_KOMBI_IPS_CONF(&mut self, value: KOMBI_A9_KOMBI_IPS_CONF){ self.0 = (self.0 & 0xf0ffffffffffffff) | ((value as u64) & 0xf) << 56; }

    /// Gets IPS configuration
    pub fn get_KOMBI_IPS_CONF(&self) -> std::result::Result<KOMBI_A9_KOMBI_IPS_CONF, ()> { return KOMBI_A9_KOMBI_IPS_CONF::try_from((self.0 >> 56 & 0xf) as u8) }
        
}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default)]
pub struct SD_RS_KOMBI(pub u64);

impl SD_RS_KOMBI {

	/// Gets CAN ID of SD_RS_KOMBI
	pub const fn get_canid() -> u16 { SD_RS_KOMBI_CAN_ID }
	pub fn new(data: u64) -> Self { Self(data) }
    /// Sets Identification for > 8 bytes

    pub fn set_KOMBI_KENN(&mut self, value: bool){ self.0 = (self.0 & 0x7fffffffffffffff) | ((value as u64) & 0x1) << 63; }

    /// Gets Identification for > 8 bytes
    pub fn get_KOMBI_KENN(&self) -> bool { (self.0 >> 63 & 0x1) != 0 }
        
    /// Sets error vector 07h

    pub fn set_KOMBI_FV07(&mut self, value: bool){ self.0 = (self.0 & 0xbfffffffffffffff) | ((value as u64) & 0x1) << 62; }

    /// Gets error vector 07h
    pub fn get_KOMBI_FV07(&self) -> bool { (self.0 >> 62 & 0x1) != 0 }
        
    /// Sets error vector 06h

    pub fn set_KOMBI_FV06(&mut self, value: bool){ self.0 = (self.0 & 0xdfffffffffffffff) | ((value as u64) & 0x1) << 61; }

    /// Gets error vector 06h
    pub fn get_KOMBI_FV06(&self) -> bool { (self.0 >> 61 & 0x1) != 0 }
        
    /// Sets error vector 05h

    pub fn set_KOMBI_FV05(&mut self, value: bool){ self.0 = (self.0 & 0xefffffffffffffff) | ((value as u64) & 0x1) << 60; }

    /// Gets error vector 05h
    pub fn get_KOMBI_FV05(&self) -> bool { (self.0 >> 60 & 0x1) != 0 }
        
    /// Sets error vector 04h

    pub fn set_KOMBI_FV04(&mut self, value: bool){ self.0 = (self.0 & 0xf7ffffffffffffff) | ((value as u64) & 0x1) << 59; }

    /// Gets error vector 04h
    pub fn get_KOMBI_FV04(&self) -> bool { (self.0 >> 59 & 0x1) != 0 }
        
    /// Sets error vector 03h

    pub fn set_KOMBI_FV03(&mut self, value: bool){ self.0 = (self.0 & 0xfbffffffffffffff) | ((value as u64) & 0x1) << 58; }

    /// Gets error vector 03h
    pub fn get_KOMBI_FV03(&self) -> bool { (self.0 >> 58 & 0x1) != 0 }
        
    /// Sets error vector 02h

    pub fn set_KOMBI_FV02(&mut self, value: bool){ self.0 = (self.0 & 0xfdffffffffffffff) | ((value as u64) & 0x1) << 57; }

    /// Gets error vector 02h
    pub fn get_KOMBI_FV02(&self) -> bool { (self.0 >> 57 & 0x1) != 0 }
        
    /// Sets error vector 01h

    pub fn set_KOMBI_FV01(&mut self, value: bool){ self.0 = (self.0 & 0xfeffffffffffffff) | ((value as u64) & 0x1) << 56; }

    /// Gets error vector 01h
    pub fn get_KOMBI_FV01(&self) -> bool { (self.0 >> 56 & 0x1) != 0 }
        
    /// Sets error vector 0Fh

    pub fn set_KOMBI_FV0F(&mut self, value: bool){ self.0 = (self.0 & 0xff7fffffffffffff) | ((value as u64) & 0x1) << 55; }

    /// Gets error vector 0Fh
    pub fn get_KOMBI_FV0F(&self) -> bool { (self.0 >> 55 & 0x1) != 0 }
        
    /// Sets error vector 0Eh

    pub fn set_KOMBI_FV0E(&mut self, value: bool){ self.0 = (self.0 & 0xffbfffffffffffff) | ((value as u64) & 0x1) << 54; }

    /// Gets error vector 0Eh
    pub fn get_KOMBI_FV0E(&self) -> bool { (self.0 >> 54 & 0x1) != 0 }
        
    /// Sets error vector 0Dh

    pub fn set_KOMBI_FV0D(&mut self, value: bool){ self.0 = (self.0 & 0xffdfffffffffffff) | ((value as u64) & 0x1) << 53; }

    /// Gets error vector 0Dh
    pub fn get_KOMBI_FV0D(&self) -> bool { (self.0 >> 53 & 0x1) != 0 }
        
    /// Sets error vector 0Ch

    pub fn set_KOMBI_FV0C(&mut self, value: bool){ self.0 = (self.0 & 0xffefffffffffffff) | ((value as u64) & 0x1) << 52; }

    /// Gets error vector 0Ch
    pub fn get_KOMBI_FV0C(&self) -> bool { (self.0 >> 52 & 0x1) != 0 }
        
    /// Sets error vector 0Bh

    pub fn set_KOMBI_FV0B(&mut self, value: bool){ self.0 = (self.0 & 0xfff7ffffffffffff) | ((value as u64) & 0x1) << 51; }

    /// Gets error vector 0Bh
    pub fn get_KOMBI_FV0B(&self) -> bool { (self.0 >> 51 & 0x1) != 0 }
        
    /// Sets error vector 0Ah

    pub fn set_KOMBI_FV0A(&mut self, value: bool){ self.0 = (self.0 & 0xfffbffffffffffff) | ((value as u64) & 0x1) << 50; }

    /// Gets error vector 0Ah
    pub fn get_KOMBI_FV0A(&self) -> bool { (self.0 >> 50 & 0x1) != 0 }
        
    /// Sets error vector 09h

    pub fn set_KOMBI_FV09(&mut self, value: bool){ self.0 = (self.0 & 0xfffdffffffffffff) | ((value as u64) & 0x1) << 49; }

    /// Gets error vector 09h
    pub fn get_KOMBI_FV09(&self) -> bool { (self.0 >> 49 & 0x1) != 0 }
        
    /// Sets error vector 08h

    pub fn set_KOMBI_FV08(&mut self, value: bool){ self.0 = (self.0 & 0xfffeffffffffffff) | ((value as u64) & 0x1) << 48; }

    /// Gets error vector 08h
    pub fn get_KOMBI_FV08(&self) -> bool { (self.0 >> 48 & 0x1) != 0 }
        
    /// Sets error vector 17h

    pub fn set_KOMBI_FV17(&mut self, value: bool){ self.0 = (self.0 & 0xffff7fffffffffff) | ((value as u64) & 0x1) << 47; }

    /// Gets error vector 17h
    pub fn get_KOMBI_FV17(&self) -> bool { (self.0 >> 47 & 0x1) != 0 }
        
    /// Sets error vector 16h

    pub fn set_KOMBI_FV16(&mut self, value: bool){ self.0 = (self.0 & 0xffffbfffffffffff) | ((value as u64) & 0x1) << 46; }

    /// Gets error vector 16h
    pub fn get_KOMBI_FV16(&self) -> bool { (self.0 >> 46 & 0x1) != 0 }
        
    /// Sets error vector 15h

    pub fn set_KOMBI_FV15(&mut self, value: bool){ self.0 = (self.0 & 0xffffdfffffffffff) | ((value as u64) & 0x1) << 45; }

    /// Gets error vector 15h
    pub fn get_KOMBI_FV15(&self) -> bool { (self.0 >> 45 & 0x1) != 0 }
        
    /// Sets error vector 14h

    pub fn set_KOMBI_FV14(&mut self, value: bool){ self.0 = (self.0 & 0xffffefffffffffff) | ((value as u64) & 0x1) << 44; }

    /// Gets error vector 14h
    pub fn get_KOMBI_FV14(&self) -> bool { (self.0 >> 44 & 0x1) != 0 }
        
    /// Sets error vector 13h

    pub fn set_KOMBI_FV13(&mut self, value: bool){ self.0 = (self.0 & 0xfffff7ffffffffff) | ((value as u64) & 0x1) << 43; }

    /// Gets error vector 13h
    pub fn get_KOMBI_FV13(&self) -> bool { (self.0 >> 43 & 0x1) != 0 }
        
    /// Sets error vector 12h

    pub fn set_KOMBI_FV12(&mut self, value: bool){ self.0 = (self.0 & 0xfffffbffffffffff) | ((value as u64) & 0x1) << 42; }

    /// Gets error vector 12h
    pub fn get_KOMBI_FV12(&self) -> bool { (self.0 >> 42 & 0x1) != 0 }
        
    /// Sets error vector 11h

    pub fn set_KOMBI_FV11(&mut self, value: bool){ self.0 = (self.0 & 0xfffffdffffffffff) | ((value as u64) & 0x1) << 41; }

    /// Gets error vector 11h
    pub fn get_KOMBI_FV11(&self) -> bool { (self.0 >> 41 & 0x1) != 0 }
        
    /// Sets error vector 10h

    pub fn set_KOMBI_FV10(&mut self, value: bool){ self.0 = (self.0 & 0xfffffeffffffffff) | ((value as u64) & 0x1) << 40; }

    /// Gets error vector 10h
    pub fn get_KOMBI_FV10(&self) -> bool { (self.0 >> 40 & 0x1) != 0 }
        
    /// Sets error vector 1Fh

    pub fn set_KOMBI_FV1F(&mut self, value: bool){ self.0 = (self.0 & 0xffffff7fffffffff) | ((value as u64) & 0x1) << 39; }

    /// Gets error vector 1Fh
    pub fn get_KOMBI_FV1F(&self) -> bool { (self.0 >> 39 & 0x1) != 0 }
        
    /// Sets error vector 1Eh

    pub fn set_KOMBI_FV1E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffbfffffffff) | ((value as u64) & 0x1) << 38; }

    /// Gets error vector 1Eh
    pub fn get_KOMBI_FV1E(&self) -> bool { (self.0 >> 38 & 0x1) != 0 }
        
    /// Sets error vector 1Dh

    pub fn set_KOMBI_FV1D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffdfffffffff) | ((value as u64) & 0x1) << 37; }

    /// Gets error vector 1Dh
    pub fn get_KOMBI_FV1D(&self) -> bool { (self.0 >> 37 & 0x1) != 0 }
        
    /// Sets Error vector 1Ch

    pub fn set_KOMBI_FV1C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffefffffffff) | ((value as u64) & 0x1) << 36; }

    /// Gets Error vector 1Ch
    pub fn get_KOMBI_FV1C(&self) -> bool { (self.0 >> 36 & 0x1) != 0 }
        
    /// Sets error vector 1Bh

    pub fn set_KOMBI_FV1B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffff7ffffffff) | ((value as u64) & 0x1) << 35; }

    /// Gets error vector 1Bh
    pub fn get_KOMBI_FV1B(&self) -> bool { (self.0 >> 35 & 0x1) != 0 }
        
    /// Sets Error vector 1Ah

    pub fn set_KOMBI_FV1A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffbffffffff) | ((value as u64) & 0x1) << 34; }

    /// Gets Error vector 1Ah
    pub fn get_KOMBI_FV1A(&self) -> bool { (self.0 >> 34 & 0x1) != 0 }
        
    /// Sets error vector 19h

    pub fn set_KOMBI_FV19(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffdffffffff) | ((value as u64) & 0x1) << 33; }

    /// Gets error vector 19h
    pub fn get_KOMBI_FV19(&self) -> bool { (self.0 >> 33 & 0x1) != 0 }
        
    /// Sets error vector 18h

    pub fn set_KOMBI_FV18(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffeffffffff) | ((value as u64) & 0x1) << 32; }

    /// Gets error vector 18h
    pub fn get_KOMBI_FV18(&self) -> bool { (self.0 >> 32 & 0x1) != 0 }
        
    /// Sets error vector 27h

    pub fn set_KOMBI_FV27(&mut self, value: bool){ self.0 = (self.0 & 0xffffffff7fffffff) | ((value as u64) & 0x1) << 31; }

    /// Gets error vector 27h
    pub fn get_KOMBI_FV27(&self) -> bool { (self.0 >> 31 & 0x1) != 0 }
        
    /// Sets error vector 26h

    pub fn set_KOMBI_FV26(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffbfffffff) | ((value as u64) & 0x1) << 30; }

    /// Gets error vector 26h
    pub fn get_KOMBI_FV26(&self) -> bool { (self.0 >> 30 & 0x1) != 0 }
        
    /// Sets error vector 25h

    pub fn set_KOMBI_FV25(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffdfffffff) | ((value as u64) & 0x1) << 29; }

    /// Gets error vector 25h
    pub fn get_KOMBI_FV25(&self) -> bool { (self.0 >> 29 & 0x1) != 0 }
        
    /// Sets error vector 24h

    pub fn set_KOMBI_FV24(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffefffffff) | ((value as u64) & 0x1) << 28; }

    /// Gets error vector 24h
    pub fn get_KOMBI_FV24(&self) -> bool { (self.0 >> 28 & 0x1) != 0 }
        
    /// Sets error vector 23h

    pub fn set_KOMBI_FV23(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffff7ffffff) | ((value as u64) & 0x1) << 27; }

    /// Gets error vector 23h
    pub fn get_KOMBI_FV23(&self) -> bool { (self.0 >> 27 & 0x1) != 0 }
        
    /// Sets error vector 22h

    pub fn set_KOMBI_FV22(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffbffffff) | ((value as u64) & 0x1) << 26; }

    /// Gets error vector 22h
    pub fn get_KOMBI_FV22(&self) -> bool { (self.0 >> 26 & 0x1) != 0 }
        
    /// Sets error vector 21h

    pub fn set_KOMBI_FV21(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffdffffff) | ((value as u64) & 0x1) << 25; }

    /// Gets error vector 21h
    pub fn get_KOMBI_FV21(&self) -> bool { (self.0 >> 25 & 0x1) != 0 }
        
    /// Sets error vector 20h

    pub fn set_KOMBI_FV20(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffeffffff) | ((value as u64) & 0x1) << 24; }

    /// Gets error vector 20h
    pub fn get_KOMBI_FV20(&self) -> bool { (self.0 >> 24 & 0x1) != 0 }
        
    /// Sets error vector 2Fh

    pub fn set_KOMBI_FV2F(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffff7fffff) | ((value as u64) & 0x1) << 23; }

    /// Gets error vector 2Fh
    pub fn get_KOMBI_FV2F(&self) -> bool { (self.0 >> 23 & 0x1) != 0 }
        
    /// Sets error vector 2Eh

    pub fn set_KOMBI_FV2E(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffbfffff) | ((value as u64) & 0x1) << 22; }

    /// Gets error vector 2Eh
    pub fn get_KOMBI_FV2E(&self) -> bool { (self.0 >> 22 & 0x1) != 0 }
        
    /// Sets error vector 2Dh

    pub fn set_KOMBI_FV2D(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffdfffff) | ((value as u64) & 0x1) << 21; }

    /// Gets error vector 2Dh
    pub fn get_KOMBI_FV2D(&self) -> bool { (self.0 >> 21 & 0x1) != 0 }
        
    /// Sets error vector 2Ch

    pub fn set_KOMBI_FV2C(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffefffff) | ((value as u64) & 0x1) << 20; }

    /// Gets error vector 2Ch
    pub fn get_KOMBI_FV2C(&self) -> bool { (self.0 >> 20 & 0x1) != 0 }
        
    /// Sets error vector 2Bh

    pub fn set_KOMBI_FV2B(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffff7ffff) | ((value as u64) & 0x1) << 19; }

    /// Gets error vector 2Bh
    pub fn get_KOMBI_FV2B(&self) -> bool { (self.0 >> 19 & 0x1) != 0 }
        
    /// Sets Error vector 2Ah

    pub fn set_KOMBI_FV2A(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffbffff) | ((value as u64) & 0x1) << 18; }

    /// Gets Error vector 2Ah
    pub fn get_KOMBI_FV2A(&self) -> bool { (self.0 >> 18 & 0x1) != 0 }
        
    /// Sets error vector 29h

    pub fn set_KOMBI_FV29(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffdffff) | ((value as u64) & 0x1) << 17; }

    /// Gets error vector 29h
    pub fn get_KOMBI_FV29(&self) -> bool { (self.0 >> 17 & 0x1) != 0 }
        
    /// Sets error vector 28h

    pub fn set_KOMBI_FV28(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffeffff) | ((value as u64) & 0x1) << 16; }

    /// Gets error vector 28h
    pub fn get_KOMBI_FV28(&self) -> bool { (self.0 >> 16 & 0x1) != 0 }
        
    /// Sets error vector 37h

    pub fn set_KOMBI_FV37(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffff7fff) | ((value as u64) & 0x1) << 15; }

    /// Gets error vector 37h
    pub fn get_KOMBI_FV37(&self) -> bool { (self.0 >> 15 & 0x1) != 0 }
        
    /// Sets error vector 36h

    pub fn set_KOMBI_FV36(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffbfff) | ((value as u64) & 0x1) << 14; }

    /// Gets error vector 36h
    pub fn get_KOMBI_FV36(&self) -> bool { (self.0 >> 14 & 0x1) != 0 }
        
    /// Sets error vector 35h

    pub fn set_KOMBI_FV35(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffdfff) | ((value as u64) & 0x1) << 13; }

    /// Gets error vector 35h
    pub fn get_KOMBI_FV35(&self) -> bool { (self.0 >> 13 & 0x1) != 0 }
        
    /// Sets error vector 34h

    pub fn set_KOMBI_FV34(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffefff) | ((value as u64) & 0x1) << 12; }

    /// Gets error vector 34h
    pub fn get_KOMBI_FV34(&self) -> bool { (self.0 >> 12 & 0x1) != 0 }
        
    /// Sets error vector 33h

    pub fn set_KOMBI_FV33(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffff7ff) | ((value as u64) & 0x1) << 11; }

    /// Gets error vector 33h
    pub fn get_KOMBI_FV33(&self) -> bool { (self.0 >> 11 & 0x1) != 0 }
        
    /// Sets error vector 32h

    pub fn set_KOMBI_FV32(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffbff) | ((value as u64) & 0x1) << 10; }

    /// Gets error vector 32h
    pub fn get_KOMBI_FV32(&self) -> bool { (self.0 >> 10 & 0x1) != 0 }
        
    /// Sets error vector 31h

    pub fn set_KOMBI_FV31(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffdff) | ((value as u64) & 0x1) << 9; }

    /// Gets error vector 31h
    pub fn get_KOMBI_FV31(&self) -> bool { (self.0 >> 9 & 0x1) != 0 }
        
    /// Sets error vector 30h

    pub fn set_KOMBI_FV30(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffeff) | ((value as u64) & 0x1) << 8; }

    /// Gets error vector 30h
    pub fn get_KOMBI_FV30(&self) -> bool { (self.0 >> 8 & 0x1) != 0 }
        
    /// Sets state variable 08h

    pub fn set_KOMBI_PGV08(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffff7f) | ((value as u64) & 0x1) << 7; }

    /// Gets state variable 08h
    pub fn get_KOMBI_PGV08(&self) -> bool { (self.0 >> 7 & 0x1) != 0 }
        
    /// Sets state variable 07h

    pub fn set_KOMBI_PGV07(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffbf) | ((value as u64) & 0x1) << 6; }

    /// Gets state variable 07h
    pub fn get_KOMBI_PGV07(&self) -> bool { (self.0 >> 6 & 0x1) != 0 }
        
    /// Sets state variable 06h

    pub fn set_KOMBI_PGV06(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffdf) | ((value as u64) & 0x1) << 5; }

    /// Gets state variable 06h
    pub fn get_KOMBI_PGV06(&self) -> bool { (self.0 >> 5 & 0x1) != 0 }
        
    /// Sets state variable 05h

    pub fn set_KOMBI_PGV05(&mut self, value: bool){ self.0 = (self.0 & 0xffffffffffffffef) | ((value as u64) & 0x1) << 4; }

    /// Gets state variable 05h
    pub fn get_KOMBI_PGV05(&self) -> bool { (self.0 >> 4 & 0x1) != 0 }
        
    /// Sets state variable 04h

    pub fn set_KOMBI_PGV04(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffff7) | ((value as u64) & 0x1) << 3; }

    /// Gets state variable 04h
    pub fn get_KOMBI_PGV04(&self) -> bool { (self.0 >> 3 & 0x1) != 0 }
        
    /// Sets state variable 03h

    pub fn set_KOMBI_PGV03(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffb) | ((value as u64) & 0x1) << 2; }

    /// Gets state variable 03h
    pub fn get_KOMBI_PGV03(&self) -> bool { (self.0 >> 2 & 0x1) != 0 }
        
    /// Sets state variable 02h

    pub fn set_KOMBI_PGV02(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffd) | ((value as u64) & 0x1) << 1; }

    /// Gets state variable 02h
    pub fn get_KOMBI_PGV02(&self) -> bool { (self.0 >> 1 & 0x1) != 0 }
        
    /// Sets state variable 01h

    pub fn set_KOMBI_PGV01(&mut self, value: bool){ self.0 = (self.0 & 0xfffffffffffffffe) | ((value as u64) & 0x1) << 0; }

    /// Gets state variable 01h
    pub fn get_KOMBI_PGV01(&self) -> bool { (self.0 >> 0 & 0x1) != 0 }
        
}