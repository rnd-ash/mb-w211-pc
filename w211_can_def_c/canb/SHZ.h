
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'SHZ'
*/

#ifndef __ECU_SHZ_H_
#define __ECU_SHZ_H_

#include <stdint.h>
    
#define SHZ_A1_CAN_ID 0x0210
#define SD_RS_SHZ_CAN_ID 0x07DB

/** Front left seat heating status */
enum class SHZ_A1_SH_VL_ST {
	SHZ_ST_AUS = 0, // Seat heating is switched off
	SHZ_STEP1 = 1, // Seat heating level 1 is switched on
	SHZ_STEP2 = 2, // Stage 2 seat heating is switched on
	SHZ_STEP3 = 3, // Stage 3 seat heating is switched on
};

/** Status of seat ventilation, front left */
enum class SHZ_A1_SBLFT_VL_ST {
	SBL_ST_AUS = 0, // Seat ventilation is switched off
	SBL_STEP1 = 1, // Stage 1 seat ventilation is switched on
	SBL_STEP2 = 2, // Stage 2 seat ventilation is switched on
	SBL_STEP3 = 3, // Stage 3 seat ventilation is switched on
};

/** Status of seat heating, front right */
enum class SHZ_A1_SH_VR_ST {
	SHZ_ST_AUS = 0, // Seat heating is switched off
	SHZ_STEP1 = 1, // Seat heating level 1 is switched on
	SHZ_STEP2 = 2, // Stage 2 seat heating is switched on
	SHZ_STEP3 = 3, // Stage 3 seat heating is switched on
};

/** Status of seat ventilation, front right */
enum class SHZ_A1_SBLFT_VR_ST {
	SBL_ST_AUS = 0, // Seat ventilation is switched off
	SBL_STEP1 = 1, // Stage 1 seat ventilation is switched on
	SBL_STEP2 = 2, // Stage 2 seat ventilation is switched on
	SBL_STEP3 = 3, // Stage 3 seat ventilation is switched on
};

/** Rear left seat heating status */
enum class SHZ_A1_SH_HL_ST {
	SHZ_ST_AUS = 0, // Seat heating is switched off
	SHZ_STEP1 = 1, // Seat heating level 1 is switched on
	SHZ_STEP2 = 2, // Stage 2 seat heating is switched on
	SHZ_STEP3 = 3, // Stage 3 seat heating is switched on
};

/** Rear right seat heating status */
enum class SHZ_A1_SH_HR_ST {
	SHZ_ST_AUS = 0, // Seat heating is switched off
	SHZ_STEP1 = 1, // Seat heating level 1 is switched on
	SHZ_STEP2 = 2, // Stage 2 seat heating is switched on
	SHZ_STEP3 = 3, // Stage 3 seat heating is switched on
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SHZ_A1 */
	uint32_t get_canid(){ return SHZ_A1_CAN_ID; }
    /** Sets Heated/ventilated seats switched off due to undervoltage */
    void set_SHB_VL_USPG(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Heated/ventilated seats switched off due to undervoltage */
    bool get_SHB_VL_USPG() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Front left seat heating status */
    void set_SH_VL_ST(SHZ_A1_SH_VL_ST value){ raw = (raw & 0xe7ffffffffffffff) | ((uint64_t)value & 0x3) << 59; }

    /** Gets Front left seat heating status */
    SHZ_A1_SH_VL_ST get_SH_VL_ST() const { return (SHZ_A1_SH_VL_ST)(raw >> 59 & 0x3); }
        
    /** Sets Status of seat ventilation, front left */
    void set_SBLFT_VL_ST(SHZ_A1_SBLFT_VL_ST value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Status of seat ventilation, front left */
    SHZ_A1_SBLFT_VL_ST get_SBLFT_VL_ST() const { return (SHZ_A1_SBLFT_VL_ST)(raw >> 56 & 0x3); }
        
    /** Sets Heated/ventilated seats switched off due to undervoltage */
    void set_SHB_VR_USPG(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Heated/ventilated seats switched off due to undervoltage */
    bool get_SHB_VR_USPG() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Status of seat heating, front right */
    void set_SH_VR_ST(SHZ_A1_SH_VR_ST value){ raw = (raw & 0xffe7ffffffffffff) | ((uint64_t)value & 0x3) << 51; }

    /** Gets Status of seat heating, front right */
    SHZ_A1_SH_VR_ST get_SH_VR_ST() const { return (SHZ_A1_SH_VR_ST)(raw >> 51 & 0x3); }
        
    /** Sets Status of seat ventilation, front right */
    void set_SBLFT_VR_ST(SHZ_A1_SBLFT_VR_ST value){ raw = (raw & 0xfffcffffffffffff) | ((uint64_t)value & 0x3) << 48; }

    /** Gets Status of seat ventilation, front right */
    SHZ_A1_SBLFT_VR_ST get_SBLFT_VR_ST() const { return (SHZ_A1_SBLFT_VR_ST)(raw >> 48 & 0x3); }
        
    /** Sets seat heater switched off due to undervoltage */
    void set_SH_HL_USPG(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets seat heater switched off due to undervoltage */
    bool get_SH_HL_USPG() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Rear left seat heating status */
    void set_SH_HL_ST(SHZ_A1_SH_HL_ST value){ raw = (raw & 0xffffe7ffffffffff) | ((uint64_t)value & 0x3) << 43; }

    /** Gets Rear left seat heating status */
    SHZ_A1_SH_HL_ST get_SH_HL_ST() const { return (SHZ_A1_SH_HL_ST)(raw >> 43 & 0x3); }
        
    /** Sets seat heater switched off due to undervoltage */
    void set_SH_HR_USPG(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets seat heater switched off due to undervoltage */
    bool get_SH_HR_USPG() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Rear right seat heating status */
    void set_SH_HR_ST(SHZ_A1_SH_HR_ST value){ raw = (raw & 0xffffffe7ffffffff) | ((uint64_t)value & 0x3) << 35; }

    /** Gets Rear right seat heating status */
    SHZ_A1_SH_HR_ST get_SH_HR_ST() const { return (SHZ_A1_SH_HR_ST)(raw >> 35 & 0x3); }
        
} SHZ_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SD_RS_SHZ */
	uint32_t get_canid(){ return SD_RS_SHZ_CAN_ID; }
    /** Sets Reserved for vector format designation BR 211 */
    void set_SHZ_RES(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Reserved for vector format designation BR 211 */
    bool get_SHZ_RES() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets process variable 07h */
    void set_SHZ_PG07(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets process variable 07h */
    bool get_SHZ_PG07() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets process variable 06h */
    void set_SHZ_PG06(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets process variable 06h */
    bool get_SHZ_PG06() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets process variable 05h */
    void set_SHZ_PG05(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets process variable 05h */
    bool get_SHZ_PG05() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets process variable 04h */
    void set_SHZ_PG04(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets process variable 04h */
    bool get_SHZ_PG04() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets process variable 03h */
    void set_SHZ_PG03(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets process variable 03h */
    bool get_SHZ_PG03() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets process variable 02h */
    void set_SHZ_PG02(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets process variable 02h */
    bool get_SHZ_PG02() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets process variable 01h */
    void set_SHZ_PG01(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets process variable 01h */
    bool get_SHZ_PG01() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Process variable 0Fh */
    void set_SHZ_PG0F(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Process variable 0Fh */
    bool get_SHZ_PG0F() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets process variable 0Eh */
    void set_SHZ_PG0E(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets process variable 0Eh */
    bool get_SHZ_PG0E() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets process variable 0Dh */
    void set_SHZ_PG0D(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets process variable 0Dh */
    bool get_SHZ_PG0D() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets process variable 0Ch */
    void set_SHZ_PG0C(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets process variable 0Ch */
    bool get_SHZ_PG0C() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets process variable 0Bh */
    void set_SHZ_PG0B(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets process variable 0Bh */
    bool get_SHZ_PG0B() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets process variable 0Ah */
    void set_SHZ_PG0A(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets process variable 0Ah */
    bool get_SHZ_PG0A() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets process variable 09h */
    void set_SHZ_PG09(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets process variable 09h */
    bool get_SHZ_PG09() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets process variable 08h */
    void set_SHZ_PG08(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets process variable 08h */
    bool get_SHZ_PG08() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets process variable 17h */
    void set_SHZ_PG17(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets process variable 17h */
    bool get_SHZ_PG17() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets process variable 16h */
    void set_SHZ_PG16(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets process variable 16h */
    bool get_SHZ_PG16() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets process variable 15h */
    void set_SHZ_PG15(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets process variable 15h */
    bool get_SHZ_PG15() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets process variable 14h */
    void set_SHZ_PG14(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets process variable 14h */
    bool get_SHZ_PG14() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets process variable 13h */
    void set_SHZ_PG13(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets process variable 13h */
    bool get_SHZ_PG13() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets process variable 12h */
    void set_SHZ_PG12(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets process variable 12h */
    bool get_SHZ_PG12() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets process variable 11h */
    void set_SHZ_PG11(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets process variable 11h */
    bool get_SHZ_PG11() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets process variable 10h */
    void set_SHZ_PG10(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets process variable 10h */
    bool get_SHZ_PG10() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets process variable 1Fh */
    void set_SHZ_PG1F(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets process variable 1Fh */
    bool get_SHZ_PG1F() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets process variable 1Eh */
    void set_SHZ_PG1E(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets process variable 1Eh */
    bool get_SHZ_PG1E() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets process variable 1Dh */
    void set_SHZ_PG1D(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets process variable 1Dh */
    bool get_SHZ_PG1D() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets process size 1Ch */
    void set_SHZ_PG1C(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets process size 1Ch */
    bool get_SHZ_PG1C() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets process variable 1Bh */
    void set_SHZ_PG1B(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets process variable 1Bh */
    bool get_SHZ_PG1B() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets process variable 1Ah */
    void set_SHZ_PG1A(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets process variable 1Ah */
    bool get_SHZ_PG1A() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets process variable 19h */
    void set_SHZ_PG19(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets process variable 19h */
    bool get_SHZ_PG19() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets process size 18h */
    void set_SHZ_PG18(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets process size 18h */
    bool get_SHZ_PG18() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets process variable 27h */
    void set_SHZ_PG27(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets process variable 27h */
    bool get_SHZ_PG27() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets process variable 26h */
    void set_SHZ_PG26(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets process variable 26h */
    bool get_SHZ_PG26() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets process variable 25h */
    void set_SHZ_PG25(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets process variable 25h */
    bool get_SHZ_PG25() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets process variable 24h */
    void set_SHZ_PG24(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets process variable 24h */
    bool get_SHZ_PG24() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets process variable 23h */
    void set_SHZ_PG23(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets process variable 23h */
    bool get_SHZ_PG23() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets process variable 22h */
    void set_SHZ_PG22(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets process variable 22h */
    bool get_SHZ_PG22() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets process variable 21h */
    void set_SHZ_PG21(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets process variable 21h */
    bool get_SHZ_PG21() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets process variable 20h */
    void set_SHZ_PG20(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets process variable 20h */
    bool get_SHZ_PG20() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets process variable 2Fh */
    void set_SHZ_PG2F(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets process variable 2Fh */
    bool get_SHZ_PG2F() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets process variable 2Eh */
    void set_SHZ_PG2E(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets process variable 2Eh */
    bool get_SHZ_PG2E() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets process variable 2Dh */
    void set_SHZ_PG2D(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets process variable 2Dh */
    bool get_SHZ_PG2D() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets process size 2Ch */
    void set_SHZ_PG2C(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets process size 2Ch */
    bool get_SHZ_PG2C() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets Process variable 2Bh */
    void set_SHZ_PG2B(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets Process variable 2Bh */
    bool get_SHZ_PG2B() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets process variable 2Ah */
    void set_SHZ_PG2A(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets process variable 2Ah */
    bool get_SHZ_PG2A() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets process variable 29h */
    void set_SHZ_PG29(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets process variable 29h */
    bool get_SHZ_PG29() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets Process variable 28h */
    void set_SHZ_PG28(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets Process variable 28h */
    bool get_SHZ_PG28() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets process variable 37h */
    void set_SHZ_PG37(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }

    /** Gets process variable 37h */
    bool get_SHZ_PG37() const { return (bool)(raw >> 15 & 0x1); }
        
    /** Sets process variable 36h */
    void set_SHZ_PG36(bool value){ raw = (raw & 0xffffffffffffbfff) | ((uint64_t)value & 0x1) << 14; }

    /** Gets process variable 36h */
    bool get_SHZ_PG36() const { return (bool)(raw >> 14 & 0x1); }
        
    /** Sets process variable 35h */
    void set_SHZ_PG35(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets process variable 35h */
    bool get_SHZ_PG35() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets process variable 34h */
    void set_SHZ_PG34(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets process variable 34h */
    bool get_SHZ_PG34() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets process variable 33h */
    void set_SHZ_PG33(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets process variable 33h */
    bool get_SHZ_PG33() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets process variable 32h */
    void set_SHZ_PG32(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets process variable 32h */
    bool get_SHZ_PG32() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets process variable 31h */
    void set_SHZ_PG31(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets process variable 31h */
    bool get_SHZ_PG31() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets process variable 30h */
    void set_SHZ_PG30(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets process variable 30h */
    bool get_SHZ_PG30() const { return (bool)(raw >> 8 & 0x1); }
        
    /** Sets process variable 3Fh */
    void set_SHZ_PG3F(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }

    /** Gets process variable 3Fh */
    bool get_SHZ_PG3F() const { return (bool)(raw >> 7 & 0x1); }
        
    /** Sets process variable 3Eh */
    void set_SHZ_PG3E(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }

    /** Gets process variable 3Eh */
    bool get_SHZ_PG3E() const { return (bool)(raw >> 6 & 0x1); }
        
    /** Sets process variable 3Dh */
    void set_SHZ_PG3D(bool value){ raw = (raw & 0xffffffffffffffdf) | ((uint64_t)value & 0x1) << 5; }

    /** Gets process variable 3Dh */
    bool get_SHZ_PG3D() const { return (bool)(raw >> 5 & 0x1); }
        
    /** Sets process size 3Ch */
    void set_SHZ_PG3C(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }

    /** Gets process size 3Ch */
    bool get_SHZ_PG3C() const { return (bool)(raw >> 4 & 0x1); }
        
    /** Sets process variable 3Bh */
    void set_SHZ_PG3B(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }

    /** Gets process variable 3Bh */
    bool get_SHZ_PG3B() const { return (bool)(raw >> 3 & 0x1); }
        
    /** Sets process variable 3Ah */
    void set_SHZ_PG3A(bool value){ raw = (raw & 0xfffffffffffffffb) | ((uint64_t)value & 0x1) << 2; }

    /** Gets process variable 3Ah */
    bool get_SHZ_PG3A() const { return (bool)(raw >> 2 & 0x1); }
        
    /** Sets process variable 39h */
    void set_SHZ_PG39(bool value){ raw = (raw & 0xfffffffffffffffd) | ((uint64_t)value & 0x1) << 1; }

    /** Gets process variable 39h */
    bool get_SHZ_PG39() const { return (bool)(raw >> 1 & 0x1); }
        
    /** Sets Process variable 38h */
    void set_SHZ_PG38(bool value){ raw = (raw & 0xfffffffffffffffe) | ((uint64_t)value & 0x1) << 0; }

    /** Gets Process variable 38h */
    bool get_SHZ_PG38() const { return (bool)(raw >> 0 & 0x1); }
        
} SD_RS_SHZ;



class ECU_SHZ {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case SHZ_A1_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case SD_RS_SHZ_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to SHZ_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SHZ_A1(uint64_t now, uint64_t max_expire_time, SHZ_A1* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to SD_RS_SHZ
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SD_RS_SHZ(uint64_t now, uint64_t max_expire_time, SD_RS_SHZ* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[2];
		uint64_t LAST_FRAME_TIMES[2];
};
#endif // __ECU_SHZ_H_