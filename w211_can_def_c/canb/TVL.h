
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'TVL'
*/

#ifndef __ECU_TVL_H_
#define __ECU_TVL_H_

#include <stdint.h>
    
#define TVL_A1_CAN_ID 0x028C
#define TVL_A2_CAN_ID 0x0044
#define TVL_A3_CAN_ID 0x0018
#define SD_RS_TVL_CAN_ID 0x07C8



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TVL_A1 */
	uint32_t get_canid(){ return TVL_A1_CAN_ID; }
    /** Sets Front Left Seat - Togglebit */
    void set_SVL_TGL(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Front Left Seat - Togglebit */
    bool get_SVL_TGL() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Front Left Seat - Actuated */
    void set_SVL_SITZ_BET(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Front Left Seat - Actuated */
    bool get_SVL_SITZ_BET() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Front left seat - rear height down */
    void set_SVL_HI_AB(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Front left seat - rear height down */
    bool get_SVL_HI_AB() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Front left seat - rear height up */
    void set_SVL_HI_AUF(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Front left seat - rear height up */
    bool get_SVL_HI_AUF() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Seat front left - lengthways back */
    void set_SVL_ZUR(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Seat front left - lengthways back */
    bool get_SVL_ZUR() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Seat in front on the left - longitudinally in front */
    void set_SVL_VOR(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Seat in front on the left - longitudinally in front */
    bool get_SVL_VOR() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Front left seat - headrest down */
    void set_SVL_KST_AB(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Front left seat - headrest down */
    bool get_SVL_KST_AB() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Front left seat - headrest up */
    void set_SVL_KST_AUF(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Front left seat - headrest up */
    bool get_SVL_KST_AUF() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Front left seat - front height down */
    void set_SVL_VO_AB(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets Front left seat - front height down */
    bool get_SVL_VO_AB() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Seat front left - height front up */
    void set_SVL_VO_AUF(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Seat front left - height front up */
    bool get_SVL_VO_AUF() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Front left seat - backrest */
    void set_SVL_LE_ZUR(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets Front left seat - backrest */
    bool get_SVL_LE_ZUR() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Front left seat - backrest forward */
    void set_SVL_LE_VOR(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets Front left seat - backrest forward */
    bool get_SVL_LE_VOR() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Steering column backwards (towards the driver) */
    void set_LS_ZURUECK_LL(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Steering column backwards (towards the driver) */
    bool get_LS_ZURUECK_LL() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Steering column forward */
    void set_LS_VOR_LL(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Steering column forward */
    bool get_LS_VOR_LL() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Steering column down */
    void set_LS_AB_LL(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Steering column down */
    bool get_LS_AB_LL() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Steering column up */
    void set_LS_AUF_LL(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Steering column up */
    bool get_LS_AUF_LL() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets Memory front left - toggle bit */
    void set_MVL_TGL(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Memory front left - toggle bit */
    bool get_MVL_TGL() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Right exterior mirror Save button pressed */
    void set_SPI_RE_SP(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Right exterior mirror Save button pressed */
    bool get_SPI_RE_SP() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Memory front left - save position 3 */
    void set_MVL_P3_SP(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Memory front left - save position 3 */
    bool get_MVL_P3_SP() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Memory front left - save position 2 */
    void set_MVL_P2_SP(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Memory front left - save position 2 */
    bool get_MVL_P2_SP() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets Memory front left - save position 1 */
    void set_MVL_P1_SP(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets Memory front left - save position 1 */
    bool get_MVL_P1_SP() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Memory front left - take position 3 */
    void set_MVL_P3_EN(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Memory front left - take position 3 */
    bool get_MVL_P3_EN() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets Memory front left - take position 2 */
    void set_MVL_P2_EN(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets Memory front left - take position 2 */
    bool get_MVL_P2_EN() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets Memory front left - take position 1 */
    void set_MVL_P1_EN(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets Memory front left - take position 1 */
    bool get_MVL_P1_EN() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets Mirror adjustment switch operated */
    void set_SPVS_BET_LL(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets Mirror adjustment switch operated */
    bool get_SPVS_BET_LL() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets Outside mirror on the right after driving position */
    void set_SPI_RE_FAHREN(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets Outside mirror on the right after driving position */
    bool get_SPI_RE_FAHREN() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets Outside mirror on the right after garage position */
    void set_SPI_RE_GARAGE(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets Outside mirror on the right after garage position */
    bool get_SPI_RE_GARAGE() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets Outside mirror right down */
    void set_SPI_RE_N_UN(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets Outside mirror right down */
    bool get_SPI_RE_N_UN() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets Outside mirror right up */
    void set_SPI_RE_N_OB(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets Outside mirror right up */
    bool get_SPI_RE_N_OB() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets Outside mirror right to right */
    void set_SPI_RE_N_RE(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets Outside mirror right to right */
    bool get_SPI_RE_N_RE() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets outside mirror right to left */
    void set_SPI_RE_N_LI(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets outside mirror right to left */
    bool get_SPI_RE_N_LI() const { return (bool)(raw >> 24 & 0x1); }
        
} TVL_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TVL_A2 */
	uint32_t get_canid(){ return TVL_A2_CAN_ID; }
    /** Sets Open/close rear right window */
    void set_FHR_TVL(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Open/close rear right window */
    bool get_FHR_TVL() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Open/close rear left window */
    void set_FHL_TVL(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Open/close rear left window */
    bool get_FHL_TVL() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Open/close front right window */
    void set_FVR_TVL(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets Open/close front right window */
    bool get_FVR_TVL() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Open/close front left window */
    void set_FVL_TVL(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Open/close front left window */
    bool get_FVL_TVL() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Open/close SHD/top */
    void set_SHD_TVL(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets Open/close SHD/top */
    bool get_SHD_TVL() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets direction comfort operation: open [0], close [1] */
    void set_KB_RI_TVL(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets direction comfort operation: open [0], close [1] */
    bool get_KB_RI_TVL() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Comfort control Automatic operation [1] Manual [0] */
    void set_KB_MOD_TVL(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Comfort control Automatic operation [1] Manual [0] */
    bool get_KB_MOD_TVL() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Rear right window - close automatically */
    void set_FHR_AS_LL(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Rear right window - close automatically */
    bool get_FHR_AS_LL() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Rear right window - close manually */
    void set_FHR_MS_LL(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Rear right window - close manually */
    bool get_FHR_MS_LL() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Rear right window - open manually */
    void set_FHR_MOE_LL(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Rear right window - open manually */
    bool get_FHR_MOE_LL() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Rear right window - open automatically */
    void set_FHR_AOE_LL(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Rear right window - open automatically */
    bool get_FHR_AOE_LL() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets Rear left window - close automatically */
    void set_FHL_AS_LL(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets Rear left window - close automatically */
    bool get_FHL_AS_LL() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets Rear left window - close manually */
    void set_FHL_MS_LL(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets Rear left window - close manually */
    bool get_FHL_MS_LL() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets Rear left window - open manually */
    void set_FHL_MOE_LL(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets Rear left window - open manually */
    bool get_FHL_MOE_LL() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets Rear left window - open automatically */
    void set_FHL_AOE_LL(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Rear left window - open automatically */
    bool get_FHL_AOE_LL() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets Front right window - close automatically */
    void set_FVR_AS(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Front right window - close automatically */
    bool get_FVR_AS() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Front right window - close manually */
    void set_FVR_MS(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Front right window - close manually */
    bool get_FVR_MS() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Front right window - open manually */
    void set_FVR_MOE(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Front right window - open manually */
    bool get_FVR_MOE() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Front right window - open automatically */
    void set_FVR_AOE(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Front right window - open automatically */
    bool get_FVR_AOE() const { return (bool)(raw >> 36 & 0x1); }
        
} TVL_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TVL_A3 */
	uint32_t get_canid(){ return TVL_A3_CAN_ID; }
    /** Sets Mirror adjustment switch in the right position */
    void set_SPVS_BF_LL(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Mirror adjustment switch in the right position */
    bool get_SPVS_BF_LL() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Trunk lid remote release */
    void set_HFE_LL(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Trunk lid remote release */
    bool get_HFE_LL() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Child lock on */
    void set_KISI_EIN_LL(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Child lock on */
    bool get_KISI_EIN_LL() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Additional indicator on the left defective */
    void set_ZBLL_DEF(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Additional indicator on the left defective */
    bool get_ZBLL_DEF() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Trunk lid remote closure */
    void set_HFS_LL(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Trunk lid remote closure */
    bool get_HFS_LL() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Front left window normalized */
    void set_FVL_NORM(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Front left window normalized */
    bool get_FVL_NORM() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Front left window blocked */
    void set_FVL_BLOCK(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Front left window blocked */
    bool get_FVL_BLOCK() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Front left window position. Conversion formula (To raw from real): y=(x+512.0)/0.25 (Unit: 1/Ankerumdre) */
    void set_FESTE_VL(uint16_t value){ raw = (raw & 0xfff000ffffffffff) | ((uint64_t)value & 0xfff) << 40; }

    /** Gets Front left window position. Conversion formula (To real from raw): y=(0.25x)-512.0 (Unit: 1/Ankerumdre) */
    uint16_t get_FESTE_VL() const { return (uint16_t)(raw >> 40 & 0xfff); }
        
} TVL_A3;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SD_RS_TVL */
	uint32_t get_canid(){ return SD_RS_TVL_CAN_ID; }
    /** Sets Identification for > 8 bytes */
    void set_TVL_KENN(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Identification for > 8 bytes */
    bool get_TVL_KENN() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets error vector 07h */
    void set_TVL_FV07(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets error vector 07h */
    bool get_TVL_FV07() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets error vector 06h */
    void set_TVL_FV06(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets error vector 06h */
    bool get_TVL_FV06() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets error vector 05h */
    void set_TVL_FV05(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets error vector 05h */
    bool get_TVL_FV05() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets error vector 04h */
    void set_TVL_FV04(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets error vector 04h */
    bool get_TVL_FV04() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets error vector 03h */
    void set_TVL_FV03(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets error vector 03h */
    bool get_TVL_FV03() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets error vector 02h */
    void set_TVL_FV02(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets error vector 02h */
    bool get_TVL_FV02() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets error vector 01h */
    void set_TVL_FV01(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets error vector 01h */
    bool get_TVL_FV01() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets error vector 0Fh */
    void set_TVL_FV0F(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets error vector 0Fh */
    bool get_TVL_FV0F() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets error vector 0Eh */
    void set_TVL_FV0E(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets error vector 0Eh */
    bool get_TVL_FV0E() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets error vector 0Dh */
    void set_TVL_FV0D(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets error vector 0Dh */
    bool get_TVL_FV0D() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets error vector 0Ch */
    void set_TVL_FV0C(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets error vector 0Ch */
    bool get_TVL_FV0C() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets error vector 0Bh */
    void set_TVL_FV0B(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets error vector 0Bh */
    bool get_TVL_FV0B() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets error vector 0Ah */
    void set_TVL_FV0A(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets error vector 0Ah */
    bool get_TVL_FV0A() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets error vector 09h */
    void set_TVL_FV09(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets error vector 09h */
    bool get_TVL_FV09() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets error vector 08h */
    void set_TVL_FV08(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets error vector 08h */
    bool get_TVL_FV08() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets error vector 17h */
    void set_TVL_FV17(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets error vector 17h */
    bool get_TVL_FV17() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets error vector 16h */
    void set_TVL_FV16(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets error vector 16h */
    bool get_TVL_FV16() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets error vector 15h */
    void set_TVL_FV15(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets error vector 15h */
    bool get_TVL_FV15() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets error vector 14h */
    void set_TVL_FV14(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets error vector 14h */
    bool get_TVL_FV14() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets error vector 13h */
    void set_TVL_FV13(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets error vector 13h */
    bool get_TVL_FV13() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets error vector 12h */
    void set_TVL_FV12(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets error vector 12h */
    bool get_TVL_FV12() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets error vector 11h */
    void set_TVL_FV11(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets error vector 11h */
    bool get_TVL_FV11() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets error vector 10h */
    void set_TVL_FV10(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets error vector 10h */
    bool get_TVL_FV10() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets error vector 1Fh */
    void set_TVL_FV1F(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets error vector 1Fh */
    bool get_TVL_FV1F() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets error vector 1Eh */
    void set_TVL_FV1E(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets error vector 1Eh */
    bool get_TVL_FV1E() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets error vector 1Dh */
    void set_TVL_FV1D(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets error vector 1Dh */
    bool get_TVL_FV1D() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Error vector 1Ch */
    void set_TVL_FV1C(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Error vector 1Ch */
    bool get_TVL_FV1C() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets error vector 1Bh */
    void set_TVL_FV1B(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets error vector 1Bh */
    bool get_TVL_FV1B() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Error vector 1Ah */
    void set_TVL_FV1A(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Error vector 1Ah */
    bool get_TVL_FV1A() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets error vector 19h */
    void set_TVL_FV19(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets error vector 19h */
    bool get_TVL_FV19() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets error vector 18h */
    void set_TVL_FV18(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets error vector 18h */
    bool get_TVL_FV18() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets error vector 27h */
    void set_TVL_FV27(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets error vector 27h */
    bool get_TVL_FV27() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets error vector 26h */
    void set_TVL_FV26(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets error vector 26h */
    bool get_TVL_FV26() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets error vector 25h */
    void set_TVL_FV25(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets error vector 25h */
    bool get_TVL_FV25() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets error vector 24h */
    void set_TVL_FV24(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets error vector 24h */
    bool get_TVL_FV24() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets error vector 23h */
    void set_TVL_FV23(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets error vector 23h */
    bool get_TVL_FV23() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets error vector 22h */
    void set_TVL_FV22(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets error vector 22h */
    bool get_TVL_FV22() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets error vector 21h */
    void set_TVL_FV21(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets error vector 21h */
    bool get_TVL_FV21() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets error vector 20h */
    void set_TVL_FV20(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets error vector 20h */
    bool get_TVL_FV20() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets error vector 2Fh */
    void set_TVL_FV2F(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets error vector 2Fh */
    bool get_TVL_FV2F() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets error vector 2Eh */
    void set_TVL_FV2E(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets error vector 2Eh */
    bool get_TVL_FV2E() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets error vector 2Dh */
    void set_TVL_FV2D(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets error vector 2Dh */
    bool get_TVL_FV2D() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets error vector 2Ch */
    void set_TVL_FV2C(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets error vector 2Ch */
    bool get_TVL_FV2C() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets error vector 2Bh */
    void set_TVL_FV2B(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets error vector 2Bh */
    bool get_TVL_FV2B() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets Error vector 2Ah */
    void set_TVL_FV2A(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets Error vector 2Ah */
    bool get_TVL_FV2A() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets error vector 29h */
    void set_TVL_FV29(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets error vector 29h */
    bool get_TVL_FV29() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets error vector 28h */
    void set_TVL_FV28(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets error vector 28h */
    bool get_TVL_FV28() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets error vector 37h */
    void set_TVL_FV37(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }

    /** Gets error vector 37h */
    bool get_TVL_FV37() const { return (bool)(raw >> 15 & 0x1); }
        
    /** Sets error vector 36h */
    void set_TVL_FV36(bool value){ raw = (raw & 0xffffffffffffbfff) | ((uint64_t)value & 0x1) << 14; }

    /** Gets error vector 36h */
    bool get_TVL_FV36() const { return (bool)(raw >> 14 & 0x1); }
        
    /** Sets error vector 35h */
    void set_TVL_FV35(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets error vector 35h */
    bool get_TVL_FV35() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets error vector 34h */
    void set_TVL_FV34(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets error vector 34h */
    bool get_TVL_FV34() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets error vector 33h */
    void set_TVL_FV33(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets error vector 33h */
    bool get_TVL_FV33() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets error vector 32h */
    void set_TVL_FV32(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets error vector 32h */
    bool get_TVL_FV32() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets error vector 31h */
    void set_TVL_FV31(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets error vector 31h */
    bool get_TVL_FV31() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets error vector 30h */
    void set_TVL_FV30(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets error vector 30h */
    bool get_TVL_FV30() const { return (bool)(raw >> 8 & 0x1); }
        
    /** Sets state variable 04h */
    void set_TVL_PGV04(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }

    /** Gets state variable 04h */
    bool get_TVL_PGV04() const { return (bool)(raw >> 7 & 0x1); }
        
    /** Sets state variable 03h */
    void set_TVL_PGV03(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }

    /** Gets state variable 03h */
    bool get_TVL_PGV03() const { return (bool)(raw >> 6 & 0x1); }
        
    /** Sets state variable 02h */
    void set_TVL_PGV02(bool value){ raw = (raw & 0xffffffffffffffdf) | ((uint64_t)value & 0x1) << 5; }

    /** Gets state variable 02h */
    bool get_TVL_PGV02() const { return (bool)(raw >> 5 & 0x1); }
        
    /** Sets state variable 01h */
    void set_TVL_PGV01(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }

    /** Gets state variable 01h */
    bool get_TVL_PGV01() const { return (bool)(raw >> 4 & 0x1); }
        
    /** Sets error vector 3Bh */
    void set_TVL_FV3B(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }

    /** Gets error vector 3Bh */
    bool get_TVL_FV3B() const { return (bool)(raw >> 3 & 0x1); }
        
    /** Sets Error vector 3Ah */
    void set_TVL_FV3A(bool value){ raw = (raw & 0xfffffffffffffffb) | ((uint64_t)value & 0x1) << 2; }

    /** Gets Error vector 3Ah */
    bool get_TVL_FV3A() const { return (bool)(raw >> 2 & 0x1); }
        
    /** Sets error vector 39h */
    void set_TVL_FV39(bool value){ raw = (raw & 0xfffffffffffffffd) | ((uint64_t)value & 0x1) << 1; }

    /** Gets error vector 39h */
    bool get_TVL_FV39() const { return (bool)(raw >> 1 & 0x1); }
        
    /** Sets error vector 38h */
    void set_TVL_FV38(bool value){ raw = (raw & 0xfffffffffffffffe) | ((uint64_t)value & 0x1) << 0; }

    /** Gets error vector 38h */
    bool get_TVL_FV38() const { return (bool)(raw >> 0 & 0x1); }
        
} SD_RS_TVL;



class ECU_TVL {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case TVL_A1_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case TVL_A2_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case TVL_A3_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case SD_RS_TVL_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to TVL_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TVL_A1(uint64_t now, uint64_t max_expire_time, TVL_A1* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to TVL_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TVL_A2(uint64_t now, uint64_t max_expire_time, TVL_A2* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to TVL_A3
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TVL_A3(uint64_t now, uint64_t max_expire_time, TVL_A3* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[2] && now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to SD_RS_TVL
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SD_RS_TVL(uint64_t now, uint64_t max_expire_time, SD_RS_TVL* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[3] && now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[4];
		uint64_t LAST_FRAME_TIMES[4];
};
#endif // __ECU_TVL_H_