
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'MSS'
*/

#ifndef __ECU_MSS_H_
#define __ECU_MSS_H_

#include <stdint.h>
    
#define MSS_A1_CAN_ID 0x0015
#define MSS_A2_CAN_ID 0x01AE
#define MSS_A3_CAN_ID 0x01CE
#define MSS_A4_CAN_ID 0x0248
#define MSSK_A1_CAN_ID 0x0046
#define MSSK_A2_CAN_ID 0x0208
#define SD_RS_MSS_CAN_ID 0x07C6



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MSS_A1 */
	uint32_t get_canid(){ return MSS_A1_CAN_ID; }
    /** Sets Turn on high beam */
    void set_FL_EIN_MSS(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Turn on high beam */
    bool get_FL_EIN_MSS() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Turn on fog lights */
    void set_NSW_EIN_MSS(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Turn on fog lights */
    bool get_NSW_EIN_MSS() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Turn on the horn */
    void set_SGH_EIN_MSS(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Turn on the horn */
    bool get_SGH_EIN_MSS() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets MSS blink on */
    void set_BLI_EIN_MSS(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets MSS blink on */
    bool get_BLI_EIN_MSS() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Drop off a taxi call for help */
    void set_T_HIRU_EIN(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Drop off a taxi call for help */
    bool get_T_HIRU_EIN() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Close recirculation flaps */
    void set_UMLUFT_MSS(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Close recirculation flaps */
    bool get_UMLUFT_MSS() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Turn on interior light */
    void set_IL_EIN_MSS(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Turn on interior light */
    bool get_IL_EIN_MSS() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Close central locking */
    void set_ZV_ZU_MSS(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Close central locking */
    bool get_ZV_ZU_MSS() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Duration of blinker light phase. Conversion formula (To raw from real): y=(x-0.0)/10.00 (Unit: ms) */
    void set_BLI_HELL_MSS(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Duration of blinker light phase. Conversion formula (To real from raw): y=(10.00x)+0.0 (Unit: ms) */
    uint8_t get_BLI_HELL_MSS() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets duration of the horn. Conversion formula (To raw from real): y=(x-0.0)/10.00 (Unit: ms) */
    void set_SGH_AN_MSS(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets duration of the horn. Conversion formula (To real from raw): y=(10.00x)+0.0 (Unit: ms) */
    uint8_t get_SGH_AN_MSS() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets Duration fog light bright phase. Conversion formula (To raw from real): y=(x-0.0)/10.00 (Unit: ms) */
    void set_NSW_HELL_MSS(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Duration fog light bright phase. Conversion formula (To real from raw): y=(10.00x)+0.0 (Unit: ms) */
    uint8_t get_NSW_HELL_MSS() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets Duration high beam light phase. Conversion formula (To raw from real): y=(x-0.0)/10.00 (Unit: ms) */
    void set_FL_HELL_MSS(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Duration high beam light phase. Conversion formula (To real from raw): y=(10.00x)+0.0 (Unit: ms) */
    uint8_t get_FL_HELL_MSS() const { return (uint8_t)(raw >> 24 & 0xff); }
        
    /** Sets Radio override active */
    void set_FU_FRSP_AKT(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets Radio override active */
    bool get_FU_FRSP_AKT() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets Switch on the authority radio LED */
    void set_BHF_LED_AKT(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets Switch on the authority radio LED */
    bool get_BHF_LED_AKT() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets Request numeric keypad HU */
    void set_ANF_ZT(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets Request numeric keypad HU */
    bool get_ANF_ZT() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets 220V external charging is connected */
    void set_LADEN_AKT(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets 220V external charging is connected */
    bool get_LADEN_AKT() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets Muting of the audio source with radio reception */
    void set_AUDIO_MUTE2(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets Muting of the audio source with radio reception */
    bool get_AUDIO_MUTE2() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets Audio Mute */
    void set_AUDIO_MUTE1(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets Audio Mute */
    bool get_AUDIO_MUTE1() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets Turn on the siren */
    void set_SIR_EIN_MSS(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets Turn on the siren */
    bool get_SIR_EIN_MSS() const { return (bool)(raw >> 16 & 0x1); }
        
} MSS_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MSS_A2 */
	uint32_t get_canid(){ return MSS_A2_CAN_ID; }
    /** Sets Roof sign indicator light on */
    void set_DZ_KL(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Roof sign indicator light on */
    bool get_DZ_KL() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Lamp defect roof sign */
    void set_DZ_LA_DEF(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Lamp defect roof sign */
    bool get_DZ_LA_DEF() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Check roof sign (break) */
    void set_DZ_PRF(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Check roof sign (break) */
    bool get_DZ_PRF() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Roof sign defective (short circuit) */
    void set_DZ_DEF(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Roof sign defective (short circuit) */
    bool get_DZ_DEF() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets MSS detects undervoltage */
    void set_MSS_USPG(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets MSS detects undervoltage */
    bool get_MSS_USPG() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Silent alarm triggered */
    void set_MSS_ALM(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Silent alarm triggered */
    bool get_MSS_ALM() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Emergency alarm system defective */
    void set_NOTALM_DEF(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Emergency alarm system defective */
    bool get_NOTALM_DEF() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Electronics on the MSS defective */
    void set_MSS_EE_DEF(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Electronics on the MSS defective */
    bool get_MSS_EE_DEF() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Radio Status on [1] off [0] */
    void set_FNK_STAT(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Radio Status on [1] off [0] */
    bool get_FNK_STAT() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Activate the buzzer in the station wagon */
    void set_MSS_SUMMER(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Activate the buzzer in the station wagon */
    bool get_MSS_SUMMER() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets MSS detects undervoltage when motor is running */
    void set_MSS_USPG_MO(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets MSS detects undervoltage when motor is running */
    bool get_MSS_USPG_MO() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets Windshield Hzg. malfunction */
    void set_FSB_FEHLER(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets Windshield Hzg. malfunction */
    bool get_FSB_FEHLER() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets Windshield Hzg. from wg. timer */
    void set_FSB_HZG_AUS(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Windshield Hzg. from wg. timer */
    bool get_FSB_HZG_AUS() const { return (bool)(raw >> 40 & 0x1); }
        
} MSS_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MSS_A3 */
	uint32_t get_canid(){ return MSS_A3_CAN_ID; }
    /** Sets GPS Latitude, South = [-]; North = [+]. Conversion formula (To raw from real): y=(x+648000000.0)/0.30 (Unit: ms) */
    void set_DEST_LAT(uint32_t value){ raw = (raw & 0x00000000ffffffff) | ((uint64_t)value & 0xffffffff) << 32; }

    /** Gets GPS Latitude, South = [-]; North = [+]. Conversion formula (To real from raw): y=(0.30x)-648000000.0 (Unit: ms) */
    uint32_t get_DEST_LAT() const { return (uint32_t)(raw >> 32 & 0xffffffff); }
        
    /** Sets GPS Longitude, West = [-]; East = [+]. Conversion formula (To raw from real): y=(x+648000000.0)/0.30 (Unit: ms) */
    void set_DEST_LONG(uint32_t value){ raw = (raw & 0xffffffff00000000) | ((uint64_t)value & 0xffffffff) << 0; }

    /** Gets GPS Longitude, West = [-]; East = [+]. Conversion formula (To real from raw): y=(0.30x)-648000000.0 (Unit: ms) */
    uint32_t get_DEST_LONG() const { return (uint32_t)(raw >> 0 & 0xffffffff); }
        
} MSS_A3;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MSS_A4 */
	uint32_t get_canid(){ return MSS_A4_CAN_ID; }
    /** Sets Close the rear right window */
    void set_FHR_ALARM(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Close the rear right window */
    bool get_FHR_ALARM() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Close rear left window */
    void set_FHL_ALARM(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Close rear left window */
    bool get_FHL_ALARM() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Close the front right window */
    void set_FVR_ALARM(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Close the front right window */
    bool get_FVR_ALARM() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Close the front left window */
    void set_FVL_ALARM(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Close the front left window */
    bool get_FVL_ALARM() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Close SHD */
    void set_SHD_ALARM(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Close SHD */
    bool get_SHD_ALARM() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Direction of alarm actuation: Open [0], Close [1] */
    void set_RI_ALARM(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Direction of alarm actuation: Open [0], Close [1] */
    bool get_RI_ALARM() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Automatic run [1], Manual [0] */
    void set_MOD_ALARM(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Automatic run [1], Manual [0] */
    bool get_MOD_ALARM() const { return (bool)(raw >> 57 & 0x1); }
        
} MSS_A4;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MSSK_A1 */
	uint32_t get_canid(){ return MSSK_A1_CAN_ID; }
    /** Sets Turn on the horn */
    void set_SGH_EIN_K(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Turn on the horn */
    bool get_SGH_EIN_K() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Switch on headlight flasher */
    void set_LHP_EIN_K(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Switch on headlight flasher */
    bool get_LHP_EIN_K() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Turn on high beam */
    void set_FL_EIN_K(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Turn on high beam */
    bool get_FL_EIN_K() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Turn signal right */
    void set_BLI_RE_K(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Turn signal right */
    bool get_BLI_RE_K() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Turn signal left */
    void set_BLI_LI_K(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Turn signal left */
    bool get_BLI_LI_K() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Switch on windscreen wipers stage 2 */
    void set_SCH_WI_2_K(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Switch on windscreen wipers stage 2 */
    bool get_SCH_WI_2_K() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Switch on wiper speed 1 */
    void set_SCH_WI_1_K(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Switch on wiper speed 1 */
    bool get_SCH_WI_1_K() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Switch on wiper interval */
    void set_SCH_WI_INT_K(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets Switch on wiper interval */
    bool get_SCH_WI_INT_K() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Turn on washing */
    void set_WASCHEN_K(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Turn on washing */
    bool get_WASCHEN_K() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Turn on swiping */
    void set_TIPP_WISCH_K(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets Turn on swiping */
    bool get_TIPP_WISCH_K() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Intermittent rear window wipe */
    void set_HECK_INT_K(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Intermittent rear window wipe */
    bool get_HECK_INT_K() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets wipe/wash rear window */
    void set_HECK_WISCH_K(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets wipe/wash rear window */
    bool get_HECK_WISCH_K() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Hazard warning lights on */
    void set_WBL_EIN_K(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Hazard warning lights on */
    bool get_WBL_EIN_K() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Turn on parking lights */
    void set_STL_EIN_K(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Turn on parking lights */
    bool get_STL_EIN_K() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets Turn on low beam */
    void set_ABL_EIN_K(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets Turn on low beam */
    bool get_ABL_EIN_K() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets Turn on fog lights */
    void set_NSW_EIN_K(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets Turn on fog lights */
    bool get_NSW_EIN_K() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets Turn on rear fog light */
    void set_NSL_EIN_K(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets Turn on rear fog light */
    bool get_NSL_EIN_K() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets sunroof stop */
    void set_SHD_STOP(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets sunroof stop */
    bool get_SHD_STOP() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Open lifting roof */
    void set_HD_AUF_K(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Open lifting roof */
    bool get_HD_AUF_K() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Close sunroof */
    void set_SHD_ZU_K(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Close sunroof */
    bool get_SHD_ZU_K() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Open sunroof */
    void set_SHD_AUF_K(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Open sunroof */
    bool get_SHD_AUF_K() const { return (bool)(raw >> 36 & 0x1); }
        
} MSSK_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MSSK_A2 */
	uint32_t get_canid(){ return MSSK_A2_CAN_ID; }
    /** Sets Passenger seat - toggle bit */
    void set_SBF_K_TGL(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Passenger seat - toggle bit */
    bool get_SBF_K_TGL() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Passenger seat - lengthways back */
    void set_SBF_ZUR_K(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Passenger seat - lengthways back */
    bool get_SBF_ZUR_K() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Passenger seat - longitudinally forward */
    void set_SBF_VOR_K(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Passenger seat - longitudinally forward */
    bool get_SBF_VOR_K() const { return (bool)(raw >> 56 & 0x1); }
        
} MSSK_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SD_RS_MSS */
	uint32_t get_canid(){ return SD_RS_MSS_CAN_ID; }
    /** Sets Identification for > 8 bytes */
    void set_MSS_KENN(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Identification for > 8 bytes */
    bool get_MSS_KENN() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets error vector 07h */
    void set_MSS_FV07(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets error vector 07h */
    bool get_MSS_FV07() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets error vector 06h */
    void set_MSS_FV06(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets error vector 06h */
    bool get_MSS_FV06() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets error vector 05h */
    void set_MSS_FV05(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets error vector 05h */
    bool get_MSS_FV05() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets error vector 04h */
    void set_MSS_FV04(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets error vector 04h */
    bool get_MSS_FV04() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets error vector 03h */
    void set_MSS_FV03(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets error vector 03h */
    bool get_MSS_FV03() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets error vector 02h */
    void set_MSS_FV02(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets error vector 02h */
    bool get_MSS_FV02() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets error vector 01h */
    void set_MSS_FV01(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets error vector 01h */
    bool get_MSS_FV01() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets error vector 0Fh */
    void set_MSS_FV0F(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets error vector 0Fh */
    bool get_MSS_FV0F() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets error vector 0Eh */
    void set_MSS_FV0E(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets error vector 0Eh */
    bool get_MSS_FV0E() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets error vector 0Dh */
    void set_MSS_FV0D(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets error vector 0Dh */
    bool get_MSS_FV0D() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets error vector 0Ch */
    void set_MSS_FV0C(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets error vector 0Ch */
    bool get_MSS_FV0C() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets error vector 0Bh */
    void set_MSS_FV0B(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets error vector 0Bh */
    bool get_MSS_FV0B() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets error vector 0Ah */
    void set_MSS_FV0A(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets error vector 0Ah */
    bool get_MSS_FV0A() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets error vector 09h */
    void set_MSS_FV09(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets error vector 09h */
    bool get_MSS_FV09() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets error vector 08h */
    void set_MSS_FV08(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets error vector 08h */
    bool get_MSS_FV08() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets error vector 17h */
    void set_MSS_FV17(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets error vector 17h */
    bool get_MSS_FV17() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets error vector 16h */
    void set_MSS_FV16(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets error vector 16h */
    bool get_MSS_FV16() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets error vector 15h */
    void set_MSS_FV15(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets error vector 15h */
    bool get_MSS_FV15() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets error vector 14h */
    void set_MSS_FV14(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets error vector 14h */
    bool get_MSS_FV14() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets error vector 13h */
    void set_MSS_FV13(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets error vector 13h */
    bool get_MSS_FV13() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets error vector 12h */
    void set_MSS_FV12(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets error vector 12h */
    bool get_MSS_FV12() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets error vector 11h */
    void set_MSS_FV11(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets error vector 11h */
    bool get_MSS_FV11() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets error vector 10h */
    void set_MSS_FV10(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets error vector 10h */
    bool get_MSS_FV10() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets error vector 1Fh */
    void set_MSS_FV1F(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets error vector 1Fh */
    bool get_MSS_FV1F() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets error vector 1Eh */
    void set_MSS_FV1E(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets error vector 1Eh */
    bool get_MSS_FV1E() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets error vector 1Dh */
    void set_MSS_FV1D(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets error vector 1Dh */
    bool get_MSS_FV1D() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Error vector 1Ch */
    void set_MSS_FV1C(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Error vector 1Ch */
    bool get_MSS_FV1C() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets error vector 1Bh */
    void set_MSS_FV1B(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets error vector 1Bh */
    bool get_MSS_FV1B() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Error vector 1Ah */
    void set_MSS_FV1A(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Error vector 1Ah */
    bool get_MSS_FV1A() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets error vector 19h */
    void set_MSS_FV19(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets error vector 19h */
    bool get_MSS_FV19() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets error vector 18h */
    void set_MSS_FV18(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets error vector 18h */
    bool get_MSS_FV18() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets error vector 27h */
    void set_MSS_FV27(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets error vector 27h */
    bool get_MSS_FV27() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets error vector 26h */
    void set_MSS_FV26(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets error vector 26h */
    bool get_MSS_FV26() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets error vector 25h */
    void set_MSS_FV25(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets error vector 25h */
    bool get_MSS_FV25() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets error vector 24h */
    void set_MSS_FV24(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets error vector 24h */
    bool get_MSS_FV24() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets error vector 23h */
    void set_MSS_FV23(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets error vector 23h */
    bool get_MSS_FV23() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets error vector 22h */
    void set_MSS_FV22(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets error vector 22h */
    bool get_MSS_FV22() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets error vector 21h */
    void set_MSS_FV21(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets error vector 21h */
    bool get_MSS_FV21() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets error vector 20h */
    void set_MSS_FV20(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets error vector 20h */
    bool get_MSS_FV20() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets error vector 2Fh */
    void set_MSS_FV2F(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets error vector 2Fh */
    bool get_MSS_FV2F() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets error vector 2Eh */
    void set_MSS_FV2E(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets error vector 2Eh */
    bool get_MSS_FV2E() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets error vector 2Dh */
    void set_MSS_FV2D(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets error vector 2Dh */
    bool get_MSS_FV2D() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets error vector 2Ch */
    void set_MSS_FV2C(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets error vector 2Ch */
    bool get_MSS_FV2C() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets error vector 2Bh */
    void set_MSS_FV2B(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets error vector 2Bh */
    bool get_MSS_FV2B() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets Error vector 2Ah */
    void set_MSS_FV2A(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets Error vector 2Ah */
    bool get_MSS_FV2A() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets error vector 29h */
    void set_MSS_FV29(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets error vector 29h */
    bool get_MSS_FV29() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets error vector 28h */
    void set_MSS_FV28(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets error vector 28h */
    bool get_MSS_FV28() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets error vector 37h */
    void set_MSS_FV37(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }

    /** Gets error vector 37h */
    bool get_MSS_FV37() const { return (bool)(raw >> 15 & 0x1); }
        
    /** Sets error vector 36h */
    void set_MSS_FV36(bool value){ raw = (raw & 0xffffffffffffbfff) | ((uint64_t)value & 0x1) << 14; }

    /** Gets error vector 36h */
    bool get_MSS_FV36() const { return (bool)(raw >> 14 & 0x1); }
        
    /** Sets error vector 35h */
    void set_MSS_FV35(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets error vector 35h */
    bool get_MSS_FV35() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets error vector 34h */
    void set_MSS_FV34(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets error vector 34h */
    bool get_MSS_FV34() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets error vector 33h */
    void set_MSS_FV33(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets error vector 33h */
    bool get_MSS_FV33() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets error vector 32h */
    void set_MSS_FV32(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets error vector 32h */
    bool get_MSS_FV32() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets error vector 31h */
    void set_MSS_FV31(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets error vector 31h */
    bool get_MSS_FV31() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets error vector 30h */
    void set_MSS_FV30(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets error vector 30h */
    bool get_MSS_FV30() const { return (bool)(raw >> 8 & 0x1); }
        
    /** Sets state variable 04h */
    void set_MSS_PGV04(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }

    /** Gets state variable 04h */
    bool get_MSS_PGV04() const { return (bool)(raw >> 7 & 0x1); }
        
    /** Sets state variable 03h */
    void set_MSS_PGV03(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }

    /** Gets state variable 03h */
    bool get_MSS_PGV03() const { return (bool)(raw >> 6 & 0x1); }
        
    /** Sets state variable 02h */
    void set_MSS_PGV02(bool value){ raw = (raw & 0xffffffffffffffdf) | ((uint64_t)value & 0x1) << 5; }

    /** Gets state variable 02h */
    bool get_MSS_PGV02() const { return (bool)(raw >> 5 & 0x1); }
        
    /** Sets state variable 01h */
    void set_MSS_PGV01(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }

    /** Gets state variable 01h */
    bool get_MSS_PGV01() const { return (bool)(raw >> 4 & 0x1); }
        
    /** Sets error vector 3Bh */
    void set_MSS_FV3B(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }

    /** Gets error vector 3Bh */
    bool get_MSS_FV3B() const { return (bool)(raw >> 3 & 0x1); }
        
    /** Sets Error vector 3Ah */
    void set_MSS_FV3A(bool value){ raw = (raw & 0xfffffffffffffffb) | ((uint64_t)value & 0x1) << 2; }

    /** Gets Error vector 3Ah */
    bool get_MSS_FV3A() const { return (bool)(raw >> 2 & 0x1); }
        
    /** Sets error vector 39h */
    void set_MSS_FV39(bool value){ raw = (raw & 0xfffffffffffffffd) | ((uint64_t)value & 0x1) << 1; }

    /** Gets error vector 39h */
    bool get_MSS_FV39() const { return (bool)(raw >> 1 & 0x1); }
        
    /** Sets error vector 38h */
    void set_MSS_FV38(bool value){ raw = (raw & 0xfffffffffffffffe) | ((uint64_t)value & 0x1) << 0; }

    /** Gets error vector 38h */
    bool get_MSS_FV38() const { return (bool)(raw >> 0 & 0x1); }
        
} SD_RS_MSS;



class ECU_MSS {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case MSS_A1_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case MSS_A2_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case MSS_A3_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case MSS_A4_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                case MSSK_A1_CAN_ID:
                    LAST_FRAME_TIMES[4] = timestamp_now;
                    FRAME_DATA[4] = value;
                    return true;
                case MSSK_A2_CAN_ID:
                    LAST_FRAME_TIMES[5] = timestamp_now;
                    FRAME_DATA[5] = value;
                    return true;
                case SD_RS_MSS_CAN_ID:
                    LAST_FRAME_TIMES[6] = timestamp_now;
                    FRAME_DATA[6] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to MSS_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MSS_A1(uint64_t now, uint64_t max_expire_time, MSS_A1* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to MSS_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MSS_A2(uint64_t now, uint64_t max_expire_time, MSS_A2* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to MSS_A3
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MSS_A3(uint64_t now, uint64_t max_expire_time, MSS_A3* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[2] && now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to MSS_A4
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MSS_A4(uint64_t now, uint64_t max_expire_time, MSS_A4* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[3] && now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
        /** Sets data in pointer to MSSK_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MSSK_A1(uint64_t now, uint64_t max_expire_time, MSSK_A1* dest) const {
            if (LAST_FRAME_TIMES[4] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[4] && now - LAST_FRAME_TIMES[4] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[4];
                return true;
            }
        }
            
        /** Sets data in pointer to MSSK_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MSSK_A2(uint64_t now, uint64_t max_expire_time, MSSK_A2* dest) const {
            if (LAST_FRAME_TIMES[5] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[5] && now - LAST_FRAME_TIMES[5] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[5];
                return true;
            }
        }
            
        /** Sets data in pointer to SD_RS_MSS
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SD_RS_MSS(uint64_t now, uint64_t max_expire_time, SD_RS_MSS* dest) const {
            if (LAST_FRAME_TIMES[6] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[6] && now - LAST_FRAME_TIMES[6] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[6];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[7];
		uint64_t LAST_FRAME_TIMES[7];
};
#endif // __ECU_MSS_H_