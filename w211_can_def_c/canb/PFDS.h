
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'PFDS'
*/

#ifndef __ECU_PFDS_H_
#define __ECU_PFDS_H_

#include <stdint.h>
    
#define PFDS_A1_CAN_ID 0x02A8
#define SD_RS_PFDS_CAN_ID 0x07CE

/** FDS pump motor status */
enum class PFDS_A1_PFDSMOT_ST {
	AUS = 0, // Pump motor is off
	EIN = 1, // Pump motor is on
	KWL = 2, // Pump motor makes condensate flow
	FEHLER = 3, // Pump motor is inactive due to internal disruption
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PFDS_A1 */
	uint32_t get_canid(){ return PFDS_A1_CAN_ID; }
    /** Sets FDS pump deactivated */
    void set_PFDS_DEAKT(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets FDS pump deactivated */
    bool get_PFDS_DEAKT() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Bleed the pressure vessel */
    void set_PFDS_ENT(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Bleed the pressure vessel */
    bool get_PFDS_ENT() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Pre-warning overload */
    void set_PFDS_OVLD(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Pre-warning overload */
    bool get_PFDS_OVLD() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets FDS pump motor status */
    void set_PFDSMOT_ST(PFDS_A1_PFDSMOT_ST value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets FDS pump motor status */
    PFDS_A1_PFDSMOT_ST get_PFDSMOT_ST() const { return (PFDS_A1_PFDSMOT_ST)(raw >> 56 & 0x3); }
        
    /** Sets FDS pump supply pressure. Conversion formula (To raw from real): y=(x-1250.0)/50.00 (Unit: hPa) */
    void set_P_PFDS(uint8_t value){ raw = (raw & 0xffe0ffffffffffff) | ((uint64_t)value & 0x1f) << 48; }

    /** Gets FDS pump supply pressure. Conversion formula (To real from raw): y=(50.00x)+1250.0 (Unit: hPa) */
    uint8_t get_P_PFDS() const { return (uint8_t)(raw >> 48 & 0x1f); }
        
} PFDS_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SD_RS_PFDS */
	uint32_t get_canid(){ return SD_RS_PFDS_CAN_ID; }
    /** Sets Identification for > 8 bytes */
    void set_PFDS_KENN(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Identification for > 8 bytes */
    bool get_PFDS_KENN() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets error vector 07h */
    void set_PFDS_FV07(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets error vector 07h */
    bool get_PFDS_FV07() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets error vector 06h */
    void set_PFDS_FV06(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets error vector 06h */
    bool get_PFDS_FV06() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets error vector 05h */
    void set_PFDS_FV05(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets error vector 05h */
    bool get_PFDS_FV05() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets error vector 04h */
    void set_PFDS_FV04(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets error vector 04h */
    bool get_PFDS_FV04() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets error vector 03h */
    void set_PFDS_FV03(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets error vector 03h */
    bool get_PFDS_FV03() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets error vector 02h */
    void set_PFDS_FV02(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets error vector 02h */
    bool get_PFDS_FV02() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets error vector 01h */
    void set_PFDS_FV01(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets error vector 01h */
    bool get_PFDS_FV01() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets error vector 0Fh */
    void set_PFDS_FV0F(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets error vector 0Fh */
    bool get_PFDS_FV0F() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets error vector 0Eh */
    void set_PFDS_FV0E(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets error vector 0Eh */
    bool get_PFDS_FV0E() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets error vector 0Dh */
    void set_PFDS_FV0D(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets error vector 0Dh */
    bool get_PFDS_FV0D() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets error vector 0Ch */
    void set_PFDS_FV0C(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets error vector 0Ch */
    bool get_PFDS_FV0C() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets error vector 0Bh */
    void set_PFDS_FV0B(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets error vector 0Bh */
    bool get_PFDS_FV0B() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets error vector 0Ah */
    void set_PFDS_FV0A(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets error vector 0Ah */
    bool get_PFDS_FV0A() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets error vector 09h */
    void set_PFDS_FV09(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets error vector 09h */
    bool get_PFDS_FV09() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets error vector 08h */
    void set_PFDS_FV08(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets error vector 08h */
    bool get_PFDS_FV08() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets state variable 08h */
    void set_PFDS_PGV08(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets state variable 08h */
    bool get_PFDS_PGV08() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets state variable 07h */
    void set_PFDS_PGV07(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets state variable 07h */
    bool get_PFDS_PGV07() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets state variable 06h */
    void set_PFDS_PGV06(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets state variable 06h */
    bool get_PFDS_PGV06() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets state variable 05h */
    void set_PFDS_PGV05(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets state variable 05h */
    bool get_PFDS_PGV05() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets state variable 04h */
    void set_PFDS_PGV04(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets state variable 04h */
    bool get_PFDS_PGV04() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets state variable 03h */
    void set_PFDS_PGV03(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets state variable 03h */
    bool get_PFDS_PGV03() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets state variable 02h */
    void set_PFDS_PGV02(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets state variable 02h */
    bool get_PFDS_PGV02() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets state variable 01h */
    void set_PFDS_PGV01(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets state variable 01h */
    bool get_PFDS_PGV01() const { return (bool)(raw >> 40 & 0x1); }
        
} SD_RS_PFDS;



class ECU_PFDS {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case PFDS_A1_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case SD_RS_PFDS_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to PFDS_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PFDS_A1(uint64_t now, uint64_t max_expire_time, PFDS_A1* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to SD_RS_PFDS
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SD_RS_PFDS(uint64_t now, uint64_t max_expire_time, SD_RS_PFDS* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[2];
		uint64_t LAST_FRAME_TIMES[2];
};
#endif // __ECU_PFDS_H_