
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'DBE'
*/

#ifndef __ECU_DBE_H_
#define __ECU_DBE_H_

#include <stdint.h>
    
#define DBE_A1_CAN_ID 0x0014
#define DBE_A2_CAN_ID 0x0270
#define DBE_A4_CAN_ID 0x0174
#define SD_RS_DBE_CAN_ID 0x07C7

/** sunroof status */
enum class DBE_A1_SHD_ST {
	SHD_ST_ZU = 0, // SHD too
	SHD_ST_AUF = 1, // Sunroof is fully open
	HUB_ST_AUF = 2, // Elevating roof is open
	SHD_ST_ST = 3, // Sliding/lifting roof is running
	SHD_ST_AW = 4, // SHD in anti-Wummer position
	SHD_ST_ZW = 5, // Sunroof in intermediate position
	HUB_ST_ZW = 6, // Elevating roof in intermediate position
	SNV = 7, // SHD denormalized
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of DBE_A1 */
	uint32_t get_canid(){ return DBE_A1_CAN_ID; }
    /** Sets Turn on the front left exit light */
    void set_AL_VL(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Turn on the front left exit light */
    bool get_AL_VL() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Turn on the front right exit light */
    void set_AL_VR(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Turn on the front right exit light */
    bool get_AL_VR() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Turn on the rear left exit light */
    void set_AL_HL(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Turn on the rear left exit light */
    bool get_AL_HL() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Switch on the rear right exit lamp */
    void set_AL_HR(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Switch on the rear right exit lamp */
    bool get_AL_HR() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Turn on the front left warning light */
    void set_WL_VL(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Turn on the front left warning light */
    bool get_WL_VL() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Turn on the front right warning light */
    void set_WL_VR(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Turn on the front right warning light */
    bool get_WL_VR() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Switch on the rear left warning lamp */
    void set_WL_HL(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Switch on the rear left warning lamp */
    bool get_WL_HL() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Turn on the rear right warning light */
    void set_WL_HR(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Turn on the rear right warning light */
    bool get_WL_HR() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets internal temperature. Conversion formula (To raw from real): y=(x-0.0)/0.25 (Unit: °C) */
    void set_T_INNEN(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets internal temperature. Conversion formula (To real from raw): y=(0.25x)+0.0 (Unit: °C) */
    uint8_t get_T_INNEN() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Turn on low beam (request from light sensor) */
    void set_AFL_ABL_EIN(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Turn on low beam (request from light sensor) */
    bool get_AFL_ABL_EIN() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Light sensor value: Day [0]; night [1] */
    void set_NACHT(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Light sensor value: Day [0]; night [1] */
    bool get_NACHT() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Light sensor defective */
    void set_LISR_DEF(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Light sensor defective */
    bool get_LISR_DEF() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Light Sensor: Tunnel */
    void set_TUNNEL(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Light Sensor: Tunnel */
    bool get_TUNNEL() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets Turn on the charge light */
    void set_LADE_EIN(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Turn on the charge light */
    bool get_LADE_EIN() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets sunroof status */
    void set_SHD_ST(DBE_A1_SHD_ST value){ raw = (raw & 0xfffffff8ffffffff) | ((uint64_t)value & 0x7) << 32; }

    /** Gets sunroof status */
    DBE_A1_SHD_ST get_SHD_ST() const { return (DBE_A1_SHD_ST)(raw >> 32 & 0x7); }
        
    /** Sets Interior protection triggered */
    void set_IRS_ALM(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets Interior protection triggered */
    bool get_IRS_ALM() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets interior protection glass break triggered */
    void set_IRS_GB(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets interior protection glass break triggered */
    bool get_IRS_GB() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets Deselect EDW towing protection */
    void set_EDW_AS_ABW(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets Deselect EDW towing protection */
    bool get_EDW_AS_ABW() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets Deselect EDW interior protection */
    void set_EDW_IRS_ABW(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets Deselect EDW interior protection */
    bool get_EDW_IRS_ABW() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets Switch on the right entry lighting */
    void set_EINSTIEG_R_EIN(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets Switch on the right entry lighting */
    bool get_EINSTIEG_R_EIN() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets Switch on the left entry lighting */
    void set_EINSTIEG_L_EIN(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets Switch on the left entry lighting */
    bool get_EINSTIEG_L_EIN() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets Indoor sensor fan runs */
    void set_IFG_LFT(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets Indoor sensor fan runs */
    bool get_IFG_LFT() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets Front left footwell lighting on */
    void set_FRBL_VL(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets Front left footwell lighting on */
    bool get_FRBL_VL() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets Front right footwell lighting on */
    void set_FRBL_VR(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets Front right footwell lighting on */
    bool get_FRBL_VR() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets Rear left footwell lighting on */
    void set_FRBL_HL(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets Rear left footwell lighting on */
    bool get_FRBL_HL() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets Rear right footwell lighting on */
    void set_FRBL_HR(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets Rear right footwell lighting on */
    bool get_FRBL_HR() const { return (bool)(raw >> 8 & 0x1); }
        
    /** Sets Footwell lighting brightness. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %) */
    void set_FRBL_HELL(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets Footwell lighting brightness. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %) */
    uint8_t get_FRBL_HELL() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} DBE_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of DBE_A2 */
	uint32_t get_canid(){ return DBE_A2_CAN_ID; }
    /** Sets Byte identifier rain sensor */
    void set_KENN_RS(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Byte identifier rain sensor */
    bool get_KENN_RS() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Rain sensor defective */
    void set_RS_DEF(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Rain sensor defective */
    bool get_RS_DEF() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Surge detection */
    void set_SCHWALL(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Surge detection */
    bool get_SCHWALL() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets wiper stages. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Stufen) */
    void set_WISCHER_ST(uint8_t value){ raw = (raw & 0xf0ffffffffffffff) | ((uint64_t)value & 0xf) << 56; }

    /** Gets wiper stages. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Stufen) */
    uint8_t get_WISCHER_ST() const { return (uint8_t)(raw >> 56 & 0xf); }
        
    /** Sets Readings from RLS not available */
    void set_RLS_UNPLAUS(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets Readings from RLS not available */
    bool get_RLS_UNPLAUS() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Timeout for SAM_V_A3 message */
    void set_SAM_V_A3_TO(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets Timeout for SAM_V_A3 message */
    bool get_SAM_V_A3_TO() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Communication error to rain/light sensor */
    void set_KOM_RLS_FEHL(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Communication error to rain/light sensor */
    bool get_KOM_RLS_FEHL() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Diagnosis rain/light sensor on */
    void set_DIAG_RLS_EIN(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Diagnosis rain/light sensor on */
    bool get_DIAG_RLS_EIN() const { return (bool)(raw >> 48 & 0x1); }
        
} DBE_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of DBE_A4 */
	uint32_t get_canid(){ return DBE_A4_CAN_ID; }
    /** Sets Sunroof closed when it rains */
    void set_SHD_ZU_RS(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Sunroof closed when it rains */
    bool get_SHD_ZU_RS() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Interior mirror actuated */
    void set_ISP_BET(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Interior mirror actuated */
    bool get_ISP_BET() const { return (bool)(raw >> 62 & 0x1); }
        
} DBE_A4;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SD_RS_DBE */
	uint32_t get_canid(){ return SD_RS_DBE_CAN_ID; }
    /** Sets Identification for > 8 bytes */
    void set_DBE_KENN(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Identification for > 8 bytes */
    bool get_DBE_KENN() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets state variable 07h */
    void set_DBE_PGV07(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets state variable 07h */
    bool get_DBE_PGV07() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets state variable 06h */
    void set_DBE_PGV06(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets state variable 06h */
    bool get_DBE_PGV06() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets state variable 05h */
    void set_DBE_PGV05(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets state variable 05h */
    bool get_DBE_PGV05() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets state variable 04h */
    void set_DBE_PGV04(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets state variable 04h */
    bool get_DBE_PGV04() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets state variable 03h */
    void set_DBE_PGV03(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets state variable 03h */
    bool get_DBE_PGV03() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets state variable 02h */
    void set_DBE_PGV02(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets state variable 02h */
    bool get_DBE_PGV02() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets state variable 01h */
    void set_DBE_PGV01(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets state variable 01h */
    bool get_DBE_PGV01() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Error message 01h. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_DBE_FM01(uint16_t value){ raw = (raw & 0xff0000ffffffffff) | ((uint64_t)value & 0xffff) << 40; }

    /** Gets Error message 01h. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_DBE_FM01() const { return (uint16_t)(raw >> 40 & 0xffff); }
        
    /** Sets Error message 02h. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_DBE_FM02(uint16_t value){ raw = (raw & 0xffffff0000ffffff) | ((uint64_t)value & 0xffff) << 24; }

    /** Gets Error message 02h. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_DBE_FM02() const { return (uint16_t)(raw >> 24 & 0xffff); }
        
    /** Sets Error message 03h. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_DBE_FM03(uint16_t value){ raw = (raw & 0xffffffffff0000ff) | ((uint64_t)value & 0xffff) << 8; }

    /** Gets Error message 03h. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_DBE_FM03() const { return (uint16_t)(raw >> 8 & 0xffff); }
        
    /** Sets state variable 0Fh */
    void set_DBE_PGV0F(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }

    /** Gets state variable 0Fh */
    bool get_DBE_PGV0F() const { return (bool)(raw >> 7 & 0x1); }
        
    /** Sets state variable 0Eh */
    void set_DBE_PGV0E(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }

    /** Gets state variable 0Eh */
    bool get_DBE_PGV0E() const { return (bool)(raw >> 6 & 0x1); }
        
    /** Sets State variable 0Dh */
    void set_DBE_PGV0D(bool value){ raw = (raw & 0xffffffffffffffdf) | ((uint64_t)value & 0x1) << 5; }

    /** Gets State variable 0Dh */
    bool get_DBE_PGV0D() const { return (bool)(raw >> 5 & 0x1); }
        
    /** Sets state variable 0Ch */
    void set_DBE_PGV0C(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }

    /** Gets state variable 0Ch */
    bool get_DBE_PGV0C() const { return (bool)(raw >> 4 & 0x1); }
        
    /** Sets state variable 0Bh */
    void set_DBE_PGV0B(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }

    /** Gets state variable 0Bh */
    bool get_DBE_PGV0B() const { return (bool)(raw >> 3 & 0x1); }
        
    /** Sets State variable 0Ah */
    void set_DBE_PGV0A(bool value){ raw = (raw & 0xfffffffffffffffb) | ((uint64_t)value & 0x1) << 2; }

    /** Gets State variable 0Ah */
    bool get_DBE_PGV0A() const { return (bool)(raw >> 2 & 0x1); }
        
    /** Sets state variable 09h */
    void set_DBE_PGV09(bool value){ raw = (raw & 0xfffffffffffffffd) | ((uint64_t)value & 0x1) << 1; }

    /** Gets state variable 09h */
    bool get_DBE_PGV09() const { return (bool)(raw >> 1 & 0x1); }
        
    /** Sets state variable 08h */
    void set_DBE_PGV08(bool value){ raw = (raw & 0xfffffffffffffffe) | ((uint64_t)value & 0x1) << 0; }

    /** Gets state variable 08h */
    bool get_DBE_PGV08() const { return (bool)(raw >> 0 & 0x1); }
        
} SD_RS_DBE;



class ECU_DBE {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case DBE_A1_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case DBE_A2_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case DBE_A4_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case SD_RS_DBE_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to DBE_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_DBE_A1(uint64_t now, uint64_t max_expire_time, DBE_A1* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to DBE_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_DBE_A2(uint64_t now, uint64_t max_expire_time, DBE_A2* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to DBE_A4
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_DBE_A4(uint64_t now, uint64_t max_expire_time, DBE_A4* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[2] && now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to SD_RS_DBE
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SD_RS_DBE(uint64_t now, uint64_t max_expire_time, SD_RS_DBE* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[3] && now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[4];
		uint64_t LAST_FRAME_TIMES[4];
};
#endif // __ECU_DBE_H_