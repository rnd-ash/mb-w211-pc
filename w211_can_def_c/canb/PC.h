
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'PC'
*/

#ifndef __ECU_PC_H_
#define __ECU_PC_H_

#include <stdint.h>
    
#define PC_CTRL_PANEL_CAN_ID 0x002D



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PC_CTRL_PANEL */
	uint32_t get_canid(){ return PC_CTRL_PANEL_CAN_ID; }
    /** Sets Passenger cooler button pressed */
    void set_PASS_COOLER_PRESSED(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Passenger cooler button pressed */
    bool get_PASS_COOLER_PRESSED() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Passenger heater button pressed */
    void set_PASS_HEATER_PRESSED(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Passenger heater button pressed */
    bool get_PASS_HEATER_PRESSED() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Driver cooler button pressed */
    void set_DRIVER_COOLER_PRESSED(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Driver cooler button pressed */
    bool get_DRIVER_COOLER_PRESSED() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Driver heater button pressed */
    void set_DRIVER_HEATER_PRESSED(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Driver heater button pressed */
    bool get_DRIVER_HEATER_PRESSED() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Lock button pressed */
    void set_LOCK(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Lock button pressed */
    bool get_LOCK() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Unlock button pressed */
    void set_UNLOCK(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Unlock button pressed */
    bool get_UNLOCK() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Blind button pressed */
    void set_BLIND(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Blind button pressed */
    bool get_BLIND() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Headreset button pressed */
    void set_HEADREST(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Headreset button pressed */
    bool get_HEADREST() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets ESP OFF button pressed */
    void set_ESPOFF(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets ESP OFF button pressed */
    bool get_ESPOFF() const { return (bool)(raw >> 55 & 0x1); }
        
} PC_CTRL_PANEL;



class ECU_PC {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case PC_CTRL_PANEL_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to PC_CTRL_PANEL
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PC_CTRL_PANEL(uint64_t now, uint64_t max_expire_time, PC_CTRL_PANEL* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[1];
		uint64_t LAST_FRAME_TIMES[1];
};
#endif // __ECU_PC_H_