
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'MRM'
*/

#ifndef __ECU_MRM_H_
#define __ECU_MRM_H_

#include <stdint.h>
    
#define MRM_A1_CAN_ID 0x0006
#define MRM_A2_CAN_ID 0x01A8
#define MRM_A3_CAN_ID 0x0296
#define SD_RS_MRM_CAN_ID 0x07D5



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MRM_A1 */
	uint32_t get_canid(){ return MRM_A1_CAN_ID; }
    /** Sets Turn on the horn */
    void set_SGH_EIN_LR(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Turn on the horn */
    bool get_SGH_EIN_LR() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Switch on headlight flasher */
    void set_LHP_EIN(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Switch on headlight flasher */
    bool get_LHP_EIN() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Turn on high beam (requirement) */
    void set_FL_EIN(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Turn on high beam (requirement) */
    bool get_FL_EIN() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Turn signal right (requirement) */
    void set_BLI_RE(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Turn signal right (requirement) */
    bool get_BLI_RE() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Turn signal left (requirement) */
    void set_BLI_LI(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Turn signal left (requirement) */
    bool get_BLI_LI() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets LSS in position III (level 2, requirement) */
    void set_SCH_WI_2(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets LSS in position III (level 2, requirement) */
    bool get_SCH_WI_2() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets LSS in position II (level 1, requirement) */
    void set_SCH_WI_1(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets LSS in position II (level 1, requirement) */
    bool get_SCH_WI_1() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets LSS in position I (rain sensor operation) */
    void set_SCH_WI_INT(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets LSS in position I (rain sensor operation) */
    bool get_SCH_WI_INT() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Wash pressed */
    void set_WASCHEN(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Wash pressed */
    bool get_WASCHEN() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets touch wipe activated (not W211) */
    void set_TIPP_WISCH(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets touch wipe activated (not W211) */
    bool get_TIPP_WISCH() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Switch on voice control */
    void set_SBS_EIN(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets Switch on voice control */
    bool get_SBS_EIN() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets Switch off voice control */
    void set_SBS_AUS(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Switch off voice control */
    bool get_SBS_AUS() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets Steering angle parity bit (even parity) */
    void set_LW_PA_B(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Steering angle parity bit (even parity) */
    bool get_LW_PA_B() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Steering Angle Sensor: Overflow */
    void set_LW_OV_B(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Steering Angle Sensor: Overflow */
    bool get_LW_OV_B() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Steering angle sensor: code error */
    void set_LW_CF_B(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Steering angle sensor: code error */
    bool get_LW_CF_B() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Steering angle sensor: not initialized */
    void set_LW_INI_B(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Steering angle sensor: not initialized */
    bool get_LW_INI_B() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets Steering angle sign (right [0], left [1]) */
    void set_LW_VZ_B(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets Steering angle sign (right [0], left [1]) */
    bool get_LW_VZ_B() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets steering angle. Conversion formula (To raw from real): y=(x-0.0)/0.50 (Unit: °) */
    void set_LW_B(uint16_t value){ raw = (raw & 0xfffffff800ffffff) | ((uint64_t)value & 0x7ff) << 24; }

    /** Gets steering angle. Conversion formula (To real from raw): y=(0.50x)+0.0 (Unit: °) */
    uint16_t get_LW_B() const { return (uint16_t)(raw >> 24 & 0x7ff); }
        
} MRM_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MRM_A2 */
	uint32_t get_canid(){ return MRM_A2_CAN_ID; }
    /** Sets Bottom right button down */
    void set_WIPPE_4_2(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Bottom right button down */
    bool get_WIPPE_4_2() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Bottom right button up */
    void set_WIPPE_4_1(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Bottom right button up */
    bool get_WIPPE_4_1() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Key right top down */
    void set_WIPPE_3_2(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Key right top down */
    bool get_WIPPE_3_2() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Top right button up */
    void set_WIPPE_3_1(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Top right button up */
    bool get_WIPPE_3_1() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Bottom left button down */
    void set_WIPPE_2_2(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Bottom left button down */
    bool get_WIPPE_2_2() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Bottom left button up */
    void set_WIPPE_2_1(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Bottom left button up */
    bool get_WIPPE_2_1() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Top left key down */
    void set_WIPPE_1_2(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Top left key down */
    bool get_WIPPE_1_2() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Top left button up */
    void set_WIPPE_1_1(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Top left button up */
    bool get_WIPPE_1_1() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets reserves */
    void set_WIPPE_8_2(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets reserves */
    bool get_WIPPE_8_2() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets reserves */
    void set_WIPPE_8_1(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets reserves */
    bool get_WIPPE_8_1() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets reserves */
    void set_WIPPE_7_2(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets reserves */
    bool get_WIPPE_7_2() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets reserves */
    void set_WIPPE_7_1(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets reserves */
    bool get_WIPPE_7_1() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets reserves */
    void set_WIPPE_6_2(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets reserves */
    bool get_WIPPE_6_2() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets reserves */
    void set_WIPPE_6_1(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets reserves */
    bool get_WIPPE_6_1() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets reserves */
    void set_WIPPE_5_2(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets reserves */
    bool get_WIPPE_5_2() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets reserves */
    void set_WIPPE_5_1(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets reserves */
    bool get_WIPPE_5_1() const { return (bool)(raw >> 48 & 0x1); }
        
} MRM_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of MRM_A3 */
	uint32_t get_canid(){ return MRM_A3_CAN_ID; }
    /** Sets Steering column backwards (towards the driver) */
    void set_LS_ZUR_MRM(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Steering column backwards (towards the driver) */
    bool get_LS_ZUR_MRM() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Steering column forward */
    void set_LS_VOR_MRM(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Steering column forward */
    bool get_LS_VOR_MRM() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Steering column down */
    void set_LS_AB_MRM(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Steering column down */
    bool get_LS_AB_MRM() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Steering column up */
    void set_LS_AUF_MRM(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Steering column up */
    bool get_LS_AUF_MRM() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Steering column adjustment lever turned down */
    void set_LSVH_UN(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Steering column adjustment lever turned down */
    bool get_LSVH_UN() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Steering column adjustment lever turned up */
    void set_LSVH_OB(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Steering column adjustment lever turned up */
    bool get_LSVH_OB() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Error code $9073 */
    void set_DTC8_ELK(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Error code $9073 */
    bool get_DTC8_ELK() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Error code $9072 */
    void set_DTC7_ELK(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Error code $9072 */
    bool get_DTC7_ELK() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Error code $9071 */
    void set_DTC6_ELK(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Error code $9071 */
    bool get_DTC6_ELK() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Error code $9070 */
    void set_DTC5_ELK(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Error code $9070 */
    bool get_DTC5_ELK() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets Error code $9063 */
    void set_DTC4_ELK(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets Error code $9063 */
    bool get_DTC4_ELK() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets Error code $9062 */
    void set_DTC3_ELK(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets Error code $9062 */
    bool get_DTC3_ELK() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets Error code $9061 */
    void set_DTC2_ELK(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets Error code $9061 */
    bool get_DTC2_ELK() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets Error code $9060 */
    void set_DTC1_ELK(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Error code $9060 */
    bool get_DTC1_ELK() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets ELH defective */
    void set_ELH_DEF(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets ELH defective */
    bool get_ELH_DEF() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Error code $9076 */
    void set_DTC11_ELK(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Error code $9076 */
    bool get_DTC11_ELK() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets Error code $9075 */
    void set_DTC10_ELK(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets Error code $9075 */
    bool get_DTC10_ELK() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets Error code $9074 */
    void set_DTC9_ELK(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets Error code $9074 */
    bool get_DTC9_ELK() const { return (bool)(raw >> 32 & 0x1); }
        
} MRM_A3;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SD_RS_MRM */
	uint32_t get_canid(){ return SD_RS_MRM_CAN_ID; }
    /** Sets Identification for > 8 bytes */
    void set_MRM_KENN(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Identification for > 8 bytes */
    bool get_MRM_KENN() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets error vector 07h */
    void set_MRM_FV07(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets error vector 07h */
    bool get_MRM_FV07() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets error vector 06h */
    void set_MRM_FV06(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets error vector 06h */
    bool get_MRM_FV06() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets error vector 05h */
    void set_MRM_FV05(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets error vector 05h */
    bool get_MRM_FV05() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets error vector 04h */
    void set_MRM_FV04(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets error vector 04h */
    bool get_MRM_FV04() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets error vector 03h */
    void set_MRM_FV03(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets error vector 03h */
    bool get_MRM_FV03() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets error vector 02h */
    void set_MRM_FV02(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets error vector 02h */
    bool get_MRM_FV02() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets error vector 01h */
    void set_MRM_FV01(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets error vector 01h */
    bool get_MRM_FV01() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets error vector 0Fh */
    void set_MRM_FV0F(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets error vector 0Fh */
    bool get_MRM_FV0F() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets error vector 0Eh */
    void set_MRM_FV0E(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets error vector 0Eh */
    bool get_MRM_FV0E() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets error vector 0Dh */
    void set_MRM_FV0D(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets error vector 0Dh */
    bool get_MRM_FV0D() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets error vector 0Ch */
    void set_MRM_FV0C(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets error vector 0Ch */
    bool get_MRM_FV0C() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets error vector 0Bh */
    void set_MRM_FV0B(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets error vector 0Bh */
    bool get_MRM_FV0B() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets error vector 0Ah */
    void set_MRM_FV0A(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets error vector 0Ah */
    bool get_MRM_FV0A() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets error vector 09h */
    void set_MRM_FV09(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets error vector 09h */
    bool get_MRM_FV09() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets error vector 08h */
    void set_MRM_FV08(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets error vector 08h */
    bool get_MRM_FV08() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets error vector 17h */
    void set_MRM_FV17(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets error vector 17h */
    bool get_MRM_FV17() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets error vector 16h */
    void set_MRM_FV16(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets error vector 16h */
    bool get_MRM_FV16() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets error vector 15h */
    void set_MRM_FV15(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets error vector 15h */
    bool get_MRM_FV15() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets error vector 14h */
    void set_MRM_FV14(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets error vector 14h */
    bool get_MRM_FV14() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets error vector 13h */
    void set_MRM_FV13(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets error vector 13h */
    bool get_MRM_FV13() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets error vector 12h */
    void set_MRM_FV12(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets error vector 12h */
    bool get_MRM_FV12() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets error vector 11h */
    void set_MRM_FV11(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets error vector 11h */
    bool get_MRM_FV11() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets error vector 10h */
    void set_MRM_FV10(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets error vector 10h */
    bool get_MRM_FV10() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets error vector 1Fh */
    void set_MRM_FV1F(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets error vector 1Fh */
    bool get_MRM_FV1F() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets error vector 1Eh */
    void set_MRM_FV1E(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets error vector 1Eh */
    bool get_MRM_FV1E() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets error vector 1Dh */
    void set_MRM_FV1D(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets error vector 1Dh */
    bool get_MRM_FV1D() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Error vector 1Ch */
    void set_MRM_FV1C(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Error vector 1Ch */
    bool get_MRM_FV1C() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets error vector 1Bh */
    void set_MRM_FV1B(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets error vector 1Bh */
    bool get_MRM_FV1B() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Error vector 1Ah */
    void set_MRM_FV1A(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Error vector 1Ah */
    bool get_MRM_FV1A() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets error vector 19h */
    void set_MRM_FV19(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets error vector 19h */
    bool get_MRM_FV19() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets error vector 18h */
    void set_MRM_FV18(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets error vector 18h */
    bool get_MRM_FV18() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets error vector 27h */
    void set_MRM_FV27(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets error vector 27h */
    bool get_MRM_FV27() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets error vector 26h */
    void set_MRM_FV26(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets error vector 26h */
    bool get_MRM_FV26() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets error vector 25h */
    void set_MRM_FV25(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets error vector 25h */
    bool get_MRM_FV25() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets error vector 24h */
    void set_MRM_FV24(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets error vector 24h */
    bool get_MRM_FV24() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets error vector 23h */
    void set_MRM_FV23(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets error vector 23h */
    bool get_MRM_FV23() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets error vector 22h */
    void set_MRM_FV22(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets error vector 22h */
    bool get_MRM_FV22() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets error vector 21h */
    void set_MRM_FV21(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets error vector 21h */
    bool get_MRM_FV21() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets error vector 20h */
    void set_MRM_FV20(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets error vector 20h */
    bool get_MRM_FV20() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets error vector 2Fh */
    void set_MRM_FV2F(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets error vector 2Fh */
    bool get_MRM_FV2F() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets error vector 2Eh */
    void set_MRM_FV2E(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets error vector 2Eh */
    bool get_MRM_FV2E() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets error vector 2Dh */
    void set_MRM_FV2D(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets error vector 2Dh */
    bool get_MRM_FV2D() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets error vector 2Ch */
    void set_MRM_FV2C(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets error vector 2Ch */
    bool get_MRM_FV2C() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets error vector 2Bh */
    void set_MRM_FV2B(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets error vector 2Bh */
    bool get_MRM_FV2B() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets Error vector 2Ah */
    void set_MRM_FV2A(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets Error vector 2Ah */
    bool get_MRM_FV2A() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets error vector 29h */
    void set_MRM_FV29(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets error vector 29h */
    bool get_MRM_FV29() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets error vector 28h */
    void set_MRM_FV28(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets error vector 28h */
    bool get_MRM_FV28() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets state variable 08h */
    void set_MRM_PGV08(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }

    /** Gets state variable 08h */
    bool get_MRM_PGV08() const { return (bool)(raw >> 15 & 0x1); }
        
    /** Sets state variable 07h */
    void set_MRM_PGV07(bool value){ raw = (raw & 0xffffffffffffbfff) | ((uint64_t)value & 0x1) << 14; }

    /** Gets state variable 07h */
    bool get_MRM_PGV07() const { return (bool)(raw >> 14 & 0x1); }
        
    /** Sets state variable 06h */
    void set_MRM_PGV06(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets state variable 06h */
    bool get_MRM_PGV06() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets state variable 05h */
    void set_MRM_PGV05(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets state variable 05h */
    bool get_MRM_PGV05() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets state variable 04h */
    void set_MRM_PGV04(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets state variable 04h */
    bool get_MRM_PGV04() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets state variable 03h */
    void set_MRM_PGV03(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets state variable 03h */
    bool get_MRM_PGV03() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets state variable 02h */
    void set_MRM_PGV02(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets state variable 02h */
    bool get_MRM_PGV02() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets state variable 01h */
    void set_MRM_PGV01(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets state variable 01h */
    bool get_MRM_PGV01() const { return (bool)(raw >> 8 & 0x1); }
        
} SD_RS_MRM;



class ECU_MRM {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case MRM_A1_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case MRM_A2_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case MRM_A3_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case SD_RS_MRM_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to MRM_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MRM_A1(uint64_t now, uint64_t max_expire_time, MRM_A1* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to MRM_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MRM_A2(uint64_t now, uint64_t max_expire_time, MRM_A2* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to MRM_A3
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_MRM_A3(uint64_t now, uint64_t max_expire_time, MRM_A3* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[2] && now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to SD_RS_MRM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SD_RS_MRM(uint64_t now, uint64_t max_expire_time, SD_RS_MRM* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[3] && now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[4];
		uint64_t LAST_FRAME_TIMES[4];
};
#endif // __ECU_MRM_H_