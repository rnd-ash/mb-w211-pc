
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'KOMBI'
*/

#ifndef __ECU_KOMBI_H_
#define __ECU_KOMBI_H_

#include <stdint.h>
    
#define KOMBI_A1_CAN_ID 0x000C
#define KOMBI_A2_CAN_ID 0x0038
#define KOMBI_A5_CAN_ID 0x01CA
#define KOMBI_A6_CAN_ID 0x009E
#define KOMBI_A7_CAN_ID 0x0194
#define KOMBI_A8_CAN_ID 0x032A
#define KOMBI_A9_CAN_ID 0x01CB
#define SD_RS_KOMBI_CAN_ID 0x07D4

/** language */
enum class KOMBI_A1_SPRACHE {
	DEUTSCH = 0, // German
	ENGLISCH = 1, // English
	FRANZOESISCH = 2, // French
	ITALIENISCH = 3, // Italian
	SPANISCH = 4, // Spanish
	JAPANISCH = 5, // Japanese
	SNV = 15, // Signal not available
};

/** Ambient light level */
enum class KOMBI_A1_AMB_LI {
	AUS = 0, // off
	DIMMSTUFE_1 = 1, // dimming level 1
	DIMMSTUFE_2 = 2, // dimming level 2
	DIMMSTUFE_3 = 3, // dimming level 3
	DIMMSTUFE_4 = 4, // dimming level 4
	DIMMSTUFE_5 = 5, // Dimming level 5
};

/** status combination */
enum class KOMBI_A5_KI_STAT {
	reserviert = 0, // Unknown
	reserviert1 = 1, // Unknown
	Neutral = 2, // Unknown
	AUDIO = 3, // Audio
	NAVI = 4, // Navigation
	TEL = 5, // phone
	NEU_SER = 6, // New services
	SPR_FNK_DLG_CLO = 19, // Speech radio AI Dlg closed
	DAT_FNK_DLG_CLO = 20, // Data radio AI Dlg closed
	SPR_FNK_DLG_OPN = 21, // Voice radio AI Dlg opened
	DAT_FNK_DLG_OPN = 22, // Data radio AI Dlg opened
	SNV = 255, // Signal not available
};

/** status combination */
enum class KOMBI_A8_KI_STAT_MSS {
	reserviert = 0, // Unknown
	reserviert1 = 1, // Unknown
	Neutral = 2, // Unknown
	AUDIO = 3, // Audio
	NAVI = 4, // Navigation
	TEL = 5, // phone
	NEU_SER = 6, // New services
	SPR_FNK_DLG_CLO = 19, // Speech radio AI Dlg closed
	DAT_FNK_DLG_CLO = 20, // Data radio AI Dlg closed
	SPR_FNK_DLG_OPN = 21, // Voice radio AI Dlg opened
	DAT_FNK_DLG_OPN = 22, // Data radio AI Dlg opened
	SNV = 255, // Signal not available
};

/** Icon confirmation */
enum class KOMBI_A9_KOMBI_IPS_INDICATION {
	NO_ICON = 0, // No icon received
	ICON = 1, // Icon received
	ICON_DSP = 2, // Start icon output
	ICON_DEL = 3, // Icon in display deleted
	ICON_WEG = 4, // Icon request rejected
	ICON_IGN = 5, // Icon request was ignored
	SNV = 7, // Signal not available
};

/** IPS configuration */
enum class KOMBI_A9_KOMBI_IPS_CONF {
	IPS_AUS = 0, // IPS off
	IPS_KOMFORT = 1, // IPS comfort
	IPS_DEFAULT = 2, // IPS default=DEFAULT
	IPS_SPORT = 3, // IPS Sport
	IPS_FEHLER = 4, // IPS menu not configured
	SNV = 15, // Signal not available
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_A1 */
	uint32_t get_canid(){ return KOMBI_A1_CAN_ID; }
    /** Sets Brightness of instrument lighting. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %) */
    void set_KL_58D_B(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Brightness of instrument lighting. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %) */
    uint8_t get_KL_58D_B() const { return (uint8_t)(raw >> 56 & 0xff); }
        
    /** Sets vehicle speed. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: km/h) */
    void set_V_SIGNAL(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets vehicle speed. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: km/h) */
    uint8_t get_V_SIGNAL() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Turn on roof sign (Taxi) on [1], off [0] */
    void set_DZ_EIN(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Turn on roof sign (Taxi) on [1], off [0] */
    bool get_DZ_EIN() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Tank level minimum */
    void set_TFSM_B(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Tank level minimum */
    bool get_TFSM_B() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Automatic door lock: on [1], off [0] */
    void set_AUTO_TUER(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Automatic door lock: on [1], off [0] */
    bool get_AUTO_TUER() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Temperature unit "째C" [1], "째F" [0] */
    void set_T_C(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Temperature unit "째C" [1], "째F" [0] */
    bool get_T_C() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets daytime running lights on */
    void set_TFL_EIN(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets daytime running lights on */
    bool get_TFL_EIN() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets Switch on trailer monitoring */
    void set_ANH_UEBW(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets Switch on trailer monitoring */
    bool get_ANH_UEBW() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets Key dependent storage : on [1], off [0] */
    void set_SCHLUE_ABH_EIN(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets Key dependent storage : on [1], off [0] */
    bool get_SCHLUE_ABH_EIN() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets Mirror in park position: blocked [1], allowed [0] */
    void set_SP_PARK_SPERR(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Mirror in park position: blocked [1], allowed [0] */
    bool get_SP_PARK_SPERR() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets Store lengthwise seat position for I/O assistance */
    void set_ESH_POS_SP(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Store lengthwise seat position for I/O assistance */
    bool get_ESH_POS_SP() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Mirror folding in vehicle locking locked [1], allowed [0] */
    void set_SP_ANKL_SPERR(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Mirror folding in vehicle locking locked [1], allowed [0] */
    bool get_SP_ANKL_SPERR() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets FDS characteristics passenger dominant [1], subtle [0] */
    void set_FDS_B_CHAR(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets FDS characteristics passenger dominant [1], subtle [0] */
    bool get_FDS_B_CHAR() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets FDS characteristics driver dominant [1], subtle [0] */
    void set_FDS_F_CHAR(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets FDS characteristics driver dominant [1], subtle [0] */
    bool get_FDS_F_CHAR() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets Seat travel with I/O assistance set to standard */
    void set_ESH_POS_STD(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets Seat travel with I/O assistance set to standard */
    bool get_ESH_POS_STD() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Seat adjustment with I/O assistance on [1], off [0] */
    void set_ESH_SITZ_EIN(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Seat adjustment with I/O assistance on [1], off [0] */
    bool get_ESH_SITZ_EIN() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets Steering column adjustment with I/O help on [1], off [0] */
    void set_ESH_LENK_EIN(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets Steering column adjustment with I/O help on [1], off [0] */
    bool get_ESH_LENK_EIN() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets boarding assistance/automatic positioning on [1], off [0] */
    void set_ESH_AUTO_EIN(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets boarding assistance/automatic positioning on [1], off [0] */
    bool get_ESH_AUTO_EIN() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets memory scan [1], station scan [0] */
    void set_SLF(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets memory scan [1], station scan [0] */
    bool get_SLF() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets trip calculator "km" [1], "miles" [0] */
    void set_RR_KM(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets trip calculator "km" [1], "miles" [0] */
    bool get_RR_KM() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets Switch on main beam allowed */
    void set_FL_OK(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets Switch on main beam allowed */
    bool get_FL_OK() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets Ambient lighting on */
    void set_UFB_EIN(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets Ambient lighting on */
    bool get_UFB_EIN() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets language */
    void set_SPRACHE(KOMBI_A1_SPRACHE value){ raw = (raw & 0xfffffffff0ffffff) | ((uint64_t)value & 0xf) << 24; }

    /** Gets language */
    KOMBI_A1_SPRACHE get_SPRACHE() const { return (KOMBI_A1_SPRACHE)(raw >> 24 & 0xf); }
        
    /** Sets Switch on auxiliary heating/ventilation */
    void set_STHL_EIN_KOMBI(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets Switch on auxiliary heating/ventilation */
    bool get_STHL_EIN_KOMBI() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets preset time activated (LED on) */
    void set_VWZ_AKT(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets preset time activated (LED on) */
    bool get_VWZ_AKT() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets Preset time deactivated via MFL (LED off) */
    void set_VWZ_AUS_MFL(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets Preset time deactivated via MFL (LED off) */
    bool get_VWZ_AUS_MFL() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets Ambient light level */
    void set_AMB_LI(KOMBI_A1_AMB_LI value){ raw = (raw & 0xffffffffffe1ffff) | ((uint64_t)value & 0xf) << 17; }

    /** Gets Ambient light level */
    KOMBI_A1_AMB_LI get_AMB_LI() const { return (KOMBI_A1_AMB_LI)(raw >> 17 & 0xf); }
        
    /** Sets Activate RDK */
    void set_RDK_AKT(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets Activate RDK */
    bool get_RDK_AKT() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets Interior lighting afterglow time. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: s) */
    void set_INLI_NLZ(uint8_t value){ raw = (raw & 0xffffffffffff00ff) | ((uint64_t)value & 0xff) << 8; }

    /** Gets Interior lighting afterglow time. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: s) */
    uint8_t get_INLI_NLZ() const { return (uint8_t)(raw >> 8 & 0xff); }
        
    /** Sets Parking or fog light afterglow time (SWA). Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: s) */
    void set_ABL_NLZ(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets Parking or fog light afterglow time (SWA). Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: s) */
    uint8_t get_ABL_NLZ() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} KOMBI_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_A2 */
	uint32_t get_canid(){ return KOMBI_A2_CAN_ID; }
    /** Sets Daily circulation counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Tage) */
    void set_TAGE_ZAHL(uint16_t value){ raw = (raw & 0x0000ffffffffffff) | ((uint64_t)value & 0xffff) << 48; }

    /** Gets Daily circulation counter. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Tage) */
    uint16_t get_TAGE_ZAHL() const { return (uint16_t)(raw >> 48 & 0xffff); }
        
    /** Sets Day. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Tage) */
    void set_TAG(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Day. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Tage) */
    uint8_t get_TAG() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets month. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Monate) */
    void set_MONAT(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets month. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Monate) */
    uint8_t get_MONAT() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets year. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Jahre) */
    void set_JAHR(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets year. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Jahre) */
    uint8_t get_JAHR() const { return (uint8_t)(raw >> 24 & 0xff); }
        
} KOMBI_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_A5 */
	uint32_t get_canid(){ return KOMBI_A5_CAN_ID; }
    /** Sets status combination */
    void set_KI_STAT(KOMBI_A5_KI_STAT value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets status combination */
    KOMBI_A5_KI_STAT get_KI_STAT() const { return (KOMBI_A5_KI_STAT)(raw >> 56 & 0xff); }
        
    /** Sets Telephone End */
    void set_BUTTON_4_2(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Telephone End */
    bool get_BUTTON_4_2() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Phone send */
    void set_BUTTON_4_1(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Phone send */
    bool get_BUTTON_4_1() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets key "-" */
    void set_BUTTON_3_2(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets key "-" */
    bool get_BUTTON_3_2() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets "+" button */
    void set_BUTTON_3_1(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets "+" button */
    bool get_BUTTON_3_1() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_2_2(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets reserves */
    bool get_BUTTON_2_2() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_2_1(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets reserves */
    bool get_BUTTON_2_1() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Previous screen */
    void set_BUTTON_1_2(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Previous screen */
    bool get_BUTTON_1_2() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Next screen */
    void set_BUTTON_1_1(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Next screen */
    bool get_BUTTON_1_1() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_8_2(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets reserves */
    bool get_BUTTON_8_2() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_8_1(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets reserves */
    bool get_BUTTON_8_1() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_7_2(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets reserves */
    bool get_BUTTON_7_2() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_7_1(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets reserves */
    bool get_BUTTON_7_1() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_6_2(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets reserves */
    bool get_BUTTON_6_2() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_6_1(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets reserves */
    bool get_BUTTON_6_1() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_5_2(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets reserves */
    bool get_BUTTON_5_2() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_5_1(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets reserves */
    bool get_BUTTON_5_1() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_4_2(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets reserves */
    bool get_PTT_4_2() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_4_1(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets reserves */
    bool get_PTT_4_1() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_3_2(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets reserves */
    bool get_PTT_3_2() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_3_1(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets reserves */
    bool get_PTT_3_1() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_2_2(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets reserves */
    bool get_PTT_2_2() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_2_1(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets reserves */
    bool get_PTT_2_1() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets Deactivate Linguatronic */
    void set_PTT_1_2(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets Deactivate Linguatronic */
    bool get_PTT_1_2() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets Activate Linguatronic */
    void set_PTT_1_1(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets Activate Linguatronic */
    bool get_PTT_1_1() const { return (bool)(raw >> 32 & 0x1); }
        
} KOMBI_A5;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_A6 */
	uint32_t get_canid(){ return KOMBI_A6_CAN_ID; }
    /** Sets KOMBI key ID. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_SCHLUE_ID_KI(uint32_t value){ raw = (raw & 0x00000000ffffffff) | ((uint64_t)value & 0xffffffff) << 32; }

    /** Gets KOMBI key ID. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint32_t get_SCHLUE_ID_KI() const { return (uint32_t)(raw >> 32 & 0xffffffff); }
        
    /** Sets transmitted mileage from the KOMBI. Conversion formula (To raw from real): y=(x-0.0)/0.10 (Unit: km) */
    void set_KM_KI(uint32_t value){ raw = (raw & 0xffffffff000000ff) | ((uint64_t)value & 0xffffff) << 8; }

    /** Gets transmitted mileage from the KOMBI. Conversion formula (To real from raw): y=(0.10x)+0.0 (Unit: km) */
    uint32_t get_KM_KI() const { return (uint32_t)(raw >> 8 & 0xffffff); }
        
} KOMBI_A6;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_A7 */
	uint32_t get_canid(){ return KOMBI_A7_CAN_ID; }
    /** Sets Display dimming. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %) */
    void set_DISP_DIMM(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Display dimming. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %) */
    uint8_t get_DISP_DIMM() const { return (uint8_t)(raw >> 56 & 0xff); }
        
    /** Sets trunk lid limitation on */
    void set_HD_BEGRENZ(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets trunk lid limitation on */
    bool get_HD_BEGRENZ() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Kombi is capable of added value */
    void set_KOMBI_MW_OK(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Kombi is capable of added value */
    bool get_KOMBI_MW_OK() const { return (bool)(raw >> 48 & 0x1); }
        
} KOMBI_A7;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_A8 */
	uint32_t get_canid(){ return KOMBI_A8_CAN_ID; }
    /** Sets status combination */
    void set_KI_STAT_MSS(KOMBI_A8_KI_STAT_MSS value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets status combination */
    KOMBI_A8_KI_STAT_MSS get_KI_STAT_MSS() const { return (KOMBI_A8_KI_STAT_MSS)(raw >> 56 & 0xff); }
        
    /** Sets Telephone End */
    void set_BUTTON_4_2_MSS(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Telephone End */
    bool get_BUTTON_4_2_MSS() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Phone send */
    void set_BUTTON_4_1_MSS(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Phone send */
    bool get_BUTTON_4_1_MSS() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets key "-" */
    void set_BUTTON_3_2_MSS(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets key "-" */
    bool get_BUTTON_3_2_MSS() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets "+" button */
    void set_BUTTON_3_1_MSS(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets "+" button */
    bool get_BUTTON_3_1_MSS() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_2_2_MSS(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets reserves */
    bool get_BUTTON_2_2_MSS() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_2_1_MSS(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets reserves */
    bool get_BUTTON_2_1_MSS() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Previous screen */
    void set_BUTTON_1_2_MSS(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Previous screen */
    bool get_BUTTON_1_2_MSS() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Next screen */
    void set_BUTTON_1_1_MSS(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Next screen */
    bool get_BUTTON_1_1_MSS() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_8_2_MSS(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets reserves */
    bool get_BUTTON_8_2_MSS() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_8_1_MSS(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets reserves */
    bool get_BUTTON_8_1_MSS() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_7_2_MSS(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets reserves */
    bool get_BUTTON_7_2_MSS() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_7_1_MSS(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets reserves */
    bool get_BUTTON_7_1_MSS() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_6_2_MSS(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets reserves */
    bool get_BUTTON_6_2_MSS() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_6_1_MSS(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets reserves */
    bool get_BUTTON_6_1_MSS() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_5_2_MSS(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets reserves */
    bool get_BUTTON_5_2_MSS() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets reserves */
    void set_BUTTON_5_1_MSS(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets reserves */
    bool get_BUTTON_5_1_MSS() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_4_2_MSS(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets reserves */
    bool get_PTT_4_2_MSS() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_4_1_MSS(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets reserves */
    bool get_PTT_4_1_MSS() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_3_2_MSS(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets reserves */
    bool get_PTT_3_2_MSS() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_3_1_MSS(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets reserves */
    bool get_PTT_3_1_MSS() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_2_2_MSS(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets reserves */
    bool get_PTT_2_2_MSS() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets reserves */
    void set_PTT_2_1_MSS(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets reserves */
    bool get_PTT_2_1_MSS() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets Deactivate Linguatronic */
    void set_PTT_1_2_MSS(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets Deactivate Linguatronic */
    bool get_PTT_1_2_MSS() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets Activate Linguatronic */
    void set_PTT_1_1_MSS(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets Activate Linguatronic */
    bool get_PTT_1_1_MSS() const { return (bool)(raw >> 32 & 0x1); }
        
} KOMBI_A8;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_A9 */
	uint32_t get_canid(){ return KOMBI_A9_CAN_ID; }
    /** Sets IPS update request */
    void set_KOMBI_IPS_UPD(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets IPS update request */
    bool get_KOMBI_IPS_UPD() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Icon confirmation */
    void set_KOMBI_IPS_INDICATION(KOMBI_A9_KOMBI_IPS_INDICATION value){ raw = (raw & 0x8fffffffffffffff) | ((uint64_t)value & 0x7) << 60; }

    /** Gets Icon confirmation */
    KOMBI_A9_KOMBI_IPS_INDICATION get_KOMBI_IPS_INDICATION() const { return (KOMBI_A9_KOMBI_IPS_INDICATION)(raw >> 60 & 0x7); }
        
    /** Sets IPS configuration */
    void set_KOMBI_IPS_CONF(KOMBI_A9_KOMBI_IPS_CONF value){ raw = (raw & 0xf0ffffffffffffff) | ((uint64_t)value & 0xf) << 56; }

    /** Gets IPS configuration */
    KOMBI_A9_KOMBI_IPS_CONF get_KOMBI_IPS_CONF() const { return (KOMBI_A9_KOMBI_IPS_CONF)(raw >> 56 & 0xf); }
        
} KOMBI_A9;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SD_RS_KOMBI */
	uint32_t get_canid(){ return SD_RS_KOMBI_CAN_ID; }
    /** Sets Identification for > 8 bytes */
    void set_KOMBI_KENN(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Identification for > 8 bytes */
    bool get_KOMBI_KENN() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets error vector 07h */
    void set_KOMBI_FV07(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets error vector 07h */
    bool get_KOMBI_FV07() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets error vector 06h */
    void set_KOMBI_FV06(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets error vector 06h */
    bool get_KOMBI_FV06() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets error vector 05h */
    void set_KOMBI_FV05(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets error vector 05h */
    bool get_KOMBI_FV05() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets error vector 04h */
    void set_KOMBI_FV04(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets error vector 04h */
    bool get_KOMBI_FV04() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets error vector 03h */
    void set_KOMBI_FV03(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets error vector 03h */
    bool get_KOMBI_FV03() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets error vector 02h */
    void set_KOMBI_FV02(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets error vector 02h */
    bool get_KOMBI_FV02() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets error vector 01h */
    void set_KOMBI_FV01(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets error vector 01h */
    bool get_KOMBI_FV01() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets error vector 0Fh */
    void set_KOMBI_FV0F(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets error vector 0Fh */
    bool get_KOMBI_FV0F() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets error vector 0Eh */
    void set_KOMBI_FV0E(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets error vector 0Eh */
    bool get_KOMBI_FV0E() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets error vector 0Dh */
    void set_KOMBI_FV0D(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets error vector 0Dh */
    bool get_KOMBI_FV0D() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets error vector 0Ch */
    void set_KOMBI_FV0C(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets error vector 0Ch */
    bool get_KOMBI_FV0C() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets error vector 0Bh */
    void set_KOMBI_FV0B(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets error vector 0Bh */
    bool get_KOMBI_FV0B() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets error vector 0Ah */
    void set_KOMBI_FV0A(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets error vector 0Ah */
    bool get_KOMBI_FV0A() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets error vector 09h */
    void set_KOMBI_FV09(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets error vector 09h */
    bool get_KOMBI_FV09() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets error vector 08h */
    void set_KOMBI_FV08(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets error vector 08h */
    bool get_KOMBI_FV08() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets error vector 17h */
    void set_KOMBI_FV17(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets error vector 17h */
    bool get_KOMBI_FV17() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets error vector 16h */
    void set_KOMBI_FV16(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets error vector 16h */
    bool get_KOMBI_FV16() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets error vector 15h */
    void set_KOMBI_FV15(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets error vector 15h */
    bool get_KOMBI_FV15() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets error vector 14h */
    void set_KOMBI_FV14(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets error vector 14h */
    bool get_KOMBI_FV14() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets error vector 13h */
    void set_KOMBI_FV13(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets error vector 13h */
    bool get_KOMBI_FV13() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets error vector 12h */
    void set_KOMBI_FV12(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets error vector 12h */
    bool get_KOMBI_FV12() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets error vector 11h */
    void set_KOMBI_FV11(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets error vector 11h */
    bool get_KOMBI_FV11() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets error vector 10h */
    void set_KOMBI_FV10(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets error vector 10h */
    bool get_KOMBI_FV10() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets error vector 1Fh */
    void set_KOMBI_FV1F(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets error vector 1Fh */
    bool get_KOMBI_FV1F() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets error vector 1Eh */
    void set_KOMBI_FV1E(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets error vector 1Eh */
    bool get_KOMBI_FV1E() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets error vector 1Dh */
    void set_KOMBI_FV1D(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets error vector 1Dh */
    bool get_KOMBI_FV1D() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Error vector 1Ch */
    void set_KOMBI_FV1C(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Error vector 1Ch */
    bool get_KOMBI_FV1C() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets error vector 1Bh */
    void set_KOMBI_FV1B(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets error vector 1Bh */
    bool get_KOMBI_FV1B() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Error vector 1Ah */
    void set_KOMBI_FV1A(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Error vector 1Ah */
    bool get_KOMBI_FV1A() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets error vector 19h */
    void set_KOMBI_FV19(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets error vector 19h */
    bool get_KOMBI_FV19() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets error vector 18h */
    void set_KOMBI_FV18(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets error vector 18h */
    bool get_KOMBI_FV18() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets error vector 27h */
    void set_KOMBI_FV27(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets error vector 27h */
    bool get_KOMBI_FV27() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets error vector 26h */
    void set_KOMBI_FV26(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets error vector 26h */
    bool get_KOMBI_FV26() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets error vector 25h */
    void set_KOMBI_FV25(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets error vector 25h */
    bool get_KOMBI_FV25() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets error vector 24h */
    void set_KOMBI_FV24(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets error vector 24h */
    bool get_KOMBI_FV24() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets error vector 23h */
    void set_KOMBI_FV23(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets error vector 23h */
    bool get_KOMBI_FV23() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets error vector 22h */
    void set_KOMBI_FV22(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets error vector 22h */
    bool get_KOMBI_FV22() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets error vector 21h */
    void set_KOMBI_FV21(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets error vector 21h */
    bool get_KOMBI_FV21() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets error vector 20h */
    void set_KOMBI_FV20(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets error vector 20h */
    bool get_KOMBI_FV20() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets error vector 2Fh */
    void set_KOMBI_FV2F(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets error vector 2Fh */
    bool get_KOMBI_FV2F() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets error vector 2Eh */
    void set_KOMBI_FV2E(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets error vector 2Eh */
    bool get_KOMBI_FV2E() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets error vector 2Dh */
    void set_KOMBI_FV2D(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets error vector 2Dh */
    bool get_KOMBI_FV2D() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets error vector 2Ch */
    void set_KOMBI_FV2C(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets error vector 2Ch */
    bool get_KOMBI_FV2C() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets error vector 2Bh */
    void set_KOMBI_FV2B(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets error vector 2Bh */
    bool get_KOMBI_FV2B() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets Error vector 2Ah */
    void set_KOMBI_FV2A(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets Error vector 2Ah */
    bool get_KOMBI_FV2A() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets error vector 29h */
    void set_KOMBI_FV29(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets error vector 29h */
    bool get_KOMBI_FV29() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets error vector 28h */
    void set_KOMBI_FV28(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets error vector 28h */
    bool get_KOMBI_FV28() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets error vector 37h */
    void set_KOMBI_FV37(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }

    /** Gets error vector 37h */
    bool get_KOMBI_FV37() const { return (bool)(raw >> 15 & 0x1); }
        
    /** Sets error vector 36h */
    void set_KOMBI_FV36(bool value){ raw = (raw & 0xffffffffffffbfff) | ((uint64_t)value & 0x1) << 14; }

    /** Gets error vector 36h */
    bool get_KOMBI_FV36() const { return (bool)(raw >> 14 & 0x1); }
        
    /** Sets error vector 35h */
    void set_KOMBI_FV35(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets error vector 35h */
    bool get_KOMBI_FV35() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets error vector 34h */
    void set_KOMBI_FV34(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets error vector 34h */
    bool get_KOMBI_FV34() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets error vector 33h */
    void set_KOMBI_FV33(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets error vector 33h */
    bool get_KOMBI_FV33() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets error vector 32h */
    void set_KOMBI_FV32(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets error vector 32h */
    bool get_KOMBI_FV32() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets error vector 31h */
    void set_KOMBI_FV31(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets error vector 31h */
    bool get_KOMBI_FV31() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets error vector 30h */
    void set_KOMBI_FV30(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets error vector 30h */
    bool get_KOMBI_FV30() const { return (bool)(raw >> 8 & 0x1); }
        
    /** Sets state variable 08h */
    void set_KOMBI_PGV08(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }

    /** Gets state variable 08h */
    bool get_KOMBI_PGV08() const { return (bool)(raw >> 7 & 0x1); }
        
    /** Sets state variable 07h */
    void set_KOMBI_PGV07(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }

    /** Gets state variable 07h */
    bool get_KOMBI_PGV07() const { return (bool)(raw >> 6 & 0x1); }
        
    /** Sets state variable 06h */
    void set_KOMBI_PGV06(bool value){ raw = (raw & 0xffffffffffffffdf) | ((uint64_t)value & 0x1) << 5; }

    /** Gets state variable 06h */
    bool get_KOMBI_PGV06() const { return (bool)(raw >> 5 & 0x1); }
        
    /** Sets state variable 05h */
    void set_KOMBI_PGV05(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }

    /** Gets state variable 05h */
    bool get_KOMBI_PGV05() const { return (bool)(raw >> 4 & 0x1); }
        
    /** Sets state variable 04h */
    void set_KOMBI_PGV04(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }

    /** Gets state variable 04h */
    bool get_KOMBI_PGV04() const { return (bool)(raw >> 3 & 0x1); }
        
    /** Sets state variable 03h */
    void set_KOMBI_PGV03(bool value){ raw = (raw & 0xfffffffffffffffb) | ((uint64_t)value & 0x1) << 2; }

    /** Gets state variable 03h */
    bool get_KOMBI_PGV03() const { return (bool)(raw >> 2 & 0x1); }
        
    /** Sets state variable 02h */
    void set_KOMBI_PGV02(bool value){ raw = (raw & 0xfffffffffffffffd) | ((uint64_t)value & 0x1) << 1; }

    /** Gets state variable 02h */
    bool get_KOMBI_PGV02() const { return (bool)(raw >> 1 & 0x1); }
        
    /** Sets state variable 01h */
    void set_KOMBI_PGV01(bool value){ raw = (raw & 0xfffffffffffffffe) | ((uint64_t)value & 0x1) << 0; }

    /** Gets state variable 01h */
    bool get_KOMBI_PGV01() const { return (bool)(raw >> 0 & 0x1); }
        
} SD_RS_KOMBI;



class ECU_KOMBI {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case KOMBI_A1_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case KOMBI_A2_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case KOMBI_A5_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case KOMBI_A6_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                case KOMBI_A7_CAN_ID:
                    LAST_FRAME_TIMES[4] = timestamp_now;
                    FRAME_DATA[4] = value;
                    return true;
                case KOMBI_A8_CAN_ID:
                    LAST_FRAME_TIMES[5] = timestamp_now;
                    FRAME_DATA[5] = value;
                    return true;
                case KOMBI_A9_CAN_ID:
                    LAST_FRAME_TIMES[6] = timestamp_now;
                    FRAME_DATA[6] = value;
                    return true;
                case SD_RS_KOMBI_CAN_ID:
                    LAST_FRAME_TIMES[7] = timestamp_now;
                    FRAME_DATA[7] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to KOMBI_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_A1(uint64_t now, uint64_t max_expire_time, KOMBI_A1* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_A2(uint64_t now, uint64_t max_expire_time, KOMBI_A2* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_A5
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_A5(uint64_t now, uint64_t max_expire_time, KOMBI_A5* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[2] && now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_A6
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_A6(uint64_t now, uint64_t max_expire_time, KOMBI_A6* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[3] && now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_A7
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_A7(uint64_t now, uint64_t max_expire_time, KOMBI_A7* dest) const {
            if (LAST_FRAME_TIMES[4] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[4] && now - LAST_FRAME_TIMES[4] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[4];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_A8
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_A8(uint64_t now, uint64_t max_expire_time, KOMBI_A8* dest) const {
            if (LAST_FRAME_TIMES[5] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[5] && now - LAST_FRAME_TIMES[5] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[5];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_A9
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_A9(uint64_t now, uint64_t max_expire_time, KOMBI_A9* dest) const {
            if (LAST_FRAME_TIMES[6] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[6] && now - LAST_FRAME_TIMES[6] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[6];
                return true;
            }
        }
            
        /** Sets data in pointer to SD_RS_KOMBI
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SD_RS_KOMBI(uint64_t now, uint64_t max_expire_time, SD_RS_KOMBI* dest) const {
            if (LAST_FRAME_TIMES[7] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[7] && now - LAST_FRAME_TIMES[7] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[7];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[8];
		uint64_t LAST_FRAME_TIMES[8];
};
#endif // __ECU_KOMBI_H_